{"questions":[{"questionId":"197","questionFrontendId":"197","Title":"Rising Temperature","TitleSlug":"rising-temperature","Content":"\u003cp\u003eGiven a \u003ccode\u003eWeather\u003c/code\u003e table, write a SQL query to find all dates\u0026#39; Ids with higher temperature compared to its previous (yesterday\u0026#39;s) dates.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+------------------+------------------+\r\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\r\n+---------+------------------+------------------+\r\n|       1 |       2015-01-01 |               10 |\r\n|       2 |       2015-01-02 |               25 |\r\n|       3 |       2015-01-03 |               20 |\r\n|       4 |       2015-01-04 |               30 |\r\n+---------+------------------+------------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, return the following Ids for the above \u003ccode\u003eWeather\u003c/code\u003e table:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+\r\n| Id |\r\n+----+\r\n|  2 |\r\n|  4 |\r\n+----+\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"上升的温度","TranslatedContent":"\u003cp\u003e给定一个 \u003ccode\u003eWeather\u003c/code\u003e 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。\u003c/p\u003e\n\n\u003cpre\u003e+---------+------------------+------------------+\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\n+---------+------------------+------------------+\n|       1 |       2015-01-01 |               10 |\n|       2 |       2015-01-02 |               25 |\n|       3 |       2015-01-03 |               20 |\n|       4 |       2015-01-04 |               30 |\n+---------+------------------+------------------+\u003c/pre\u003e\n\n\u003cp\u003e例如，根据上述给定的 \u003ccode\u003eWeather\u003c/code\u003e 表格，返回如下 Id:\u003c/p\u003e\n\n\u003cpre\u003e+----+\n| Id |\n+----+\n|  2 |\n|  4 |\n+----+\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17621203":{"ID":"17621203","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"641 ms","Memory":"N/A","URL":"/submissions/detail/17621203/","Code":"# Write your MySQL query statement below\nSELECT w.Id \nFROM Weather AS w\nJOIN Weather AS wj ON DATEDIFF(w.RecordDate, wj.RecordDate) = 1\nAND w.Temperature \u003e wj.Temperature","Timestamp":"1556090461"}}},{"questionId":"540","questionFrontendId":"540","Title":"Single Element in a Sorted Array","TitleSlug":"single-element-in-a-sorted-array","Content":"\u003cp\u003e\r\nGiven a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once. \r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,1,2,3,3,4,4,8,8]\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [3,3,7,7,10,11,11]\r\n\u003cb\u003eOutput:\u003c/b\u003e 10\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\nYour solution should run in O(log n) time and O(1) space.\r\n\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"有序数组中的单一元素","TranslatedContent":"\u003cp\u003e给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,1,2,3,3,4,4,8,8]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [3,3,7,7,10,11,11]\n\u003cstrong\u003e输出:\u003c/strong\u003e 10\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006802":{"ID":"15006802","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.3 MB","URL":"/submissions/detail/15006802/","Code":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Python3 里 reduce 移动到 functiontools 里了\n        return reduce(lambda x,n:x^n ,nums)\n        \n\n","Timestamp":"1552926777"},"1729210":{"ID":"1729210","StatusDisplay":"Accepted","Lang":"python","Runtime":"42 ms","Memory":"N/A","URL":"/submissions/detail/1729210/","Code":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Python3 里 reduce 移动到 functiontools 里了\n        return reduce(lambda x,n:x^n ,nums)\n        ","Timestamp":"1506610973"},"1729283":{"ID":"1729283","StatusDisplay":"Accepted","Lang":"python","Runtime":"39 ms","Memory":"N/A","URL":"/submissions/detail/1729283/","Code":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return reduce(lambda x,n:x^n ,nums)\n        ","Timestamp":"1506610940"},"7572930":{"ID":"7572930","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"N/A","URL":"/submissions/detail/7572930/","Code":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Python3 里 reduce 移动到 functiontools 里了\n        return reduce(lambda x,n:x^n ,nums)\n        \n","Timestamp":"1536218937"}}},{"questionId":"561","questionFrontendId":"561","Title":"Array Partition I","TitleSlug":"array-partition-i","Content":"\u003cp\u003e\r\nGiven an array of \u003cb\u003e2n\u003c/b\u003e integers, your task is to group these integers into \u003cb\u003en\u003c/b\u003e pairs of integer, say (a\u003csub\u003e1\u003c/sub\u003e, b\u003csub\u003e1\u003c/sub\u003e), (a\u003csub\u003e2\u003c/sub\u003e, b\u003csub\u003e2\u003c/sub\u003e), ..., (a\u003csub\u003en\u003c/sub\u003e, b\u003csub\u003en\u003c/sub\u003e) which makes sum of min(a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e) for all i from 1 to n as large as possible.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,4,3,2]\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e 4\r\n\u003cb\u003eExplanation:\u003c/b\u003e n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cb\u003en\u003c/b\u003e is a positive integer, which is in the range of [1, 10000].\u003c/li\u003e\r\n\u003cli\u003eAll the integers in the array will be in the range of [-10000, 10000].\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"数组拆分 I","TranslatedContent":"\u003cp\u003e给定长度为\u0026nbsp;\u003cstrong\u003e2n\u0026nbsp;\u003c/strong\u003e的数组, 你的任务是将这些数分成\u0026nbsp;\u003cstrong\u003en \u003c/strong\u003e对, 例如 (a\u003csub\u003e1\u003c/sub\u003e, b\u003csub\u003e1\u003c/sub\u003e), (a\u003csub\u003e2\u003c/sub\u003e, b\u003csub\u003e2\u003c/sub\u003e), ..., (a\u003csub\u003en\u003c/sub\u003e, b\u003csub\u003en\u003c/sub\u003e) ，使得从1 到\u0026nbsp;n 的 min(a\u003csub\u003ei\u003c/sub\u003e, b\u003csub\u003ei\u003c/sub\u003e) 总和最大。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,4,3,2]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\n\u003cstrong\u003e解释:\u003c/strong\u003e n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003cstrong\u003en\u003c/strong\u003e\u0026nbsp;是正整数,范围在 [1, 10000].\u003c/li\u003e\n\t\u003cli\u003e数组中的元素范围在 [-10000, 10000].\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006807":{"ID":"15006807","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"12.4 MB","URL":"/submissions/detail/15006807/","Code":"class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(sorted(nums)[::2])\n    \n\n","Timestamp":"1552926821"},"1729241":{"ID":"1729241","StatusDisplay":"Accepted","Lang":"python","Runtime":"119 ms","Memory":"N/A","URL":"/submissions/detail/1729241/","Code":"class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(sorted(nums)[::2])\n    ","Timestamp":"1501213780"},"1729254":{"ID":"1729254","StatusDisplay":"Accepted","Lang":"python","Runtime":"162 ms","Memory":"N/A","URL":"/submissions/detail/1729254/","Code":"class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum([min(nums[k],nums[k+1]) for k in range(0,len(nums),2)])\n    ","Timestamp":"1501151325"},"7572943":{"ID":"7572943","StatusDisplay":"Accepted","Lang":"python","Runtime":"128 ms","Memory":"N/A","URL":"/submissions/detail/7572943/","Code":"class Solution(object):\n    def arrayPairSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return sum(sorted(nums)[::2])\n    \n","Timestamp":"1536218953"}}},{"questionId":"2","questionFrontendId":"2","Title":"Add Two Numbers","TitleSlug":"add-two-numbers","Content":"\u003cp\u003eYou are given two \u003cb\u003enon-empty\u003c/b\u003e linked lists representing two non-negative integers. The digits are stored in \u003cb\u003ereverse order\u003c/b\u003e and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e (2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4)\r\n\u003cb\u003eOutput:\u003c/b\u003e 7 -\u0026gt; 0 -\u0026gt; 8\r\n\u003cb\u003eExplanation:\u003c/b\u003e 342 + 465 = 807.\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"两数相加","TranslatedContent":"\u003cp\u003e给出两个\u0026nbsp;\u003cstrong\u003e非空\u003c/strong\u003e 的链表用来表示两个非负的整数。其中，它们各自的位数是按照\u0026nbsp;\u003cstrong\u003e逆序\u003c/strong\u003e\u0026nbsp;的方式存储的，并且它们的每个节点只能存储\u0026nbsp;\u003cstrong\u003e一位\u003c/strong\u003e\u0026nbsp;数字。\u003c/p\u003e\n\n\u003cp\u003e如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\u003c/p\u003e\n\n\u003cp\u003e您可以假设除了数字 0 之外，这两个数都不会以 0\u0026nbsp;开头。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e(2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4)\n\u003cstrong\u003e输出：\u003c/strong\u003e7 -\u0026gt; 0 -\u0026gt; 8\n\u003cstrong\u003e原因：\u003c/strong\u003e342 + 465 = 807\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11170620":{"ID":"11170620","StatusDisplay":"Accepted","Lang":"python3","Runtime":"136 ms","Memory":"6.7 MB","URL":"/submissions/detail/11170620/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        head = None\n        p = None\n        flag = 0\n        while l1 and l2:\n            t = l1.val + l2.val + flag\n            if not p:\n                p = ListNode(t%10)\n            else:\n                p.next = ListNode(t%10)\n                p = p.next\n            if not head:\n                head = p\n            flag = t // 10\n            l1 = l1.next\n            l2 = l2.next\n        if l1 or l2 or flag:\n            if l1:\n                p.next = l1\n            elif l2:\n                p.next = l2\n            else:\n                p.next = None\n            \n            while p.next or flag:\n                if  p.next:\n                    t =  p.next.val + flag\n                    p.next.val = t % 10\n                else:\n                    t = flag\n                    p.next = ListNode(t%10)\n                flag = t // 10\n                p =  p.next\n        return head","Timestamp":"1546498343"},"15006692":{"ID":"15006692","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006692/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        head = None\n        p = None\n        flag = 0\n        while l1 and l2:\n            t = l1.val + l2.val + flag\n            if not p:\n                p = ListNode(t%10)\n            else:\n                p.next = ListNode(t%10)\n                p = p.next\n            if not head:\n                head = p\n            flag = t // 10\n            l1 = l1.next\n            l2 = l2.next\n        if l1 or l2 or flag:\n            if l1:\n                p.next = l1\n            elif l2:\n                p.next = l2\n            else:\n                p.next = None\n            \n            while p.next or flag:\n                if  p.next:\n                    t =  p.next.val + flag\n                    p.next.val = t % 10\n                else:\n                    t = flag\n                    p.next = ListNode(t%10)\n                flag = t // 10\n                p =  p.next\n        return head\n","Timestamp":"1552925389"}}},{"questionId":"216","questionFrontendId":"216","Title":"Combination Sum III","TitleSlug":"combination-sum-iii","Content":"\u003cdiv\u003e\r\n\u003cp\u003eFind all possible combinations of \u003ci\u003e\u003cb\u003ek\u003c/b\u003e\u003c/i\u003e numbers that add up to a number \u003ci\u003e\u003cb\u003en\u003c/b\u003e\u003c/i\u003e, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eAll numbers will be positive integers.\u003c/li\u003e\r\n\t\u003cli\u003eThe solution set must not contain duplicate combinations.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ci\u003e\u003cb\u003ek\u003c/b\u003e\u003c/i\u003e = 3, \u003ci\u003e\u003cb\u003en\u003c/b\u003e\u003c/i\u003e = 7\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,4]]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ci\u003e\u003cb\u003ek\u003c/b\u003e\u003c/i\u003e = 3, \u003ci\u003e\u003cb\u003en\u003c/b\u003e\u003c/i\u003e = 9\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[1,2,6], [1,3,5], [2,3,4]]\r\n\u003c/pre\u003e\r\n\u003c/div\u003e","Difficulty":"Medium","TranslatedTitle":"组合总和 III","TranslatedContent":"\u003cp\u003e找出所有相加之和为\u0026nbsp;\u003cem\u003e\u003cstrong\u003en\u003c/strong\u003e \u003c/em\u003e的\u0026nbsp;\u003cstrong\u003e\u003cem\u003ek\u0026nbsp;\u003c/em\u003e\u003c/strong\u003e个数的组合\u003cstrong\u003e\u003cem\u003e。\u003c/em\u003e\u003c/strong\u003e组合中只允许含有 1 -\u0026nbsp;9 的正整数，并且每种组合中不存在重复的数字。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e所有数字都是正整数。\u003c/li\u003e\n\t\u003cli\u003e解集不能包含重复的组合。\u0026nbsp;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cem\u003e\u003cstrong\u003ek\u003c/strong\u003e\u003c/em\u003e = 3, \u003cem\u003e\u003cstrong\u003en\u003c/strong\u003e\u003c/em\u003e = 7\n\u003cstrong\u003e输出:\u003c/strong\u003e [[1,2,4]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cem\u003e\u003cstrong\u003ek\u003c/strong\u003e\u003c/em\u003e = 3, \u003cem\u003e\u003cstrong\u003en\u003c/strong\u003e\u003c/em\u003e = 9\n\u003cstrong\u003e输出:\u003c/strong\u003e [[1,2,6], [1,3,5], [2,3,4]]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006701":{"ID":"15006701","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006701/","Code":"class Solution:\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, k, n):\n            if k == 0 and n == 0:\n                res.append(nums)\n            if len(nums) and n \u003c nums[-1]:\n                return\n            if k == 0:\n                return\n            if not nums:\n                m = 1\n            else:\n                m = nums[-1] + 1\n            M = n // k+1\n            if M \u003e 10:\n                M = 10\n            for x in range(m, M):\n                inner(nums+[x], k-1, n-x)\n            \n        inner([], k, n)\n        return res\n            \n        \n","Timestamp":"1552925480"},"7972050":{"ID":"7972050","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7972050/","Code":"class Solution:\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, k, n):\n            if k == 0 and n == 0:\n                res.append(nums)\n            if len(nums) and n \u003c nums[-1]:\n                return\n            if k == 0:\n                return\n            if not nums:\n                m = 1\n            else:\n                m = nums[-1] + 1\n            M = n // k+1\n            if M \u003e 10:\n                M = 10\n            for x in range(m, M):\n                inner(nums+[x], k-1, n-x)\n            \n        inner([], k, n)\n        return res\n            \n        ","Timestamp":"1538972468"},"7972052":{"ID":"7972052","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7972052/","Code":"class Solution:\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, k, n):\n            if k == 0 and n == 0:\n                res.append(nums)\n            if len(nums) and n \u003c nums[-1]:\n                return\n            if k == 0:\n                return\n            if not nums:\n                m = 1\n            else:\n                m = nums[-1] + 1\n            M = n // k+1\n            if M \u003e 10:\n                M = 10\n            for x in range(m, M):\n                inner(nums+[x], k-1, n-x)\n            \n        inner([], k, n)\n        return res\n            \n        ","Timestamp":"1538972474"},"7972054":{"ID":"7972054","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7972054/","Code":"class Solution:\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, k, n):\n            if k == 0 and n == 0:\n                res.append(nums)\n            if len(nums) and n \u003c nums[-1]:\n                return\n            if k == 0:\n                return\n            if not nums:\n                m = 1\n            else:\n                m = nums[-1] + 1\n            M = n // k+1\n            if M \u003e 10:\n                M = 10\n            for x in range(m, M):\n                inner(nums+[x], k-1, n-x)\n            \n        inner([], k, n)\n        return res\n            \n        ","Timestamp":"1538972483"}}},{"questionId":"36","questionFrontendId":"36","Title":"Valid Sudoku","TitleSlug":"valid-sudoku","Content":"\u003cp\u003eDetermine if a\u0026nbsp;9x9 Sudoku board\u0026nbsp;is valid.\u0026nbsp;Only the filled cells need to be validated\u0026nbsp;\u003cstrong\u003eaccording to the following rules\u003c/strong\u003e:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eEach row\u0026nbsp;must contain the\u0026nbsp;digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e without repetition.\u003c/li\u003e\r\n\t\u003cli\u003eEach column must contain the digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;without repetition.\u003c/li\u003e\r\n\t\u003cli\u003eEach of the 9 \u003ccode\u003e3x3\u003c/code\u003e sub-boxes of the grid must contain the digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;without repetition.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003eA partially filled sudoku which is valid.\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eThe Sudoku board could be partially filled, where empty cells are filled with the character \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n[\r\n  [\u0026quot;5\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\r\n  [\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\r\n  [\u0026quot;.\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;],\r\n  [\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;],\r\n  [\u0026quot;4\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;],\r\n  [\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;],\r\n  [\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;],\r\n  [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;5\u0026quot;],\r\n  [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;9\u0026quot;]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n[\r\n\u0026nbsp; [\u0026quot;8\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\r\n\u0026nbsp; [\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\r\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;],\r\n\u0026nbsp; [\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;],\r\n\u0026nbsp; [\u0026quot;4\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;],\r\n\u0026nbsp; [\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;],\r\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;],\r\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;5\u0026quot;],\r\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;9\u0026quot;]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Same as Example 1, except with the \u003cstrong\u003e5\u003c/strong\u003e in the top left corner being \r\n    modified to \u003cstrong\u003e8\u003c/strong\u003e. Since there are two 8\u0026#39;s in the top left 3x3 sub-box, it is invalid.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eA Sudoku board (partially filled) could be valid but is not necessarily solvable.\u003c/li\u003e\r\n\t\u003cli\u003eOnly the filled cells need to be validated according to the mentioned\u0026nbsp;rules.\u003c/li\u003e\r\n\t\u003cli\u003eThe given board\u0026nbsp;contain only digits \u003ccode\u003e1-9\u003c/code\u003e and the character \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe given board size is always \u003ccode\u003e9x9\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"有效的数独","TranslatedContent":"\u003cp\u003e判断一个\u0026nbsp;9x9 的数独是否有效。只需要\u003cstrong\u003e根据以下规则\u003c/strong\u003e，验证已经填入的数字是否有效即可。\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一行只能出现一次。\u003c/li\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一列只能出现一次。\u003c/li\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一个以粗实线分隔的\u0026nbsp;\u003ccode\u003e3x3\u003c/code\u003e\u0026nbsp;宫内只能出现一次。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height: 250px; width: 250px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e上图是一个部分填充的有效的数独。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e数独部分空格内已填入了数字，空白格用\u0026nbsp;\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e\u0026nbsp;表示。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n[\n  [\u0026quot;5\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\n  [\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\n  [\u0026quot;.\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;],\n  [\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;],\n  [\u0026quot;4\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;],\n  [\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;],\n  [\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;],\n  [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;5\u0026quot;],\n  [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;9\u0026quot;]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n[\n\u0026nbsp; [\u0026quot;8\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\n\u0026nbsp; [\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;],\n\u0026nbsp; [\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;],\n\u0026nbsp; [\u0026quot;4\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;1\u0026quot;],\n\u0026nbsp; [\u0026quot;7\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;],\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;],\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;1\u0026quot;,\u0026quot;9\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;5\u0026quot;],\n\u0026nbsp; [\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;8\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;7\u0026quot;,\u0026quot;9\u0026quot;]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003cstrong\u003e解释:\u003c/strong\u003e 除了第一行的第一个数字从\u003cstrong\u003e 5\u003c/strong\u003e 改为 \u003cstrong\u003e8 \u003c/strong\u003e以外，空格内其他数字均与 示例1 相同。\n     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e一个有效的数独（部分已被填充）不一定是可解的。\u003c/li\u003e\n\t\u003cli\u003e只需要根据以上规则，验证已经填入的数字是否有效即可。\u003c/li\u003e\n\t\u003cli\u003e给定数独序列只包含数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;和字符\u0026nbsp;\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e\u0026nbsp;。\u003c/li\u003e\n\t\u003cli\u003e给定数独永远是\u0026nbsp;\u003ccode\u003e9x9\u003c/code\u003e\u0026nbsp;形式的。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15770363":{"ID":"15770363","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"13.1 MB","URL":"/submissions/detail/15770363/","Code":"class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -\u003e bool:\n        rows = [set() for i in range(9)]\n        cols = [set() for i in range(9)]\n        boxs = [set() for i in range(9)]\n        \n        for x in range(9):\n            for y in range(9):\n                t = board[x][y]\n                if t == '.':\n                    continue\n     \n                if t not in rows[x]:\n                    rows[x].add(t)\n                else:\n                    return False\n                \n                if t not in cols[y]:\n                    cols[y].add(t)\n                else:\n                    return False\n                \n                bid = x//3 + (y//3)*3\n                if t not in boxs[bid]:\n                    boxs[bid].add(t)\n                else:\n                    return False\n        return True\n                    ","Timestamp":"1553771643"}}},{"questionId":"8","questionFrontendId":"8","Title":"String to Integer (atoi)","TitleSlug":"string-to-integer-atoi","Content":"\u003cp\u003eImplement \u003ccode\u003e\u003cspan\u003eatoi\u003c/span\u003e\u003c/code\u003e which\u0026nbsp;converts a string to an integer.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf no valid conversion could be performed, a zero value is returned.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eOnly the space character \u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e is considered as whitespace character.\u003c/li\u003e\r\n\t\u003cli\u003eAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u0026minus;2\u003csup\u003e31\u003c/sup\u003e,\u0026nbsp; 2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1]. If the numerical value is out of the range of representable values, INT_MAX (2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1) or INT_MIN (\u0026minus;2\u003csup\u003e31\u003c/sup\u003e) is returned.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;42\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 42\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;   -42\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e -42\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The first non-whitespace character is \u0026#39;-\u0026#39;, which is the minus sign.\r\n\u0026nbsp;            Then take as many numerical digits as possible, which gets 42.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;4193 with words\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4193\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Conversion stops at digit \u0026#39;3\u0026#39; as the next character is not a numerical digit.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;words and 987\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The first non-whitespace character is \u0026#39;w\u0026#39;, which is not a numerical \r\n\u0026nbsp;            digit or a +/- sign. Therefore no valid conversion could be performed.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;-91283472332\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e -2147483648\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The number \u0026quot;-91283472332\u0026quot; is out of the range of a 32-bit signed integer.\r\n\u0026nbsp;            Thefore INT_MIN (\u0026minus;2\u003csup\u003e31\u003c/sup\u003e) is returned.\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"字符串转换整数 (atoi)","TranslatedContent":"\u003cp\u003e请你来实现一个\u0026nbsp;\u003ccode\u003eatoi\u003c/code\u003e\u0026nbsp;函数，使其能将字符串转换成整数。\u003c/p\u003e\n\n\u003cp\u003e首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\u003c/p\u003e\n\n\u003cp\u003e当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\u003c/p\u003e\n\n\u003cp\u003e该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\u003c/p\u003e\n\n\u003cp\u003e注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\u003c/p\u003e\n\n\u003cp\u003e在任何情况下，若函数不能进行有效的转换时，请返回 0。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为\u0026nbsp;[\u0026minus;2\u003csup\u003e31\u003c/sup\u003e,\u0026nbsp; 2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1]。如果数值超过这个范围，qing返回 \u0026nbsp;INT_MAX (2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1) 或\u0026nbsp;INT_MIN (\u0026minus;2\u003csup\u003e31\u003c/sup\u003e) 。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;42\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 42\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;   -42\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e -42\n\u003cstrong\u003e解释: \u003c/strong\u003e第一个非空白字符为 \u0026#39;-\u0026#39;, 它是一个负号。\n\u0026nbsp;    我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;4193 with words\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 4193\n\u003cstrong\u003e解释:\u003c/strong\u003e 转换截止于数字 \u0026#39;3\u0026#39; ，因为它的下一个字符不为数字。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;words and 987\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003cstrong\u003e解释:\u003c/strong\u003e 第一个非空字符是 \u0026#39;w\u0026#39;, 但它不是数字或正、负号。\n     因此无法执行有效的转换。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;-91283472332\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e -2147483648\n\u003cstrong\u003e解释:\u003c/strong\u003e 数字 \u0026quot;-91283472332\u0026quot; 超过 32 位有符号整数范围。 \n\u0026nbsp;    因此返回 INT_MIN (\u0026minus;2\u003csup\u003e31\u003c/sup\u003e) 。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006875":{"ID":"15006875","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006875/","Code":"class Solution:\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        start = False\n        is_low_of_zero = False\n        res = \"\"\n        for x in str:\n            if start == False:\n                if x == ' ':\n                    continue\n                elif x == '+':\n                    is_low_of_zero = False\n                elif x == '-':\n                    is_low_of_zero = True\n                elif x.isdigit():\n                    res += x\n                else:\n                    return 0\n                start = True\n            else:\n                if x.isdigit():\n                    res += x\n                else:\n                    break\n        if not res:\n            return 0\n        \n        res = int(res)    \n        if res \u003e 2147483647:\n            res = 2147483647\n            if is_low_of_zero:\n                res = 2147483648\n        \n        return -res if is_low_of_zero else res\n        \n\n","Timestamp":"1552927389"},"2276369":{"ID":"2276369","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/2276369/","Code":"class Solution:\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        start = False\n        is_low_of_zero = False\n        res = \"\"\n        for x in str:\n            if start == False:\n                if x == ' ':\n                    continue\n                elif x == '+':\n                    is_low_of_zero = False\n                elif x == '-':\n                    is_low_of_zero = True\n                elif x.isdigit():\n                    res += x\n                else:\n                    return 0\n                start = True\n            else:\n                if x.isdigit():\n                    res += x\n                else:\n                    break\n        if not res:\n            return 0\n        \n        res = int(res)    \n        if res \u003e 2147483647:\n            res = 2147483647\n            if is_low_of_zero:\n                res = 2147483648\n        \n        return -res if is_low_of_zero else res\n        ","Timestamp":"1526311704"},"7573009":{"ID":"7573009","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7573009/","Code":"class Solution:\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        start = False\n        is_low_of_zero = False\n        res = \"\"\n        for x in str:\n            if start == False:\n                if x == ' ':\n                    continue\n                elif x == '+':\n                    is_low_of_zero = False\n                elif x == '-':\n                    is_low_of_zero = True\n                elif x.isdigit():\n                    res += x\n                else:\n                    return 0\n                start = True\n            else:\n                if x.isdigit():\n                    res += x\n                else:\n                    break\n        if not res:\n            return 0\n        \n        res = int(res)    \n        if res \u003e 2147483647:\n            res = 2147483647\n            if is_low_of_zero:\n                res = 2147483648\n        \n        return -res if is_low_of_zero else res\n        \n","Timestamp":"1536219104"}}},{"questionId":"172","questionFrontendId":"172","Title":"Factorial Trailing Zeroes","TitleSlug":"factorial-trailing-zeroes","Content":"\u003cp\u003eGiven an integer \u003ci\u003en\u003c/i\u003e, return the number of trailing zeroes in \u003ci\u003en\u003c/i\u003e!.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;3! = 6, no trailing zero.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 5\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;5! = 120, one trailing zero.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote: \u003c/b\u003eYour solution should be in logarithmic time complexity.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"阶乘后的零","TranslatedContent":"\u003cp\u003e给定一个整数 \u003cem\u003en\u003c/em\u003e，返回 \u003cem\u003en\u003c/em\u003e! 结果尾数中零的数量。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 3\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003cstrong\u003e解释:\u003c/strong\u003e\u0026nbsp;3! = 6, 尾数中没有零。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 5\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003cstrong\u003e解释:\u003c/strong\u003e\u0026nbsp;5! = 120, 尾数中有 1 个零.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e你算法的时间复杂度应为\u0026nbsp;\u003cem\u003eO\u003c/em\u003e(log\u0026nbsp;\u003cem\u003en\u003c/em\u003e)\u003cem\u003e\u0026nbsp;\u003c/em\u003e。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006684":{"ID":"15006684","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006684/","Code":"class Solution:\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        count = 1\n        res = 0\n        while True:\n            k = n // (5 ** count)\n            if k == 0:\n                break\n            res += k\n            count += 1\n        return res\n\n\n","Timestamp":"1552925343"},"1729391":{"ID":"1729391","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729391/","Code":"class Solution:\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        count = 1\n        res = 0\n        while True:\n            k = n // (5 ** count)\n            if k == 0:\n                break\n            res += k\n            count += 1\n        return res\n","Timestamp":"1524474636"},"7572757":{"ID":"7572757","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7572757/","Code":"class Solution:\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        count = 1\n        res = 0\n        while True:\n            k = n // (5 ** count)\n            if k == 0:\n                break\n            res += k\n            count += 1\n        return res\n\n","Timestamp":"1536218594"}}},{"questionId":"695","questionFrontendId":"695","Title":"Max Area of Island","TitleSlug":"max-area-of-island","Content":"\u003cp\u003eGiven a non-empty 2D array \u003ccode\u003egrid\u003c/code\u003e of 0\u0026#39;s and 1\u0026#39;s, an \u003cb\u003eisland\u003c/b\u003e is a group of \u003ccode\u003e1\u003c/code\u003e\u0026#39;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\r\n [0,1,0,0,1,1,0,0,\u003cb\u003e1\u003c/b\u003e,0,\u003cb\u003e1\u003c/b\u003e,0,0],\r\n [0,1,0,0,1,1,0,0,\u003cb\u003e1\u003c/b\u003e,\u003cb\u003e1\u003c/b\u003e,\u003cb\u003e1\u003c/b\u003e,0,0],\r\n [0,0,0,0,0,0,0,0,0,0,\u003cb\u003e1\u003c/b\u003e,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\r\n\u003c/pre\u003e\r\nGiven the above grid, return \u003ccode\u003e6\u003c/code\u003e. Note the answer is not 11, because the island must be connected 4-directionally.\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[[0,0,0,0,0,0,0,0]]\u003c/pre\u003e\r\nGiven the above grid, return \u003ccode\u003e0\u003c/code\u003e.\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The length of each dimension in the given \u003ccode\u003egrid\u003c/code\u003e does not exceed 50.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"岛屿的最大面积","TranslatedContent":"\u003cp\u003e给定一个包含了一些 0 和 1的非空二维数组\u0026nbsp;\u003ccode\u003egrid\u003c/code\u003e\u0026nbsp;, 一个\u0026nbsp;\u003cstrong\u003e岛屿\u003c/strong\u003e\u0026nbsp;是由四个方向 (水平或垂直) 的\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;(代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。\u003c/p\u003e\n\n\u003cp\u003e找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,\u003cstrong\u003e1\u003c/strong\u003e,0,\u003cstrong\u003e1\u003c/strong\u003e,0,0],\n [0,1,0,0,1,1,0,0,\u003cstrong\u003e1\u003c/strong\u003e,\u003cstrong\u003e1\u003c/strong\u003e,\u003cstrong\u003e1\u003c/strong\u003e,0,0],\n [0,0,0,0,0,0,0,0,0,0,\u003cstrong\u003e1\u003c/strong\u003e,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n\u003c/pre\u003e\n\n\u003cp\u003e对于上面这个给定矩阵应返回\u0026nbsp;\u003ccode\u003e6\u003c/code\u003e。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的\u0026lsquo;1\u0026rsquo;。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n[[0,0,0,0,0,0,0,0]]\u003c/pre\u003e\n\n\u003cp\u003e对于上面这个给定的矩阵, 返回\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u0026nbsp;\u003c/strong\u003e给定的矩阵\u003ccode\u003egrid\u003c/code\u003e\u0026nbsp;的长度和宽度都不超过 50。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006843":{"ID":"15006843","StatusDisplay":"Accepted","Lang":"python","Runtime":"64 ms","Memory":"13.5 MB","URL":"/submissions/detail/15006843/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n        res = 0\n        h, w = len(grid), len(grid[0])\n        def area(x, y):\n            if x\u003c 0 or x \u003e= w or y \u003c0 or y\u003e=h:\n                return 0\n            if grid[y][x]:\n                grid[y][x] = 0\n                return area(x+1, y) + area(x-1,y) + area(x, y+1) + area(x, y-1) + 1\n            return 0\n        \n        for x in range(w):\n            for y in range(h):\n                if grid[y][x]:\n                    res = max(area(x, y), res)\n        return res\n                \n","Timestamp":"1552927127"},"7990441":{"ID":"7990441","StatusDisplay":"Accepted","Lang":"python3","Runtime":"244 ms","Memory":"N/A","URL":"/submissions/detail/7990441/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        seen = set()\n        def area(r, c):\n            if not (0 \u003c= r \u003c len(grid) and 0 \u003c= c \u003c len(grid[0])\n                    and (r, c) not in seen and grid[r][c]):\n                return 0\n            seen.add((r, c))\n            return (1 + area(r+1, c) + area(r-1, c) +\n                    area(r, c-1) + area(r, c+1))\n\n        return max(area(r, c)\n                   for r in range(len(grid))\n                   for c in range(len(grid[0])))","Timestamp":"1538991768"},"7990446":{"ID":"7990446","StatusDisplay":"Accepted","Lang":"python3","Runtime":"244 ms","Memory":"N/A","URL":"/submissions/detail/7990446/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        seen = set()\n        def area(r, c):\n            if not (0 \u003c= r \u003c len(grid) and 0 \u003c= c \u003c len(grid[0])\n                    and (r, c) not in seen and grid[r][c]):\n                return 0\n            seen.add((r, c))\n            return (1 + area(r+1, c) + area(r-1, c) +\n                    area(r, c-1) + area(r, c+1))\n\n        return max(area(r, c)\n                   for r in range(len(grid))\n                   for c in range(len(grid[0])))","Timestamp":"1538991773"},"7990474":{"ID":"7990474","StatusDisplay":"Accepted","Lang":"python3","Runtime":"128 ms","Memory":"N/A","URL":"/submissions/detail/7990474/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        seen = set()\n        ans = 0\n        for r0, row in enumerate(grid):\n            for c0, val in enumerate(row):\n                if val and (r0, c0) not in seen:\n                    shape = 0\n                    stack = [(r0, c0)]\n                    seen.add((r0, c0))\n                    while stack:\n                        r, c = stack.pop()\n                        shape += 1\n                        for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                            if (0 \u003c= nr \u003c len(grid) and 0 \u003c= nc \u003c len(grid[0])\n                                    and grid[nr][nc] and (nr, nc) not in seen):\n                                stack.append((nr, nc))\n                                seen.add((nr, nc))\n                    ans = max(ans, shape)\n        return ans","Timestamp":"1538991801"},"7990836":{"ID":"7990836","StatusDisplay":"Accepted","Lang":"python3","Runtime":"156 ms","Memory":"N/A","URL":"/submissions/detail/7990836/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n        res = 0\n        h, w = len(grid), len(grid[0])\n        def area(x, y):\n            if x\u003c 0 or x \u003e= w or y \u003c0 or y\u003e=h:\n                return 0\n            if grid[y][x]:\n                grid[y][x] = 0\n                return area(x+1, y) + area(x-1,y) + area(x, y+1) + area(x, y-1) + 1\n            return 0\n        \n        for x in range(w):\n            for y in range(h):\n                if grid[y][x]:\n                    res = max(area(x, y), res)\n        return res\n                ","Timestamp":"1538992223"},"7990844":{"ID":"7990844","StatusDisplay":"Accepted","Lang":"python3","Runtime":"128 ms","Memory":"N/A","URL":"/submissions/detail/7990844/","Code":"class Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n        res = 0\n        h, w = len(grid), len(grid[0])\n        def area(x, y):\n            if x\u003c 0 or x \u003e= w or y \u003c0 or y\u003e=h:\n                return 0\n            if grid[y][x]:\n                grid[y][x] = 0\n                return area(x+1, y) + area(x-1,y) + area(x, y+1) + area(x, y-1) + 1\n            return 0\n        \n        for x in range(w):\n            for y in range(h):\n                if grid[y][x]:\n                    res = max(area(x, y), res)\n        return res\n                ","Timestamp":"1538992233"}}},{"questionId":"776","questionFrontendId":"590","Title":"N-ary Tree Postorder Traversal","TitleSlug":"n-ary-tree-postorder-traversal","Content":"\u003cp\u003eGiven an n-ary tree, return the \u003ci\u003epostorder\u003c/i\u003e traversal of its nodes\u0026#39; values.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given a \u003ccode\u003e3-ary\u003c/code\u003e tree:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn its postorder traversal as: \u003ccode\u003e[5,6,3,2,4,1]\u003c/code\u003e.\u003c/p\u003e\r\n\u0026nbsp;\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eRecursive solution is trivial, could you do it iteratively?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"N叉树的后序遍历","TranslatedContent":"\u003cp\u003e给定一个 N 叉树，返回其节点值的\u003cem\u003e后序遍历\u003c/em\u003e。\u003c/p\u003e\r\n\r\n\u003cp\u003e例如，给定一个\u0026nbsp;\u003ccode\u003e3叉树\u003c/code\u003e\u0026nbsp;:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e返回其后序遍历: \u003ccode\u003e[5,6,3,2,4,1]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u0026nbsp;递归法很简单，你可以使用迭代法完成此题吗?\u003c/p\u003e","Status":"ac","Tags":[],"Submits":{"15006820":{"ID":"15006820","StatusDisplay":"Accepted","Lang":"python","Runtime":"96 ms","Memory":"18.4 MB","URL":"/submissions/detail/15006820/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        if root.children:\n            for c in root.children:\n                res += self.postorder(c)\n        res.append(root.val)\n        return res\n","Timestamp":"1552926916"},"7971718":{"ID":"7971718","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7971718/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        if root.children:\n            for c in root.children:\n                res += self.postorder(c)\n        res+=[root.val]\n        return res","Timestamp":"1538971349"},"7971722":{"ID":"7971722","StatusDisplay":"Accepted","Lang":"python","Runtime":"144 ms","Memory":"N/A","URL":"/submissions/detail/7971722/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        if root.children:\n            for c in root.children:\n                res += self.postorder(c)\n        res+=[root.val]\n        return res","Timestamp":"1538971356"},"7971746":{"ID":"7971746","StatusDisplay":"Accepted","Lang":"python","Runtime":"144 ms","Memory":"N/A","URL":"/submissions/detail/7971746/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        if root.children:\n            for c in root.children:\n                res += self.postorder(c)\n        res.append(root.val)\n        return res","Timestamp":"1538971432"}}},{"questionId":"100","questionFrontendId":"100","Title":"Same Tree","TitleSlug":"same-tree","Content":"\u003cp\u003eGiven two binary trees, write a function to check if they are the same or not.\u003c/p\u003e\r\n\r\n\u003cp\u003eTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e     1         1\r\n          / \\       / \\\r\n         2   3     2   3\r\n\r\n        [1,2,3],   [1,2,3]\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e     1         1\r\n          /           \\\r\n         2             2\r\n\r\n        [1,2],     [1,null,2]\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e     1         1\r\n          / \\       / \\\r\n         2   1     1   2\r\n\r\n        [1,2,1],   [1,1,2]\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"相同的树","TranslatedContent":"\u003cp\u003e给定两个二叉树，编写一个函数来检验它们是否相同。\u003c/p\u003e\n\n\u003cp\u003e如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:  \u003c/strong\u003e    1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15004119":{"ID":"15004119","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"10.6 MB","URL":"/submissions/detail/15004119/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n\n\n","Timestamp":"1552924335"},"15004171":{"ID":"15004171","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.6 MB","URL":"/submissions/detail/15004171/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n\n\n","Timestamp":"1552924384"},"15004364":{"ID":"15004364","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"10.7 MB","URL":"/submissions/detail/15004364/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n\n\n","Timestamp":"1552924567"},"15006632":{"ID":"15006632","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006632/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n\n\n","Timestamp":"1552924897"},"1729261":{"ID":"1729261","StatusDisplay":"Accepted","Lang":"python","Runtime":"43 ms","Memory":"N/A","URL":"/submissions/detail/1729261/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n","Timestamp":"1519618220"},"1729271":{"ID":"1729271","StatusDisplay":"Accepted","Lang":"python","Runtime":"59 ms","Memory":"N/A","URL":"/submissions/detail/1729271/","Code":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSameTree(self, p, q):\r\n        \"\"\"\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        res = False\r\n        if (p is None and q is not None) or (p is not None and q is None):\r\n            return False\r\n        if p is None and q is None:\r\n            return True\r\n        if p is not None and q is not None:\r\n            if p.val == q.val:\r\n                res = True\r\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)","Timestamp":"1474249829"},"1729397":{"ID":"1729397","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/1729397/","Code":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSameTree(self, p, q):\r\n        \"\"\"\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        res = False\r\n        if (p is None and q is not None) or (p is not None and q is None):\r\n            return False\r\n        if p is None and q is None:\r\n            return True\r\n        if p is not None and q is not None:\r\n            if p.val == q.val:\r\n                res = True\r\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)","Timestamp":"1474249811"},"7572718":{"ID":"7572718","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7572718/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        res = False\n        if (p is None and q is not None) or (p is not None and q is None):\n            return False\n        if p is None and q is None:\n            return True\n        if p is not None and q is not None:\n            if p.val == q.val:\n                res = True\n        return res and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n\n","Timestamp":"1536218510"}}},{"questionId":"106","questionFrontendId":"106","Title":"Construct Binary Tree from Inorder and Postorder Traversal","TitleSlug":"construct-binary-tree-from-inorder-and-postorder-traversal","Content":"\u003cp\u003eGiven inorder and postorder traversal of a tree, construct the binary tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cbr /\u003e\r\nYou may assume that duplicates do not exist in the tree.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\ninorder =\u0026nbsp;[9,3,15,20,7]\r\npostorder = [9,15,7,20,3]\u003c/pre\u003e\r\n\r\n\u003cp\u003eReturn the following binary tree:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"从中序与后序遍历序列构造二叉树","TranslatedContent":"\u003cp\u003e根据一棵树的中序遍历与后序遍历构造二叉树。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003cbr\u003e\n你可以假设树中没有重复的元素。\u003c/p\u003e\n\n\u003cp\u003e例如，给出\u003c/p\u003e\n\n\u003cpre\u003e中序遍历 inorder =\u0026nbsp;[9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]\u003c/pre\u003e\n\n\u003cp\u003e返回如下的二叉树：\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"10991825":{"ID":"10991825","StatusDisplay":"Accepted","Lang":"python3","Runtime":"272 ms","Memory":"83.2 MB","URL":"/submissions/detail/10991825/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        i = inorder.index(root.val)\n        l = i - 0\n        r = len(inorder) - i - 1\n        left_i = inorder[:l]\n        left_p = postorder[:l]\n        root.left = self.buildTree(left_i, left_p)\n        right_i = inorder[l+1:]\n        right_p = postorder[l:l+r]\n        root.right = self.buildTree(right_i, right_p)\n        return root\n            \n        ","Timestamp":"1545982281"},"10991868":{"ID":"10991868","StatusDisplay":"Accepted","Lang":"python3","Runtime":"276 ms","Memory":"83 MB","URL":"/submissions/detail/10991868/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        root.left = self.buildTree(inorder[:l], postorder[:l])\n        root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        ","Timestamp":"1545982328"},"10991878":{"ID":"10991878","StatusDisplay":"Accepted","Lang":"python3","Runtime":"272 ms","Memory":"83 MB","URL":"/submissions/detail/10991878/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        root.left = self.buildTree(inorder[:l], postorder[:l])\n        root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        ","Timestamp":"1545982333"},"10991890":{"ID":"10991890","StatusDisplay":"Accepted","Lang":"python3","Runtime":"284 ms","Memory":"83 MB","URL":"/submissions/detail/10991890/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        root.left = self.buildTree(inorder[:l], postorder[:l])\n        root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        ","Timestamp":"1545982343"},"10991937":{"ID":"10991937","StatusDisplay":"Accepted","Lang":"python3","Runtime":"272 ms","Memory":"83.1 MB","URL":"/submissions/detail/10991937/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(inorder[:l], postorder[:l])\n        if r:\n            root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        ","Timestamp":"1545982390"},"10991945":{"ID":"10991945","StatusDisplay":"Accepted","Lang":"python3","Runtime":"272 ms","Memory":"83 MB","URL":"/submissions/detail/10991945/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(inorder[:l], postorder[:l])\n        if r:\n            root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        ","Timestamp":"1545982396"},"15004408":{"ID":"15004408","StatusDisplay":"Accepted","Lang":"python","Runtime":"244 ms","Memory":"85.5 MB","URL":"/submissions/detail/15004408/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(inorder[:l], postorder[:l])\n        if r:\n            root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        \n","Timestamp":"1552924616"},"15006641":{"ID":"15006641","StatusDisplay":"Accepted","Lang":"python","Runtime":"192 ms","Memory":"85.7 MB","URL":"/submissions/detail/15006641/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not postorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(inorder[:l], postorder[:l])\n        if r:\n            root.right = self.buildTree(inorder[l+1:], postorder[l:l+r])\n        return root\n            \n        \n","Timestamp":"1552924961"}}},{"questionId":"183","questionFrontendId":"183","Title":"Customers Who Never Order","TitleSlug":"customers-who-never-order","Content":"\u003cp\u003eSuppose that a website contains two tables, the \u003ccode\u003eCustomers\u003c/code\u003e table and the \u003ccode\u003eOrders\u003c/code\u003e table. Write a SQL query to find all customers who never order anything.\u003c/p\u003e\r\n\r\n\u003cp\u003eTable: \u003ccode\u003eCustomers\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+-------+\r\n| Id | Name  |\r\n+----+-------+\r\n| 1  | Joe   |\r\n| 2  | Henry |\r\n| 3  | Sam   |\r\n| 4  | Max   |\r\n+----+-------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eTable: \u003ccode\u003eOrders\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+------------+\r\n| Id | CustomerId |\r\n+----+------------+\r\n| 1  | 3          |\r\n| 2  | 1          |\r\n+----+------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eUsing the above tables as example, return the following:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+-----------+\r\n| Customers |\r\n+-----------+\r\n| Henry     |\r\n| Max       |\r\n+-----------+\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"从不订购的客户","TranslatedContent":"\u003cp\u003e某网站包含两个表，\u003ccode\u003eCustomers\u003c/code\u003e 表和 \u003ccode\u003eOrders\u003c/code\u003e 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eCustomers\u003c/code\u003e 表：\u003c/p\u003e\n\n\u003cpre\u003e+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003eOrders\u003c/code\u003e 表：\u003c/p\u003e\n\n\u003cpre\u003e+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n\u003c/pre\u003e\n\n\u003cp\u003e例如给定上述表格，你的查询应返回：\u003c/p\u003e\n\n\u003cpre\u003e+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17547299":{"ID":"17547299","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"918 ms","Memory":"N/A","URL":"/submissions/detail/17547299/","Code":"# Write your MySQL query statement below\nselect c.Name as Customers\nfrom Customers as c \nwhere c.Id not in (\n    select distinct(CustomerId) \n    from Orders \n)","Timestamp":"1555999479"},"17547347":{"ID":"17547347","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"653 ms","Memory":"N/A","URL":"/submissions/detail/17547347/","Code":"# Write your MySQL query statement below\nselect c.Name as Customers\nfrom Customers as c \nwhere c.Id not in (\n    select CustomerId\n    from Orders \n)","Timestamp":"1555999521"},"17547353":{"ID":"17547353","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"486 ms","Memory":"N/A","URL":"/submissions/detail/17547353/","Code":"# Write your MySQL query statement below\nselect c.Name as Customers\nfrom Customers as c \nwhere c.Id not in (\n    select CustomerId\n    from Orders \n)","Timestamp":"1555999528"}}},{"questionId":"121","questionFrontendId":"121","Title":"Best Time to Buy and Sell Stock","TitleSlug":"best-time-to-buy-and-sell-stock","Content":"\u003cp\u003eSay you have an array for which the \u003cem\u003ei\u003c/em\u003e\u003csup\u003eth\u003c/sup\u003e element is the price of a given stock on day \u003cem\u003ei\u003c/em\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that you cannot sell a stock before you buy one.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [7,1,5,3,6,4]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\r\n\u0026nbsp;            Not 7-1 = 6, as selling price needs to be larger than buying price.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [7,6,4,3,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e In this case, no transaction is done, i.e. max profit = 0.\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"买卖股票的最佳时机","TranslatedContent":"\u003cp\u003e给定一个数组，它的第\u0026nbsp;\u003cem\u003ei\u003c/em\u003e 个元素是一支给定股票第 \u003cem\u003ei\u003c/em\u003e 天的价格。\u003c/p\u003e\n\n\u003cp\u003e如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。\u003c/p\u003e\n\n\u003cp\u003e注意你不能在买入股票前卖出股票。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [7,1,5,3,6,4]\n\u003cstrong\u003e输出:\u003c/strong\u003e 5\n\u003cstrong\u003e解释: \u003c/strong\u003e在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [7,6,4,3,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003cstrong\u003e解释: \u003c/strong\u003e在这种情况下, 没有交易完成, 所以最大利润为 0。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15004200":{"ID":"15004200","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.2 MB","URL":"/submissions/detail/15004200/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        \n","Timestamp":"1552924413"},"15006657":{"ID":"15006657","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.2 MB","URL":"/submissions/detail/15006657/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        \n","Timestamp":"1552925122"},"6589522":{"ID":"6589522","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/6589522/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        ","Timestamp":"1536137092"},"6590485":{"ID":"6590485","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/6590485/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        ","Timestamp":"1536137788"},"7572735":{"ID":"7572735","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7572735/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        \n","Timestamp":"1536218535"},"7890264":{"ID":"7890264","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7890264/","Code":"class Solution:\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        minprice = 99999999999999999\n        maxprofit = 0\n        \n        for i in prices:\n            if i \u003c minprice:\n                minprice = i\n            elif (i - minprice) \u003e maxprofit:\n                maxprofit = i - minprice\n        return maxprofit\n        \n        ","Timestamp":"1538733650"}}},{"questionId":"563","questionFrontendId":"563","Title":"Binary Tree Tilt","TitleSlug":"binary-tree-tilt","Content":"\u003cp\u003eGiven a binary tree, return the tilt of the \u003cb\u003ewhole tree\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe tilt of a \u003cb\u003etree node\u003c/b\u003e is defined as the \u003cb\u003eabsolute difference\u003c/b\u003e between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe tilt of the \u003cb\u003ewhole tree\u003c/b\u003e is defined as the sum of all nodes' tilt.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\n         1\r\n       /   \\\r\n      2     3\r\n\u003cb\u003eOutput:\u003c/b\u003e 1\r\n\u003cb\u003eExplanation:\u003c/b\u003e \r\nTilt of node 2 : 0\r\nTilt of node 3 : 0\r\nTilt of node 1 : |2-3| = 1\r\nTilt of binary tree : 0 + 0 + 1 = 1\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe sum of node values in any subtree won't exceed the range of 32-bit integer. \u003c/li\u003e\r\n\u003cli\u003eAll the tilt values won't exceed the range of 32-bit integer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"二叉树的坡度","TranslatedContent":"\u003cp\u003e给定一个二叉树，计算\u003cstrong\u003e整个树\u003c/strong\u003e的坡度。\u003c/p\u003e\n\n\u003cp\u003e一个树的\u003cstrong\u003e节点的坡度\u003c/strong\u003e定义即为，该节点左子树的结点之和和右子树结点之和的\u003cstrong\u003e差的绝对值\u003c/strong\u003e。空结点的的坡度是0。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e整个树\u003c/strong\u003e的坡度就是其所有节点的坡度之和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n         1\n       /   \\\n      2     3\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003cstrong\u003e解释:\u003c/strong\u003e \n结点的坡度 2 : 0\n结点的坡度 3 : 0\n结点的坡度 1 : |2-3| = 1\n树的坡度 : 0 + 0 + 1 = 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e任何子树的结点的和不会超过32位整数的范围。\u003c/li\u003e\n\t\u003cli\u003e坡度的值不会超过32位整数的范围。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006808":{"ID":"15006808","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"13.7 MB","URL":"/submissions/detail/15006808/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root):\n            res = 0\n            if not root:\n                res += 0\n                return 0, 0\n            else:\n                l, rl = _inner(root.left)\n                r, rr = _inner(root.right)\n                res += rl\n                res += rr\n                return root.val + l + r, abs(l-r) + res\n        return _inner(root)[1]\n\n","Timestamp":"1552926833"},"1729199":{"ID":"1729199","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/1729199/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root):\n            res = 0\n            if not root:\n                res += 0\n                return 0, 0\n            else:\n                l, rl = _inner(root.left)\n                r, rr = _inner(root.right)\n                res += rl\n                res += rr\n                return root.val + l + r, abs(l-r) + res\n        return _inner(root)[1]\n","Timestamp":"1524414644"},"1729245":{"ID":"1729245","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/1729245/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root):\n            res = 0\n            if not root:\n                res += 0\n                return 0, 0\n            else:\n                l, rl = _inner(root.left)\n                r, rr = _inner(root.right)\n                res += rl\n                res += rr\n                return root.val + l + r, abs(l-r) + res\n        return _inner(root)[1]\n","Timestamp":"1524470830"}}},{"questionId":"575","questionFrontendId":"575","Title":"Distribute Candies","TitleSlug":"distribute-candies","Content":"Given an integer array with \u003cb\u003eeven\u003c/b\u003e length, where different numbers in this array represent different \u003cb\u003ekinds\u003c/b\u003e of candies. Each number means one candy of the corresponding kind. You need to distribute these candies \u003cb\u003eequally\u003c/b\u003e in number to brother and sister. Return the maximum number of \u003cb\u003ekinds\u003c/b\u003e of candies the sister could gain. \r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e candies = [1,1,2,2,3,3]\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\r\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. \r\nThe sister has three different kinds of candies. \r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e candies = [1,1,2,3]\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003cb\u003eExplanation:\u003c/b\u003e For example, the sister has candies [2,3] and the brother has candies [1,1]. \r\nThe sister has two different kinds of candies, the brother has only one kind of candies. \r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe length of the given array is in range [2, 10,000], and will be even.\u003c/li\u003e\r\n\u003cli\u003eThe number in given array is in range [-100,000, 100,000].\u003c/li\u003e\r\n\u003col\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"分糖果","TranslatedContent":"\u003cp\u003e给定一个\u003cstrong\u003e偶数\u003c/strong\u003e长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果\u003cstrong\u003e平均\u003c/strong\u003e分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e candies = [1,1,2,2,3,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解析: \u003c/strong\u003e一共有三种种类的糖果，每一种都有两个。\n     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e candies = [1,1,2,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解析:\u003c/strong\u003e 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e数组的长度为[2, 10,000]，并且确定为偶数。\u003c/li\u003e\n\t\u003cli\u003e数组中数字的大小在范围[-100,000, 100,000]内。\n\t\u003col\u003e\n\t\u003c/ol\u003e\n\t\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006813":{"ID":"15006813","StatusDisplay":"Accepted","Lang":"python","Runtime":"84 ms","Memory":"12.1 MB","URL":"/submissions/detail/15006813/","Code":"class Solution(object):\n    def distributeCandies(self, candies):\n        \"\"\"\n        :type candies: List[int]\n        :rtype: int\n        \"\"\"\n        return len(candies) / 2 if len(set(candies)) \u003e len(candies) / 2 else len(set(candies))\n        \n\n","Timestamp":"1552926856"},"1729369":{"ID":"1729369","StatusDisplay":"Accepted","Lang":"python","Runtime":"172 ms","Memory":"N/A","URL":"/submissions/detail/1729369/","Code":"class Solution(object):\n    def distributeCandies(self, candies):\n        \"\"\"\n        :type candies: List[int]\n        :rtype: int\n        \"\"\"\n        return len(candies) / 2 if len(set(candies)) \u003e len(candies) / 2 else len(set(candies))\n        ","Timestamp":"1501258706"},"7572950":{"ID":"7572950","StatusDisplay":"Accepted","Lang":"python","Runtime":"168 ms","Memory":"N/A","URL":"/submissions/detail/7572950/","Code":"class Solution(object):\n    def distributeCandies(self, candies):\n        \"\"\"\n        :type candies: List[int]\n        :rtype: int\n        \"\"\"\n        return len(candies) / 2 if len(set(candies)) \u003e len(candies) / 2 else len(set(candies))\n        \n","Timestamp":"1536218974"}}},{"questionId":"349","questionFrontendId":"349","Title":"Intersection of Two Arrays","TitleSlug":"intersection-of-two-arrays","Content":"\u003cp\u003eGiven two arrays, write a function to compute their intersection.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums1 = \u003cspan id=\"example-input-1-1\"\u003e[1,2,2,1]\u003c/span\u003e, nums2 = \u003cspan id=\"example-input-1-2\"\u003e[2,2]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[2]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums1 = \u003cspan id=\"example-input-2-1\"\u003e[4,9,5]\u003c/span\u003e, nums2 = \u003cspan id=\"example-input-2-2\"\u003e[9,4,9,8,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[9,4]\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eEach element in the result must be unique.\u003c/li\u003e\r\n\t\u003cli\u003eThe result can be in any order.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两个数组的交集","TranslatedContent":"\u003cp\u003e给定两个数组，编写一个函数来计算它们的交集。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums1 = [1,2,2,1], nums2 = [2,2]\n\u003cstrong\u003e输出: \u003c/strong\u003e[2]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u003cstrong\u003e输出: \u003c/strong\u003e[9,4]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e输出结果中的每个元素一定是唯一的。\u003c/li\u003e\n\t\u003cli\u003e我们可以不考虑输出结果的顺序。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006749":{"ID":"15006749","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11 MB","URL":"/submissions/detail/15006749/","Code":"class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return list(set(nums1) \u0026 set(nums2))\n","Timestamp":"1552925859"},"1729203":{"ID":"1729203","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/1729203/","Code":"class Solution(object):\r\n    def intersection(self, nums1, nums2):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        return list(set(nums1) \u0026 set(nums2))","Timestamp":"1474429288"}}},{"questionId":"768","questionFrontendId":"763","Title":"Partition Labels","TitleSlug":"partition-labels","Content":"\u003cp\u003e\r\nA string \u003ccode\u003eS\u003c/code\u003e of lowercase letters is given.  We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\r\n\u003c/p\u003e\u003cp\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e S = \"ababcbacadefegdehijhklij\"\r\n\u003cb\u003eOutput:\u003c/b\u003e [9,7,8]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\r\nThis is a partition so that each letter appears in at most one part.\r\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\u003col\u003e\r\n\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e will have length in range \u003ccode\u003e[1, 500]\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e will consist of lowercase letters (\u003ccode\u003e'a'\u003c/code\u003e to \u003ccode\u003e'z'\u003c/code\u003e) only.\u003c/li\u003e\r\n\u003c/ol\u003e\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"划分字母区间","TranslatedContent":"\u003cp\u003e字符串 \u003ccode\u003eS\u003c/code\u003e 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e S = \u0026quot;ababcbacadefegdehijhklij\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e [9,7,8]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n划分结果为 \u0026quot;ababcbaca\u0026quot;, \u0026quot;defegde\u0026quot;, \u0026quot;hijhklij\u0026quot;。\n每个字母最多出现在一个片段中。\n像 \u0026quot;ababcbacadefegde\u0026quot;, \u0026quot;hijhklij\u0026quot; 的划分是错误的，因为划分的片段数较少。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e的长度在\u003ccode\u003e[1, 500]\u003c/code\u003e之间。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e只包含小写字母\u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e到\u003ccode\u003e\u0026#39;z\u0026#39;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006861":{"ID":"15006861","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006861/","Code":"class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        d = {k:i for i,k in enumerate(list(S))}\n        res = []\n        lattes = set()\n        index = 0\n        for i, x in enumerate(list(S)):\n            if x not in lattes:\n                if all(i \u003e d[k] for k in list(lattes)) and i != 0:\n                    lattes = set()\n                    res.append(i - sum(res))\n                    \n                lattes.add(x)\n        if res:\n            res.append(len(S)-sum(res))\n        else:\n            res.append(len(S))\n        return res\n","Timestamp":"1552927262"},"7885564":{"ID":"7885564","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7885564/","Code":"class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        d = {k:i for i,k in enumerate(list(S))}\n        res = []\n        lattes = set()\n        index = 0\n        for i, x in enumerate(list(S)):\n            if x not in lattes:\n                if all(i \u003e d[k] for k in list(lattes)) and i != 0:\n                    print(lattes)\n                    lattes = set()\n                    res.append(i - sum(res))\n                    \n                lattes.add(x)\n        if res:\n            res.append(len(S)-sum(res))\n        else:\n            res.append(len(S))\n        print(res)\n        return res","Timestamp":"1538565332"},"7885565":{"ID":"7885565","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7885565/","Code":"class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        d = {k:i for i,k in enumerate(list(S))}\n        res = []\n        lattes = set()\n        index = 0\n        for i, x in enumerate(list(S)):\n            if x not in lattes:\n                if all(i \u003e d[k] for k in list(lattes)) and i != 0:\n                    lattes = set()\n                    res.append(i - sum(res))\n                    \n                lattes.add(x)\n        if res:\n            res.append(len(S)-sum(res))\n        else:\n            res.append(len(S))\n        print(res)\n        return res","Timestamp":"1538565342"},"7885568":{"ID":"7885568","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7885568/","Code":"class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        d = {k:i for i,k in enumerate(list(S))}\n        res = []\n        lattes = set()\n        index = 0\n        for i, x in enumerate(list(S)):\n            if x not in lattes:\n                if all(i \u003e d[k] for k in list(lattes)) and i != 0:\n                    lattes = set()\n                    res.append(i - sum(res))\n                    \n                lattes.add(x)\n        if res:\n            res.append(len(S)-sum(res))\n        else:\n            res.append(len(S))\n        return res","Timestamp":"1538565360"}}},{"questionId":"177","questionFrontendId":"177","Title":"Nth Highest Salary","TitleSlug":"nth-highest-salary","Content":"\u003cp\u003eWrite a SQL query to get the \u003cem\u003en\u003c/em\u003e\u003csup\u003eth\u003c/sup\u003e highest salary from the \u003ccode\u003eEmployee\u003c/code\u003e table.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, given the above Employee table, the \u003cem\u003en\u003c/em\u003e\u003csup\u003eth\u003c/sup\u003e highest salary where \u003cem\u003en\u003c/em\u003e = 2 is \u003ccode\u003e200\u003c/code\u003e. If there is no \u003cem\u003en\u003c/em\u003e\u003csup\u003eth\u003c/sup\u003e highest salary, then the query should return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+------------------------+\r\n| getNthHighestSalary(2) |\r\n+------------------------+\r\n| 200                    |\r\n+------------------------+\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"第N高的薪水","TranslatedContent":"\u003cp\u003e编写一个 SQL 查询，获取 \u003ccode\u003eEmployee\u003c/code\u003e 表中第\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e高的薪水（Salary）。\u003c/p\u003e\n\n\u003cpre\u003e+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n\u003c/pre\u003e\n\n\u003cp\u003e例如上述\u0026nbsp;\u003ccode\u003eEmployee\u003c/code\u003e\u0026nbsp;表，\u003cem\u003en = 2\u0026nbsp;\u003c/em\u003e时，应返回第二高的薪水\u0026nbsp;\u003ccode\u003e200\u003c/code\u003e。如果不存在第\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e高的薪水，那么查询应返回\u0026nbsp;\u003ccode\u003enull\u003c/code\u003e。\u003c/p\u003e\n\n\u003cpre\u003e+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17622201":{"ID":"17622201","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"337 ms","Memory":"N/A","URL":"/submissions/detail/17622201/","Code":"CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  SET N = N - 1;\n  RETURN (\n      # Write your MySQL query statement below.\n      select DISTINCT(salary) from employee\n      order by salary desc limit N, 1\n  );\nEND","Timestamp":"1556091129"}}},{"questionId":"1026","questionFrontendId":"984","Title":"String Without AAA or BBB","TitleSlug":"string-without-aaa-or-bbb","Content":"\u003cp\u003eGiven two integers \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e, return \u003cstrong\u003eany\u003c/strong\u003e string \u003ccode\u003eS\u003c/code\u003e such that:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e has length \u003ccode\u003eA + B\u003c/code\u003e and contains exactly \u003ccode\u003eA\u003c/code\u003e \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e letters, and exactly \u003ccode\u003eB\u003c/code\u003e \u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e letters;\u003c/li\u003e\r\n\t\u003cli\u003eThe substring\u0026nbsp;\u003ccode\u003e\u0026#39;aaa\u0026#39;\u003c/code\u003e\u0026nbsp;does not occur in \u003ccode\u003eS\u003c/code\u003e;\u003c/li\u003e\r\n\t\u003cli\u003eThe substring \u003ccode\u003e\u0026#39;bbb\u0026#39;\u003c/code\u003e does not occur in \u003ccode\u003eS\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-1-1\"\u003e1\u003c/span\u003e, B = \u003cspan id=\"example-input-1-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e\u0026quot;abb\u0026quot;\r\n\u003c/span\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026quot;abb\u0026quot;, \u0026quot;bab\u0026quot; and \u0026quot;bba\u0026quot; are all correct answers.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-2-1\"\u003e4\u003c/span\u003e, B = \u003cspan id=\"example-input-2-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e\u0026quot;aabaa\u0026quot;\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= B \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eIt is guaranteed such an \u003ccode\u003eS\u003c/code\u003e exists for the given \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"不含 AAA 或 BBB 的字符串","TranslatedContent":"\u003cp\u003e给定两个整数\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e，返回\u003cstrong\u003e任意\u003c/strong\u003e字符串 \u003ccode\u003eS\u003c/code\u003e，要求满足：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e 的长度为\u0026nbsp;\u003ccode\u003eA + B\u003c/code\u003e，且正好包含\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;个 \u003ccode\u003e\u0026#39;a\u0026#39;\u003c/code\u003e\u0026nbsp;字母与\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;个 \u003ccode\u003e\u0026#39;b\u0026#39;\u003c/code\u003e\u0026nbsp;字母；\u003c/li\u003e\n\t\u003cli\u003e子串\u0026nbsp;\u003ccode\u003e\u0026#39;aaa\u0026#39;\u003c/code\u003e\u0026nbsp;没有出现在\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;中；\u003c/li\u003e\n\t\u003cli\u003e子串\u0026nbsp;\u003ccode\u003e\u0026#39;bbb\u0026#39;\u003c/code\u003e 没有出现在\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;中。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = 1, B = 2\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;abb\u0026quot;\n\u003cstrong\u003e解释：\u003c/strong\u003e\u0026quot;abb\u0026quot;, \u0026quot;bab\u0026quot; 和 \u0026quot;bba\u0026quot; 都是正确答案。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = 4, B = 1\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;aabaa\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= B \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e对于给定的 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e，保证存在满足要求的 \u003ccode\u003eS\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12608505":{"ID":"12608505","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"6.4 MB","URL":"/submissions/detail/12608505/","Code":"#\n# @lc app=leetcode.cn id=984 lang=python3\n#\n# [984] 移除最多的同行或同列石头\n#\n# https://leetcode-cn.com/problems/string-without-aaa-or-bbb/description/\n#\n# algorithms\n# Easy (25.39%)\n# Total Accepted:    540\n# Total Submissions: 2.1K\n# Testcase Example:  '1\\n2'\n#\n# 给定两个整数 A 和 B，返回任意字符串 S，要求满足：\n# \n# \n# S 的长度为 A + B，且正好包含 A 个 'a' 字母与 B 个 'b' 字母；\n# 子串 'aaa' 没有出现在 S 中；\n# 子串 'bbb' 没有出现在 S 中。\n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：A = 1, B = 2\n# 输出：\"abb\"\n# 解释：\"abb\", \"bab\" 和 \"bba\" 都是正确答案。\n# \n# \n# 示例 2：\n# \n# 输入：A = 4, B = 1\n# 输出：\"aabaa\"\n# \n# \n# \n# 提示：\n# \n# \n# 0 \u003c= A \u003c= 100\n# 0 \u003c= B \u003c= 100\n# 对于给定的 A 和 B，保证存在满足要求的 S。\n# \n# \n#\nclass Solution:\n    def strWithout3a3b(self, A, B):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        if A \u003e B:\n            flag = False\n        else:\n            flag = True\n        while A or B:\n            if A == 0:\n                res += B * 'b'\n                B = 0\n            elif B == 0:\n                res += A * 'a'\n                A = 0 \n            elif A \u003e 2*B:\n                res += 'aa'\n                A -= 2\n                res += 'b'\n                B -= 1\n            elif 2 * A \u003c B:\n                res += 'bb'\n                B -= 2\n                res += 'a'\n                A -= 1\n            else:\n                if not flag:\n                    res += 'ab'\n                else:\n                    res += 'ba'\n                A -= 1\n                B -= 1\n        return res\n        \n","Timestamp":"1549954750"},"15006945":{"ID":"15006945","StatusDisplay":"Accepted","Lang":"python3","Runtime":"36 ms","Memory":"13.4 MB","URL":"/submissions/detail/15006945/","Code":"#\n# @lc app=leetcode.cn id=984 lang=python3\n#\n# [984] 移除最多的同行或同列石头\n#\n# https://leetcode-cn.com/problems/string-without-aaa-or-bbb/description/\n#\n# algorithms\n# Easy (25.39%)\n# Total Accepted:    540\n# Total Submissions: 2.1K\n# Testcase Example:  '1\\n2'\n#\n# 给定两个整数 A 和 B，返回任意字符串 S，要求满足：\n# \n# \n# S 的长度为 A + B，且正好包含 A 个 'a' 字母与 B 个 'b' 字母；\n# 子串 'aaa' 没有出现在 S 中；\n# 子串 'bbb' 没有出现在 S 中。\n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：A = 1, B = 2\n# 输出：\"abb\"\n# 解释：\"abb\", \"bab\" 和 \"bba\" 都是正确答案。\n# \n# \n# 示例 2：\n# \n# 输入：A = 4, B = 1\n# 输出：\"aabaa\"\n# \n# \n# \n# 提示：\n# \n# \n# 0 \u003c= A \u003c= 100\n# 0 \u003c= B \u003c= 100\n# 对于给定的 A 和 B，保证存在满足要求的 S。\n# \n# \n#\nclass Solution:\n    def strWithout3a3b(self, A, B):\n        \"\"\"\n        :type A: int\n        :type B: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        if A \u003e B:\n            flag = False\n        else:\n            flag = True\n        while A or B:\n            if A == 0:\n                res += B * 'b'\n                B = 0\n            elif B == 0:\n                res += A * 'a'\n                A = 0 \n            elif A \u003e 2*B:\n                res += 'aa'\n                A -= 2\n                res += 'b'\n                B -= 1\n            elif 2 * A \u003c B:\n                res += 'bb'\n                B -= 2\n                res += 'a'\n                A -= 1\n            else:\n                if not flag:\n                    res += 'ab'\n                else:\n                    res += 'ba'\n                A -= 1\n                B -= 1\n        return res\n        \n\n","Timestamp":"1552927964"}}},{"questionId":"19","questionFrontendId":"19","Title":"Remove Nth Node From End of List","TitleSlug":"remove-nth-node-from-end-of-list","Content":"\u003cp\u003eGiven a linked list, remove the \u003cem\u003en\u003c/em\u003e-th node from the end of list and return its head.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven linked list: \u003cstrong\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5\u003c/strong\u003e, and \u003cstrong\u003e\u003cem\u003en\u003c/em\u003e = 2\u003c/strong\u003e.\r\n\r\nAfter removing the second node from the end, the linked list becomes \u003cstrong\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;5\u003c/strong\u003e.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven \u003cem\u003en\u003c/em\u003e will always be valid.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eCould you do this in one pass?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"删除链表的倒数第N个节点","TranslatedContent":"\u003cp\u003e给定一个链表，删除链表的倒数第\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e个节点，并且返回链表的头结点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定一个链表: \u003cstrong\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5\u003c/strong\u003e, 和 \u003cstrong\u003e\u003cem\u003en\u003c/em\u003e = 2\u003c/strong\u003e.\n\n当删除了倒数第二个节点后，链表变为 \u003cstrong\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;5\u003c/strong\u003e.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e给定的 \u003cem\u003en\u003c/em\u003e\u0026nbsp;保证是有效的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你能尝试使用一趟扫描实现吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006688":{"ID":"15006688","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006688/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        second = None\n        first = head\n        p = 0\n        while first.next:\n            first = first.next\n            p += 1\n            if p == n:\n                second = head\n            elif p \u003e n:\n                second = second.next\n        if second:\n            second.next = second.next.next\n        elif head.next:\n            head = head.next\n        else:\n            return None\n        return head\n        \n        \n","Timestamp":"1552925365"},"4692273":{"ID":"4692273","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/4692273/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        second = None\n        first = head\n        p = 0\n        while first.next:\n            first = first.next\n            p += 1\n            if p == n:\n                second = head\n            elif p \u003e n:\n                second = second.next\n        if second:\n            second.next = second.next.next\n        elif head.next:\n            head = head.next\n        else:\n            return None\n        return head\n        \n        ","Timestamp":"1532605456"}}},{"questionId":"242","questionFrontendId":"242","Title":"Valid Anagram","TitleSlug":"valid-anagram","Content":"\u003cp\u003eGiven two strings \u003cem\u003es\u003c/em\u003e and \u003cem\u003et\u0026nbsp;\u003c/em\u003e, write a function to determine if \u003cem\u003et\u003c/em\u003e is an anagram of \u003cem\u003es\u003c/em\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003cem\u003es\u003c/em\u003e = \u0026quot;anagram\u0026quot;, \u003cem\u003et\u003c/em\u003e = \u0026quot;nagaram\u0026quot;\r\n\u003cb\u003eOutput:\u003c/b\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003cem\u003es\u003c/em\u003e = \u0026quot;rat\u0026quot;, \u003cem\u003et\u003c/em\u003e = \u0026quot;car\u0026quot;\r\n\u003cb\u003eOutput: \u003c/b\u003efalse\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cbr /\u003e\r\nYou may assume the string contains only lowercase alphabets.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003cbr /\u003e\r\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"有效的字母异位词","TranslatedContent":"\u003cp\u003e给定两个字符串 \u003cem\u003es\u003c/em\u003e 和 \u003cem\u003et\u003c/em\u003e ，编写一个函数来判断 \u003cem\u003et\u003c/em\u003e 是否是 \u003cem\u003es\u003c/em\u003e 的一个字母异位词。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cem\u003es\u003c/em\u003e = \u0026quot;anagram\u0026quot;, \u003cem\u003et\u003c/em\u003e = \u0026quot;nagaram\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cem\u003es\u003c/em\u003e = \u0026quot;rat\u0026quot;, \u003cem\u003et\u003c/em\u003e = \u0026quot;car\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003efalse\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003cbr\u003e\n你可以假设字符串只包含小写字母。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003cbr\u003e\n如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006719":{"ID":"15006719","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"11.6 MB","URL":"/submissions/detail/15006719/","Code":"class Solution:\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) != len(t):\n            return False\n        d = {}\n        for i in s:\n            d.setdefault(i, 0)\n            d[i] += 1\n        \n        for i in t:\n            if i not in d:\n                return False\n            else:\n                if d[i] \u003c= 0:\n                    return False\n                d[i] -= 1\n        return True\n\n","Timestamp":"1552925614"},"2277736":{"ID":"2277736","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/2277736/","Code":"class Solution:\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) != len(t):\n            return False\n        d = {}\n        for i in s:\n            d.setdefault(i, 0)\n            d[i] += 1\n        \n        for i in t:\n            if i not in d:\n                return False\n            else:\n                if d[i] \u003c= 0:\n                    return False\n                d[i] -= 1\n        return True","Timestamp":"1526313864"},"7572780":{"ID":"7572780","StatusDisplay":"Accepted","Lang":"python3","Runtime":"116 ms","Memory":"N/A","URL":"/submissions/detail/7572780/","Code":"class Solution:\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) != len(t):\n            return False\n        d = {}\n        for i in s:\n            d.setdefault(i, 0)\n            d[i] += 1\n        \n        for i in t:\n            if i not in d:\n                return False\n            else:\n                if d[i] \u003c= 0:\n                    return False\n                d[i] -= 1\n        return True\n","Timestamp":"1536218667"}}},{"questionId":"384","questionFrontendId":"384","Title":"Shuffle an Array","TitleSlug":"shuffle-an-array","Content":"\u003cp\u003eShuffle a set of numbers without duplicates.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n// Init an array with set 1, 2, and 3.\r\nint[] nums = {1,2,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.\r\nsolution.shuffle();\r\n\r\n// Resets the array back to its original configuration [1,2,3].\r\nsolution.reset();\r\n\r\n// Returns the random shuffling of array [1,2,3].\r\nsolution.shuffle();\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"打乱数组","TranslatedContent":"\u003cp\u003e打乱一个没有重复元素的数组。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006763":{"ID":"15006763","StatusDisplay":"Accepted","Lang":"python","Runtime":"436 ms","Memory":"17 MB","URL":"/submissions/detail/15006763/","Code":"class Solution:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.origin = nums[:]\n        self.nums = nums\n        \n\n    def reset(self):\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        :rtype: List[int]\n        \"\"\"\n        return self.origin\n        \n\n    def shuffle(self):\n        \"\"\"\n        Returns a random shuffling of the array.\n        :rtype: List[int]\n        \"\"\"\n        import random\n        random.shuffle(self.nums)\n        return self.nums\n\n","Timestamp":"1552925958"},"1729246":{"ID":"1729246","StatusDisplay":"Accepted","Lang":"python","Runtime":"628 ms","Memory":"N/A","URL":"/submissions/detail/1729246/","Code":"import random\r\n\r\nclass Solution(object):\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type size: int\r\n        \"\"\"\r\n        self.arr = nums\r\n\r\n    def reset(self):\r\n        \"\"\"\r\n        Resets the array to its original configuration and return it.\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        return self.arr\r\n        \r\n\r\n    def shuffle(self):\r\n        \"\"\"\r\n        Returns a random shuffling of the array.\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        l = self.arr[:]\r\n        random.shuffle(l)\r\n        return l\r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(nums)\r\n# param_1 = obj.reset()\r\n# param_2 = obj.shuffle()","Timestamp":"1472879224"},"7572865":{"ID":"7572865","StatusDisplay":"Accepted","Lang":"python","Runtime":"476 ms","Memory":"N/A","URL":"/submissions/detail/7572865/","Code":"import random\n\nclass Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :type size: int\n        \"\"\"\n        self.arr = nums\n\n    def reset(self):\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        :rtype: List[int]\n        \"\"\"\n        return self.arr\n        \n\n    def shuffle(self):\n        \"\"\"\n        Returns a random shuffling of the array.\n        :rtype: List[int]\n        \"\"\"\n        l = self.arr[:]\n        random.shuffle(l)\n        return l\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()\n","Timestamp":"1536218813"},"7890254":{"ID":"7890254","StatusDisplay":"Accepted","Lang":"python3","Runtime":"520 ms","Memory":"N/A","URL":"/submissions/detail/7890254/","Code":"class Solution:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.origin = nums[:]\n        self.nums = nums\n        \n\n    def reset(self):\n        \"\"\"\n        Resets the array to its original configuration and return it.\n        :rtype: List[int]\n        \"\"\"\n        return self.origin\n        \n\n    def shuffle(self):\n        \"\"\"\n        Returns a random shuffling of the array.\n        :rtype: List[int]\n        \"\"\"\n        import random\n        random.shuffle(self.nums)\n        return self.nums\n","Timestamp":"1538733635"}}},{"questionId":"182","questionFrontendId":"182","Title":"Duplicate Emails","TitleSlug":"duplicate-emails","Content":"\u003cp\u003eWrite a SQL query to find all duplicate emails in a table named \u003ccode\u003ePerson\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+---------+\r\n| Id | Email   |\r\n+----+---------+\r\n| 1  | a@b.com |\r\n| 2  | c@d.com |\r\n| 3  | a@b.com |\r\n+----+---------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, your query should return the following for the above table:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+\r\n| Email   |\r\n+---------+\r\n| a@b.com |\r\n+---------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: All emails are in lowercase.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"查找重复的电子邮箱","TranslatedContent":"\u003cp\u003e编写一个 SQL 查询，查找\u0026nbsp;\u003ccode\u003ePerson\u003c/code\u003e 表中所有重复的电子邮箱。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n\u003c/pre\u003e\n\n\u003cp\u003e根据以上输入，你的查询应返回以下结果：\u003c/p\u003e\n\n\u003cpre\u003e+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e所有电子邮箱都是小写字母。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"17546058":{"ID":"17546058","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"728 ms","Memory":"N/A","URL":"/submissions/detail/17546058/","Code":"select email from person group by email having count(email) \u003e 1","Timestamp":"1555997903"},"17546130":{"ID":"17546130","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"392 ms","Memory":"N/A","URL":"/submissions/detail/17546130/","Code":"select email from person group by email having count(1) \u003e 1","Timestamp":"1555997971"},"17546133":{"ID":"17546133","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"396 ms","Memory":"N/A","URL":"/submissions/detail/17546133/","Code":"select email from person group by email having count(1) \u003e 1","Timestamp":"1555997978"}}},{"questionId":"646","questionFrontendId":"646","Title":"Maximum Length of Pair Chain","TitleSlug":"maximum-length-of-pair-chain","Content":"\u003cp\u003e\r\nYou are given \u003ccode\u003en\u003c/code\u003e pairs of numbers. In every pair, the first number is always smaller than the second number.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nNow, we define a pair \u003ccode\u003e(c, d)\u003c/code\u003e can follow another pair \u003ccode\u003e(a, b)\u003c/code\u003e if and only if \u003ccode\u003eb \u003c c\u003c/code\u003e. Chain of pairs can be formed in this fashion. \r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\r\n\u003c/p\u003e\r\n\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [[1,2], [2,3], [3,4]]\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003cb\u003eExplanation:\u003c/b\u003e The longest chain is [1,2] -\u003e [3,4]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe number of given pairs will be in the range [1, 1000].\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"最长数对链","TranslatedContent":"\u003cp\u003e给出\u0026nbsp;\u003ccode\u003en\u003c/code\u003e\u0026nbsp;个数对。\u0026nbsp;在每一个数对中，第一个数字总是比第二个数字小。\u003c/p\u003e\n\n\u003cp\u003e现在，我们定义一种跟随关系，当且仅当\u0026nbsp;\u003ccode\u003eb \u0026lt; c\u003c/code\u003e\u0026nbsp;时，数对\u003ccode\u003e(c, d)\u003c/code\u003e\u0026nbsp;才可以跟在\u0026nbsp;\u003ccode\u003e(a, b)\u003c/code\u003e\u0026nbsp;后面。我们用这种形式来构造一个数对链。\u003c/p\u003e\n\n\u003cp\u003e给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [[1,2], [2,3], [3,4]]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释:\u003c/strong\u003e 最长的数对链是 [1,2] -\u0026gt; [3,4]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给出数对的个数在\u0026nbsp;[1, 1000] 范围内。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16803771":{"ID":"16803771","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"13.6 MB","URL":"/submissions/detail/16803771/","Code":"class Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -\u003e int:\n        \n        d = {}\n        for a, b in pairs:\n            if a in d: \n                if b \u003c d[a]:\n                    d[a] = b\n            else:\n                d[a] = b\n            \n        r =[(a,b) for a,b in d.items()]\n        r.sort(key=lambda a:a[1])\n        # print(r)\n        l = 1\n        t = r[0][1]\n        for x in r:\n            if x[0] \u003e t:\n                t = x[1]\n                l += 1\n        return l\n                ","Timestamp":"1555051454"},"16803847":{"ID":"16803847","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"13.3 MB","URL":"/submissions/detail/16803847/","Code":"class Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -\u003e int:\n        \n#         d = {}\n#         for a, b in pairs:\n#             if a in d: \n#                 if b \u003c d[a]:\n#                     d[a] = b\n#             else:\n#                 d[a] = b\n            \n#         r =[(a,b) for a,b in d.items()]\n        pairs.sort(key=lambda a:a[1])\n        # print(r)\n        l = 1\n        t = pairs[0][1]\n        for x in pairs:\n            if x[0] \u003e t:\n                t = x[1]\n                l += 1\n        return l\n                ","Timestamp":"1555051507"}}},{"questionId":"537","questionFrontendId":"537","Title":"Complex Number Multiplication","TitleSlug":"complex-number-multiplication","Content":"\u003cp\u003e\r\nGiven two strings representing two \u003ca href = \"https://en.wikipedia.org/wiki/Complex_number\"\u003ecomplex numbers\u003c/a\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nYou need to return a string representing their multiplication. Note i\u003csup\u003e2\u003c/sup\u003e = -1 according to the definition.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \"1+1i\", \"1+1i\"\r\n\u003cb\u003eOutput:\u003c/b\u003e \"0+2i\"\r\n\u003cb\u003eExplanation:\u003c/b\u003e (1 + i) * (1 + i) = 1 + i\u003csup\u003e2\u003c/sup\u003e + 2 * i = 2i, and you need convert it to the form of 0+2i.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \"1+-1i\", \"1+-1i\"\r\n\u003cb\u003eOutput:\u003c/b\u003e \"0+-2i\"\r\n\u003cb\u003eExplanation:\u003c/b\u003e (1 - i) * (1 - i) = 1 + i\u003csup\u003e2\u003c/sup\u003e - 2 * i = -2i, and you need convert it to the form of 0+-2i.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe input strings will not have extra blank.\u003c/li\u003e\r\n\u003cli\u003eThe input strings will be given in the form of \u003cb\u003ea+bi\u003c/b\u003e, where the integer \u003cb\u003ea\u003c/b\u003e and \u003cb\u003eb\u003c/b\u003e will both belong to the range of [-100, 100]. And \u003cb\u003ethe output should be also in this form\u003c/b\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"复数乘法","TranslatedContent":"\u003cp\u003e给定两个表示\u003ca href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\"\u003e复数\u003c/a\u003e的字符串。\u003c/p\u003e\n\n\u003cp\u003e返回表示它们乘积的字符串。注意，根据定义 i\u003csup\u003e2\u003c/sup\u003e = -1 。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;1+1i\u0026quot;, \u0026quot;1+1i\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;0+2i\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e (1 + i) * (1 + i) = 1 + i\u003csup\u003e2\u003c/sup\u003e + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;1+-1i\u0026quot;, \u0026quot;1+-1i\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;0+-2i\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e (1 - i) * (1 - i) = 1 + i\u003csup\u003e2\u003c/sup\u003e - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 \n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e输入字符串不包含额外的空格。\u003c/li\u003e\n\t\u003cli\u003e输入字符串将以\u0026nbsp;\u003cstrong\u003ea+bi\u003c/strong\u003e 的形式给出，其中整数 \u003cstrong\u003ea\u003c/strong\u003e 和 \u003cstrong\u003eb\u003c/strong\u003e 的范围均在 [-100, 100] 之间。\u003cstrong\u003e输出也应当符合这种形式\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006801":{"ID":"15006801","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006801/","Code":"class Solution(object):\n    def complexNumberMultiply(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        x0,x1 = self.u(a)\n        y0,y1 = self.u(b)\n        return \"%s+%si\" % (x0*y0-x1*y1,x0*y1+x1*y0)\n        \n    def u(self,str):\n        a = ''\n        b = ''\n        flag = True\n        for n in str[:-1]:\n            if flag:\n                a+=n\n                if n==u'+':\n                    flag = False\n            else:\n                b+=n\n        return int(a[:-1]),int(b)\n","Timestamp":"1552926762"},"1729487":{"ID":"1729487","StatusDisplay":"Accepted","Lang":"python","Runtime":"39 ms","Memory":"N/A","URL":"/submissions/detail/1729487/","Code":"class Solution(object):\n    def complexNumberMultiply(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        x0,x1 = self.u(a)\n        y0,y1 = self.u(b)\n        return \"%s+%si\" % (x0*y0-x1*y1,x0*y1+x1*y0)\n        \n    def u(self,str):\n        a = ''\n        b = ''\n        flag = True\n        for n in str[:-1]:\n            if flag:\n                a+=n\n                if n==u'+':\n                    flag = False\n            else:\n                b+=n\n        return int(a[:-1]),int(b)","Timestamp":"1501152864"}}},{"questionId":"303","questionFrontendId":"303","Title":"Range Sum Query - Immutable","TitleSlug":"range-sum-query-immutable","Content":"\u003cp\u003eGiven an integer array \u003ci\u003enums\u003c/i\u003e, find the sum of the elements between indices \u003ci\u003ei\u003c/i\u003e and \u003ci\u003ej\u003c/i\u003e (\u003ci\u003ei\u003c/i\u003e \u0026le; \u003ci\u003ej\u003c/i\u003e), inclusive.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr\u003e\r\n\u003cpre\u003e\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -\u003e 1\r\nsumRange(2, 5) -\u003e -1\r\nsumRange(0, 5) -\u003e -3\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eYou may assume that the array does not change.\u003c/li\u003e\r\n\u003cli\u003eThere are many calls to \u003ci\u003esumRange\u003c/i\u003e function.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"区域和检索 - 数组不可变","TranslatedContent":"\u003cp\u003e给定一个整数数组 \u0026nbsp;\u003cem\u003enums\u003c/em\u003e，求出数组从索引\u0026nbsp;\u003cem\u003ei\u0026nbsp;\u003c/em\u003e到\u0026nbsp;\u003cem\u003ej\u0026nbsp;\u0026nbsp;\u003c/em\u003e(\u003cem\u003ei\u003c/em\u003e\u0026nbsp;\u0026le;\u0026nbsp;\u003cem\u003ej\u003c/em\u003e) 范围内元素的总和，包含\u0026nbsp;\u003cem\u003ei,\u0026nbsp; j\u0026nbsp;\u003c/em\u003e两点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()\n\nsumRange(0, 2) -\u0026gt; 1\nsumRange(2, 5) -\u0026gt; -1\nsumRange(0, 5) -\u0026gt; -3\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e你可以假设数组不可变。\u003c/li\u003e\n\t\u003cli\u003e会多次调用\u0026nbsp;\u003cem\u003esumRange\u003c/em\u003e\u0026nbsp;方法。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"17817284":{"ID":"17817284","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"16.6 MB","URL":"/submissions/detail/17817284/","Code":"class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.results = []\n        if not nums:\n            return\n        self.results.append(nums[0])\n        for x in range(1, len(nums)):\n            self.results.append(self.results[x-1]+nums[x])\n            \n\n    def sumRange(self, i: int, j: int) -\u003e int:\n        if i \u003c= 0:\n            m = 0\n        else:\n            m = self.results[i-1]\n        \n        return self.results[j] - m\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)","Timestamp":"1556362991"}}},{"questionId":"461","questionFrontendId":"461","Title":"Hamming Distance","TitleSlug":"hamming-distance","Content":"\u003cp\u003eThe \u003ca href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\"\u003eHamming distance\u003c/a\u003e between two integers is the number of positions at which the corresponding bits are different.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven two integers \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e, calculate the Hamming distance.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\n0 \u0026le; \u003ccode\u003ex\u003c/code\u003e, \u003ccode\u003ey\u003c/code\u003e \u0026lt; 2\u003csup\u003e31\u003c/sup\u003e.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e x = 1, y = 4\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\n1   (0 0 0 1)\r\n4   (0 1 0 0)\r\n       \u0026uarr;   \u0026uarr;\r\n\r\nThe above arrows point to positions where the corresponding bits are different.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"汉明距离","TranslatedContent":"\u003cp\u003e两个整数之间的\u003ca href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\"\u003e汉明距离\u003c/a\u003e指的是这两个数字对应二进制位不同的位置的数目。\u003c/p\u003e\n\n\u003cp\u003e给出两个整数 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e，计算它们之间的汉明距离。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003cbr /\u003e\n0 \u0026le; \u003ccode\u003ex\u003c/code\u003e, \u003ccode\u003ey\u003c/code\u003e \u0026lt; 2\u003csup\u003e31\u003c/sup\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e x = 1, y = 4\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\n\u003cstrong\u003e解释:\u003c/strong\u003e\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u0026uarr;   \u0026uarr;\n\n上面的箭头指出了对应二进制位不同的位置。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006779":{"ID":"15006779","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006779/","Code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        #v2\n        return bin(x^y).count('1')\n    \n        #v1\n        a = bin(x)[2:]\n        b = bin(y)[2:]\n        if len(a) \u003c len(b):\n            a='0'*(len(b)-len(a))+a\n        else:\n            b='0'*(len(a)-len(b))+b\n        return sum([a!=b for a,b in zip(a,b)])\n        \n\n","Timestamp":"1552926101"},"1729329":{"ID":"1729329","StatusDisplay":"Accepted","Lang":"python","Runtime":"35 ms","Memory":"N/A","URL":"/submissions/detail/1729329/","Code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        a = bin(x)[2:]\n        b = bin(y)[2:]\n        if len(a) \u003c len(b):\n            a='0'*(len(b)-len(a))+a\n        else:\n            b='0'*(len(a)-len(b))+b\n        return sum([a!=b for a,b in zip(a,b)])\n        ","Timestamp":"1501148854"},"1729398":{"ID":"1729398","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729398/","Code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        a = bin(x)[2:]\n        b = bin(y)[2:]\n        if len(a) \u003c len(b):\n            a='0'*(len(b)-len(a))+a\n        else:\n            b='0'*(len(a)-len(b))+b\n        return sum([a!=b for a,b in zip(a,b)])\n        ","Timestamp":"1501149101"},"1729407":{"ID":"1729407","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729407/","Code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        #v2\n        return bin(x^y).count('1')\n    \n        #v1\n        a = bin(x)[2:]\n        b = bin(y)[2:]\n        if len(a) \u003c len(b):\n            a='0'*(len(b)-len(a))+a\n        else:\n            b='0'*(len(a)-len(b))+b\n        return sum([a!=b for a,b in zip(a,b)])\n        ","Timestamp":"1501149182"},"1729460":{"ID":"1729460","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729460/","Code":"class Solution(object):\r\n    def hammingDistance(self, x, y):\r\n        \"\"\"\r\n        :type x: int\r\n        :type y: int\r\n        :rtype: int\r\n        \"\"\"\r\n        return bin(x^y).count('1')","Timestamp":"1487320713"},"7572907":{"ID":"7572907","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7572907/","Code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        #v2\n        return bin(x^y).count('1')\n    \n        #v1\n        a = bin(x)[2:]\n        b = bin(y)[2:]\n        if len(a) \u003c len(b):\n            a='0'*(len(b)-len(a))+a\n        else:\n            b='0'*(len(a)-len(b))+b\n        return sum([a!=b for a,b in zip(a,b)])\n        \n","Timestamp":"1536218894"}}},{"questionId":"829","questionFrontendId":"811","Title":"Subdomain Visit Count","TitleSlug":"subdomain-visit-count","Content":"\u003cp\u003eA website domain like \u0026quot;discuss.leetcode.com\u0026quot; consists of various subdomains. At the top level, we have \u0026quot;com\u0026quot;, at the next level, we have \u0026quot;leetcode.com\u0026quot;, and at the lowest level, \u0026quot;discuss.leetcode.com\u0026quot;. When we visit a domain like \u0026quot;discuss.leetcode.com\u0026quot;, we will also visit the parent domains \u0026quot;leetcode.com\u0026quot; and \u0026quot;com\u0026quot; implicitly.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow, call a \u0026quot;count-paired domain\u0026quot; to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be \u0026quot;9001 discuss.leetcode.com\u0026quot;.\u003c/p\u003e\r\n\r\n\u003cp\u003eWe are given a list \u003ccode\u003ecpdomains\u003c/code\u003e of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 1:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\n[\u0026quot;9001 discuss.leetcode.com\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \r\n[\u0026quot;9001 discuss.leetcode.com\u0026quot;, \u0026quot;9001 leetcode.com\u0026quot;, \u0026quot;9001 com\u0026quot;]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nWe only have one website domain: \u0026quot;discuss.leetcode.com\u0026quot;. As discussed above, the subdomain \u0026quot;leetcode.com\u0026quot; and \u0026quot;com\u0026quot; will also be visited. So they will all be visited 9001 times.\r\n\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 2:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\n[\u0026quot;900 google.mail.com\u0026quot;, \u0026quot;50 yahoo.com\u0026quot;, \u0026quot;1 intel.mail.com\u0026quot;, \u0026quot;5 wiki.org\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \r\n[\u0026quot;901 mail.com\u0026quot;,\u0026quot;50 yahoo.com\u0026quot;,\u0026quot;900 google.mail.com\u0026quot;,\u0026quot;5 wiki.org\u0026quot;,\u0026quot;5 org\u0026quot;,\u0026quot;1 intel.mail.com\u0026quot;,\u0026quot;951 com\u0026quot;]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nWe will visit \u0026quot;google.mail.com\u0026quot; 900 times, \u0026quot;yahoo.com\u0026quot; 50 times, \u0026quot;intel.mail.com\u0026quot; once and \u0026quot;wiki.org\u0026quot; 5 times. For the subdomains, we will visit \u0026quot;mail.com\u0026quot; 900 + 1 = 901 times, \u0026quot;com\u0026quot; 900 + 50 + 1 = 951 times, and \u0026quot;org\u0026quot; 5 times.\r\n\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNotes: \u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe length of \u003ccode\u003ecpdomains\u003c/code\u003e will not exceed\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003eThe length of each domain name will not exceed \u003ccode\u003e100\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach address will have either 1 or 2 \u0026quot;.\u0026quot; characters.\u003c/li\u003e\r\n\t\u003cli\u003eThe input count\u0026nbsp;in any count-paired domain will not exceed \u003ccode\u003e10000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe answer output can be returned in any order.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"子域名访问计数","TranslatedContent":"\u003cp\u003e一个网站域名，如\u0026quot;discuss.leetcode.com\u0026quot;，包含了多个子域名。作为顶级域名，常用的有\u0026quot;com\u0026quot;，下一级则有\u0026quot;leetcode.com\u0026quot;，最低的一级为\u0026quot;discuss.leetcode.com\u0026quot;。当我们访问域名\u0026quot;discuss.leetcode.com\u0026quot;时，也同时访问了其父域名\u0026quot;leetcode.com\u0026quot;以及顶级域名\u0026nbsp;\u0026quot;com\u0026quot;。\u003c/p\u003e\n\n\u003cp\u003e给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：\u0026quot;9001 discuss.leetcode.com\u0026quot;。\u003c/p\u003e\n\n\u003cp\u003e接下来会给出一组访问次数和域名组合的列表\u003ccode\u003ecpdomains\u003c/code\u003e\u0026nbsp;。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例 1:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n[\u0026quot;9001 discuss.leetcode.com\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e \n[\u0026quot;9001 discuss.leetcode.com\u0026quot;, \u0026quot;9001 leetcode.com\u0026quot;, \u0026quot;9001 com\u0026quot;]\n\u003cstrong\u003e说明:\u003c/strong\u003e \n例子中仅包含一个网站域名：\u0026quot;discuss.leetcode.com\u0026quot;。按照前文假设，子域名\u0026quot;leetcode.com\u0026quot;和\u0026quot;com\u0026quot;都会被访问，所以它们都被访问了9001次。\n\u003c/pre\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例 2\n输入:\u003c/strong\u003e \n[\u0026quot;900 google.mail.com\u0026quot;, \u0026quot;50 yahoo.com\u0026quot;, \u0026quot;1 intel.mail.com\u0026quot;, \u0026quot;5 wiki.org\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e \n[\u0026quot;901 mail.com\u0026quot;,\u0026quot;50 yahoo.com\u0026quot;,\u0026quot;900 google.mail.com\u0026quot;,\u0026quot;5 wiki.org\u0026quot;,\u0026quot;5 org\u0026quot;,\u0026quot;1 intel.mail.com\u0026quot;,\u0026quot;951 com\u0026quot;]\n\u003cstrong\u003e说明:\u003c/strong\u003e \n按照假设，会访问\u0026quot;google.mail.com\u0026quot; 900次，\u0026quot;yahoo.com\u0026quot; 50次，\u0026quot;intel.mail.com\u0026quot; 1次，\u0026quot;wiki.org\u0026quot; 5次。\n而对于父域名，会访问\u0026quot;mail.com\u0026quot; 900+1 = 901次，\u0026quot;com\u0026quot; 900 + 50 + 1 = 951次，和 \u0026quot;org\u0026quot; 5 次。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意事项：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003ecpdomains\u003c/code\u003e\u0026nbsp;的长度小于\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个域名的长度小于\u003ccode\u003e100\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个域名地址包含一个或两个\u0026quot;.\u0026quot;符号。\u003c/li\u003e\n\t\u003cli\u003e输入中任意一个域名的访问次数都小于\u003ccode\u003e10000\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006880":{"ID":"15006880","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"11 MB","URL":"/submissions/detail/15006880/","Code":"class Solution(object):\n    def subdomainVisits(self, cpdomains):\n        \"\"\"\n        :type cpdomains: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = {}\n        for x in cpdomains:\n            times, domain = x.split(' ')\n            subdomain = domain.split('.')\n            for x in range(len(subdomain)):\n                d = '.'.join(subdomain[x:])\n                res.setdefault(d,0)\n                res[d] += int(times)\n        return [\"%d %s\" % (times,domain) for domain,times in res.items()]\n            \n        \n","Timestamp":"1552927442"},"7982153":{"ID":"7982153","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/7982153/","Code":"class Solution(object):\n    def subdomainVisits(self, cpdomains):\n        \"\"\"\n        :type cpdomains: List[str]\n        :rtype: List[str]\n        \"\"\"\n        res = {}\n        for x in cpdomains:\n            times, domain = x.split(' ')\n            subdomain = domain.split('.')\n            for x in range(len(subdomain)):\n                d = '.'.join(subdomain[x:])\n                res.setdefault(d,0)\n                res[d] += int(times)\n        return [\"%d %s\" % (times,domain) for domain,times in res.items()]\n            \n        ","Timestamp":"1538984794"}}},{"questionId":"521","questionFrontendId":"521","Title":"Longest Uncommon Subsequence I ","TitleSlug":"longest-uncommon-subsequence-i","Content":"\u003cp\u003e\r\nGiven a group of two strings, you need to find the longest uncommon subsequence of this group of two strings.\r\nThe longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be \u003cb\u003eany\u003c/b\u003e subsequence of the other strings.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nA \u003cb\u003esubsequence\u003c/b\u003e is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \"aba\", \"cdc\"\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e The longest uncommon subsequence is \"aba\" (or \"cdc\"), \u003cbr/\u003ebecause \"aba\" is a subsequence of \"aba\", \u003cbr/\u003ebut not a subsequence of any other strings in the group of two strings. \r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003col\u003e\r\n\u003cli\u003eBoth strings' lengths will not exceed 100.\u003c/li\u003e\r\n\u003cli\u003eOnly letters from a ~ z will appear in input strings. \u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"最长特殊序列 Ⅰ","TranslatedContent":"\u003cp\u003e给定两个字符串，你需要从这两个字符串中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e子序列\u003c/strong\u003e可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。\u003c/p\u003e\n\n\u003cp\u003e输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;aba\u0026quot;, \u0026quot;cdc\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解析:\u003c/strong\u003e 最长特殊序列可为 \u0026quot;aba\u0026quot; (或 \u0026quot;cdc\u0026quot;)\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e两个字符串长度均小于100。\u003c/li\u003e\n\t\u003cli\u003e字符串中的字符仅含有\u0026nbsp;\u0026#39;a\u0026#39;~\u0026#39;z\u0026#39;。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"10980806":{"ID":"10980806","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"6.4 MB","URL":"/submissions/detail/10980806/","Code":"class Solution:\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        if a != b:\n            return max(len(a), len(b))\n        else:\n            return -1\n        ","Timestamp":"1545970455"},"15006948":{"ID":"15006948","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006948/","Code":"class Solution:\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        if a != b:\n            return max(len(a), len(b))\n        else:\n            return -1\n        \n","Timestamp":"1552928063"}}},{"questionId":"107","questionFrontendId":"107","Title":"Binary Tree Level Order Traversal II","TitleSlug":"binary-tree-level-order-traversal-ii","Content":"\u003cp\u003eGiven a binary tree, return the \u003ci\u003ebottom-up level order\u003c/i\u003e traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor example:\u003cbr /\u003e\r\nGiven binary tree \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e,\u003cbr /\u003e\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\nreturn its bottom-up level order traversal as:\u003cbr /\u003e\r\n\u003cpre\u003e\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"二叉树的层次遍历 II","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）\u003c/p\u003e\n\n\u003cp\u003e例如：\u003cbr\u003e\n给定二叉树 \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e,\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u003c/pre\u003e\n\n\u003cp\u003e返回其自底向上的层次遍历为：\u003c/p\u003e\n\n\u003cpre\u003e[\n  [15,7],\n  [9,20],\n  [3]\n]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15004306":{"ID":"15004306","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11.7 MB","URL":"/submissions/detail/15004306/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            inner(node.left, depth+1)\n            inner(node.right, depth+1)\n        inner(root)\n        return res[::-1]\n        \n","Timestamp":"1552924503"},"15004427":{"ID":"15004427","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11.7 MB","URL":"/submissions/detail/15004427/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            inner(node.left, depth+1)\n            inner(node.right, depth+1)\n        inner(root)\n        return res[::-1]\n        \n","Timestamp":"1552924624"},"15006642":{"ID":"15006642","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006642/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            inner(node.left, depth+1)\n            inner(node.right, depth+1)\n        inner(root)\n        return res[::-1]\n        \n","Timestamp":"1552924979"},"7983744":{"ID":"7983744","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7983744/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            inner(node.left, depth+1)\n            inner(node.right, depth+1)\n        inner(root)\n        return res[::-1]\n        ","Timestamp":"1538986206"}}},{"questionId":"230","questionFrontendId":"230","Title":"Kth Smallest Element in a BST","TitleSlug":"kth-smallest-element-in-a-bst","Content":"\u003cp\u003eGiven a binary search tree, write a function \u003ccode\u003ekthSmallest\u003c/code\u003e to find the \u003cb\u003ek\u003c/b\u003eth smallest element in it.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote: \u003c/b\u003e\u003cbr /\u003e\r\nYou may assume k is always valid, 1 \u0026le; k \u0026le; BST\u0026#39;s total elements.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e root = [3,1,4,null,2], k = 1\r\n   3\r\n  / \\\r\n 1   4\r\n  \\\r\n\u0026nbsp;  2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e root = [5,3,6,2,4,null,null,1], k = 3\r\n       5\r\n      / \\\r\n     3   6\r\n    / \\\r\n   2   4\r\n  /\r\n 1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr /\u003e\r\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"二叉搜索树中第K小的元素","TranslatedContent":"\u003cp\u003e给定一个二叉搜索树，编写一个函数\u0026nbsp;\u003ccode\u003ekthSmallest\u003c/code\u003e\u0026nbsp;来查找其中第\u0026nbsp;\u003cstrong\u003ek\u0026nbsp;\u003c/strong\u003e个最小的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003cbr\u003e\n你可以假设 k 总是有效的，1 \u0026le; k \u0026le; 二叉搜索树元素个数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u0026nbsp;  2\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003cbr\u003e\n如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化\u0026nbsp;\u003ccode\u003ekthSmallest\u003c/code\u003e\u0026nbsp;函数？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006709":{"ID":"15006709","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"18.8 MB","URL":"/submissions/detail/15006709/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = []\n        def inner(node):\n            if not node:\n                return\n            inner(node.left)\n            res.append(node.val)\n            inner(node.right)\n        inner(root)\n        return res[k-1]\n            \n        \n        \n","Timestamp":"1552925537"},"8448296":{"ID":"8448296","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/8448296/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def kthSmallest(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = []\n        def inner(node):\n            if not node:\n                return\n            inner(node.left)\n            res.append(node.val)\n            inner(node.right)\n        inner(root)\n        return res[k-1]\n            \n        \n        ","Timestamp":"1539934924"}}},{"questionId":"98","questionFrontendId":"98","Title":"Validate Binary Search Tree","TitleSlug":"validate-binary-search-tree","Content":"\u003cp\u003eGiven a binary tree, determine if it is a valid binary search tree (BST).\u003c/p\u003e\r\n\r\n\u003cp\u003eAssume a BST is defined as follows:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe left subtree of a node contains only nodes with keys \u003cstrong\u003eless than\u003c/strong\u003e the node\u0026#39;s key.\u003c/li\u003e\r\n\t\u003cli\u003eThe right subtree of a node contains only nodes with keys \u003cstrong\u003egreater than\u003c/strong\u003e the node\u0026#39;s key.\u003c/li\u003e\r\n\t\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n    2\r\n   / \\\r\n  1   3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    5\r\n   / \\\r\n  1   4\r\n\u0026nbsp;    / \\\r\n\u0026nbsp;   3   6\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The input is: [5,1,4,null,null,3,6]. The root node\u0026#39;s value\r\n\u0026nbsp;            is 5 but its right child\u0026#39;s value is 4.\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"验证二叉搜索树","TranslatedContent":"\u003cp\u003e给定一个二叉树，判断其是否是一个有效的二叉搜索树。\u003c/p\u003e\n\n\u003cp\u003e假设一个二叉搜索树具有如下特征：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e节点的左子树只包含\u003cstrong\u003e小于\u003c/strong\u003e当前节点的数。\u003c/li\u003e\n\t\u003cli\u003e节点的右子树只包含\u003cstrong\u003e大于\u003c/strong\u003e当前节点的数。\u003c/li\u003e\n\t\u003cli\u003e所有左子树和右子树自身必须也是二叉搜索树。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n    2\n   / \\\n  1   3\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\n\u003c/strong\u003e    5\n   / \\\n  1   4\n\u0026nbsp;    / \\\n\u0026nbsp;   3   6\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003cstrong\u003e解释:\u003c/strong\u003e 输入为: [5,1,4,null,null,3,6]。\n\u0026nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006944":{"ID":"15006944","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"15.7 MB","URL":"/submissions/detail/15006944/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(node, l=None, h=None):\n            if not node:\n                return True\n            res = True\n            if l is not None and h is not None:\n                res = l \u003c node.val \u003c h\n            elif l is not None:\n                res = l \u003c node.val\n            elif h is not None:\n                res = node.val \u003c h\n            if not res:\n                return res\n            \n            return inner(node.left, l=l, h=node.val) and inner(node.right, l=node.val, h=h)\n        return inner(root)\n            \n            \n                \n            \n        \n","Timestamp":"1552927953"},"7905384":{"ID":"7905384","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/7905384/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(node, l=None, h=None):\n            if not node:\n                return True\n            res = True\n            if l is not None and h is not None:\n                res = l \u003c node.val \u003c h\n            elif l is not None:\n                res = l \u003c node.val\n            elif h is not None:\n                res = node.val \u003c h\n            if not res:\n                return res\n            \n            return inner(node.left, l=l, h=node.val) and inner(node.right, l=node.val, h=h)\n        return inner(root)\n            \n            \n                \n            \n        ","Timestamp":"1538796737"}}},{"questionId":"88","questionFrontendId":"88","Title":"Merge Sorted Array","TitleSlug":"merge-sorted-array","Content":"\u003cp\u003eGiven two sorted integer arrays \u003cem\u003enums1\u003c/em\u003e and \u003cem\u003enums2\u003c/em\u003e, merge \u003cem\u003enums2\u003c/em\u003e into \u003cem\u003enums1\u003c/em\u003e as one sorted array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe number of elements initialized in \u003cem\u003enums1\u003c/em\u003e and \u003cem\u003enums2\u003c/em\u003e are \u003cem\u003em\u003c/em\u003e and \u003cem\u003en\u003c/em\u003e respectively.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume that \u003cem\u003enums1\u003c/em\u003e has enough space (size that is greater or equal to \u003cem\u003em\u003c/em\u003e + \u003cem\u003en\u003c/em\u003e) to hold additional elements from \u003cem\u003enums2\u003c/em\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\nnums1 = [1,2,3,0,0,0], m = 3\r\nnums2 = [2,5,6],       n = 3\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\u0026nbsp;[1,2,2,3,5,6]\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"合并两个有序数组","TranslatedContent":"\u003cp\u003e给定两个有序整数数组\u0026nbsp;\u003cem\u003enums1 \u003c/em\u003e和 \u003cem\u003enums2\u003c/em\u003e，将 \u003cem\u003enums2 \u003c/em\u003e合并到\u0026nbsp;\u003cem\u003enums1\u0026nbsp;\u003c/em\u003e中\u003cem\u003e，\u003c/em\u003e使得\u0026nbsp;\u003cem\u003enum1 \u003c/em\u003e成为一个有序数组。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e初始化\u0026nbsp;\u003cem\u003enums1\u003c/em\u003e 和 \u003cem\u003enums2\u003c/em\u003e 的元素数量分别为\u0026nbsp;\u003cem\u003em\u003c/em\u003e 和 \u003cem\u003en\u003c/em\u003e。\u003c/li\u003e\n\t\u003cli\u003e你可以假设\u0026nbsp;\u003cem\u003enums1\u0026nbsp;\u003c/em\u003e有足够的空间（空间大小大于或等于\u0026nbsp;\u003cem\u003em + n\u003c/em\u003e）来保存 \u003cem\u003enums2\u003c/em\u003e 中的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n\u003cstrong\u003e输出:\u003c/strong\u003e\u0026nbsp;[1,2,2,3,5,6]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006906":{"ID":"15006906","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006906/","Code":"class Solution:\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n        \n","Timestamp":"1552927631"},"6528418":{"ID":"6528418","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/6528418/","Code":"class Solution:\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n        ","Timestamp":"1536049739"},"7890270":{"ID":"7890270","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7890270/","Code":"class Solution:\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n        ","Timestamp":"1538733665"}}},{"questionId":"167","questionFrontendId":"167","Title":"Two Sum II - Input array is sorted","TitleSlug":"two-sum-ii-input-array-is-sorted","Content":"\u003cp\u003eGiven an array of integers that is already \u003cstrong\u003e\u003cem\u003esorted in ascending order\u003c/em\u003e\u003c/strong\u003e, find two numbers such that they add up to a specific target number.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eYour returned answers (both index1 and index2) are not zero-based.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume that each input would have \u003cem\u003eexactly\u003c/em\u003e one solution and you may not use the \u003cem\u003esame\u003c/em\u003e element twice.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e numbers = [2,7,11,15], target = 9\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两数之和 II - 输入有序数组","TranslatedContent":"\u003cp\u003e给定一个已按照\u003cstrong\u003e\u003cem\u003e升序排列\u003c/em\u003e\u0026nbsp;\u003c/strong\u003e的有序数组，找到两个数使得它们相加之和等于目标数。\u003c/p\u003e\n\n\u003cp\u003e函数应该返回这两个下标值\u003cem\u003e \u003c/em\u003eindex1 和 index2，其中 index1\u0026nbsp;必须小于\u0026nbsp;index2\u003cem\u003e。\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e返回的下标值（index1 和 index2）不是从零开始的。\u003c/li\u003e\n\t\u003cli\u003e你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e numbers = [2, 7, 11, 15], target = 9\n\u003cstrong\u003e输出:\u003c/strong\u003e [1,2]\n\u003cstrong\u003e解释:\u003c/strong\u003e 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11343841":{"ID":"11343841","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.9 MB","URL":"/submissions/detail/11343841/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(numbers):\n            if target - x in data:\n                return [data[target-x]+1, i+1]\n            data[x] = i","Timestamp":"1546853929"},"11343851":{"ID":"11343851","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.8 MB","URL":"/submissions/detail/11343851/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(numbers):\n            if target - x in data:\n                return [data[target-x]+1, i+1]\n            data[x] = i","Timestamp":"1546853947"},"11343966":{"ID":"11343966","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.8 MB","URL":"/submissions/detail/11343966/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(numbers):\n            if x in data:\n                return [data[x]+1, i+1]\n            data[target-x] = i","Timestamp":"1546854090"},"11343970":{"ID":"11343970","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.8 MB","URL":"/submissions/detail/11343970/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(numbers):\n            if x in data:\n                return [data[x]+1, i+1]\n            data[target-x] = i","Timestamp":"1546854095"},"11344075":{"ID":"11344075","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.9 MB","URL":"/submissions/detail/11344075/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        i1 = 0\n        i2 = len(numbers) - 1\n        while i1 \u003c i2:\n            if numbers[i1] + numbers[i2] \u003e target:\n                i2 -= 1\n            elif numbers[i1] + numbers[i2] \u003c target:\n                i1 += 1\n            else:\n                return [i1+1, i2+1]","Timestamp":"1546854197"},"15006679":{"ID":"15006679","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006679/","Code":"class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        i1 = 0\n        i2 = len(numbers) - 1\n        while i1 \u003c i2:\n            if numbers[i1] + numbers[i2] \u003e target:\n                i2 -= 1\n            elif numbers[i1] + numbers[i2] \u003c target:\n                i1 += 1\n            else:\n                return [i1+1, i2+1]\n","Timestamp":"1552925304"},"1729315":{"ID":"1729315","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1729315/","Code":"class Solution(object):\r\n    def twoSum(self, numbers, target):\r\n        \"\"\"\r\n        :type numbers: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        cache = {}\r\n        for i, val in enumerate(numbers):\r\n            if val in cache:\r\n                return sorted([cache[val], i+1])\r\n            else:\r\n                cache[target-val] = i+1\r\n        ","Timestamp":"1472087642"},"7572751":{"ID":"7572751","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7572751/","Code":"class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        cache = {}\n        for i, val in enumerate(numbers):\n            if val in cache:\n                return sorted([cache[val], i+1])\n            else:\n                cache[target-val] = i+1\n        \n","Timestamp":"1536218573"}}},{"questionId":"775","questionFrontendId":"589","Title":"N-ary Tree Preorder Traversal","TitleSlug":"n-ary-tree-preorder-traversal","Content":"\u003cp\u003eGiven an n-ary tree, return the \u003ci\u003epreorder\u003c/i\u003e traversal of its nodes\u0026#39; values.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given a \u003ccode\u003e3-ary\u003c/code\u003e tree:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn its preorder traversal as: \u003ccode\u003e[1,3,5,6,2,4]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eRecursive solution is trivial, could you do it iteratively?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"N叉树的前序遍历","TranslatedContent":"\u003cp\u003e给定一个 N 叉树，返回其节点值的\u003cem\u003e前序遍历\u003c/em\u003e。\u003c/p\u003e\r\n\r\n\u003cp\u003e例如，给定一个\u0026nbsp;\u003ccode\u003e3叉树\u003c/code\u003e\u0026nbsp;:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e返回其前序遍历: \u003ccode\u003e[1,3,5,6,2,4]\u003c/code\u003e。\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e说明:\u0026nbsp;\u003c/strong\u003e递归法很简单，你可以使用迭代法完成此题吗?\u003c/p\u003e","Status":"ac","Tags":[],"Submits":{"15006817":{"ID":"15006817","StatusDisplay":"Accepted","Lang":"python","Runtime":"112 ms","Memory":"18.3 MB","URL":"/submissions/detail/15006817/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        res.append(root.val)\n        if root.children:\n            for c in root.children:\n                res += self.preorder(c)      \n        return res\n","Timestamp":"1552926884"},"7971732":{"ID":"7971732","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7971732/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        res+=[root.val]\n        if root.children:\n            for c in root.children:\n                res += self.preorder(c)      \n        return res","Timestamp":"1538971386"},"7971734":{"ID":"7971734","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7971734/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        res+=[root.val]\n        if root.children:\n            for c in root.children:\n                res += self.preorder(c)      \n        return res","Timestamp":"1538971393"},"7971738":{"ID":"7971738","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7971738/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        res+=[root.val]\n        if root.children:\n            for c in root.children:\n                res += self.preorder(c)      \n        return res","Timestamp":"1538971403"},"7971744":{"ID":"7971744","StatusDisplay":"Accepted","Lang":"python","Runtime":"144 ms","Memory":"N/A","URL":"/submissions/detail/7971744/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        res.append(root.val)\n        if root.children:\n            for c in root.children:\n                res += self.preorder(c)      \n        return res","Timestamp":"1538971420"}}},{"questionId":"455","questionFrontendId":"455","Title":"Assign Cookies","TitleSlug":"assign-cookies","Content":"\u003cp\u003e\r\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g\u003csub\u003ei\u003c/sub\u003e, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s\u003csub\u003ej\u003c/sub\u003e. If s\u003csub\u003ej\u003c/sub\u003e \u003e= g\u003csub\u003ei\u003c/sub\u003e, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nYou may assume the greed factor is always positive. \u003cbr /\u003e\r\nYou cannot assign more than one cookie to one child.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,2,3], [1,1]\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e 1\r\n\r\n\u003cb\u003eExplanation:\u003c/b\u003e You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \r\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\r\nYou need to output 1.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,2], [1,2,3]\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\r\n\u003cb\u003eExplanation:\u003c/b\u003e You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \r\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \r\nYou need to output 2.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"分发饼干","TranslatedContent":"\u003cp\u003e假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值\u0026nbsp;g\u003csub\u003ei ，\u003c/sub\u003e这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 s\u003csub\u003ej\u0026nbsp;\u003c/sub\u003e。如果 s\u003csub\u003ej\u003c/sub\u003e \u0026gt;= g\u003csub\u003ei\u0026nbsp;\u003c/sub\u003e，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你可以假设胃口值为正。\u003cbr /\u003e\n一个小朋友最多只能拥有一块饼干。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3], [1,1]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\n\u003cstrong\u003e解释:\u003c/strong\u003e \n你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n所以你应该输出1。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,2], [1,2,3]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\n\u003cstrong\u003e解释:\u003c/strong\u003e \n你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n你拥有的饼干数量和尺寸都足以让所有孩子满足。\n所以你应该输出2.\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006777":{"ID":"15006777","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"11.8 MB","URL":"/submissions/detail/15006777/","Code":"class Solution:\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        s.sort()\n        g.sort()\n        for x in g:\n            while s:\n                t = s.pop(0)\n                if x \u003c= t:\n                    count += 1\n                    break\n        return count\n\n\n","Timestamp":"1552926081"},"1729335":{"ID":"1729335","StatusDisplay":"Accepted","Lang":"python3","Runtime":"112 ms","Memory":"N/A","URL":"/submissions/detail/1729335/","Code":"class Solution:\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        s.sort()\n        g.sort()\n        for x in g:\n            while s:\n                t = s.pop(0)\n                if x \u003c= t:\n                    count += 1\n                    break\n        return count\n","Timestamp":"1524149445"},"7572906":{"ID":"7572906","StatusDisplay":"Accepted","Lang":"python3","Runtime":"140 ms","Memory":"N/A","URL":"/submissions/detail/7572906/","Code":"class Solution:\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        count = 0\n        s.sort()\n        g.sort()\n        for x in g:\n            while s:\n                t = s.pop(0)\n                if x \u003c= t:\n                    count += 1\n                    break\n        return count\n\n","Timestamp":"1536218885"}}},{"questionId":"861","questionFrontendId":"832","Title":"Flipping an Image","TitleSlug":"flipping-an-image","Content":"\u003cp\u003eGiven a binary matrix \u003ccode\u003eA\u003c/code\u003e, we want to flip the image horizontally, then invert it, and return the resulting image.\u003c/p\u003e\r\n\r\n\u003cp\u003eTo flip an image horizontally means that each row of the image is reversed.\u0026nbsp; For example, flipping\u0026nbsp;\u003ccode\u003e[1, 1, 0]\u003c/code\u003e\u0026nbsp;horizontally results in\u0026nbsp;\u003ccode\u003e[0, 1, 1]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eTo invert an image means\u0026nbsp;that each \u003ccode\u003e0\u003c/code\u003e is replaced by \u003ccode\u003e1\u003c/code\u003e, and each \u003ccode\u003e1\u003c/code\u003e is replaced by \u003ccode\u003e0\u003c/code\u003e.\u0026nbsp;For example, inverting\u0026nbsp;\u003ccode\u003e[0, 1, 1]\u003c/code\u003e\u0026nbsp;results in\u0026nbsp;\u003ccode\u003e[1, 0, 0]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[[1,1,0],[1,0,1],[0,0,0]]\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e[[1,0,0],[0,1,0],[1,1,1]]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\r\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\r\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length = A[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i][j]\u003cfont face=\"sans-serif, Arial, Verdana, Trebuchet MS\"\u003e\u0026nbsp;\u0026lt;=\u0026nbsp;\u003c/font\u003e1\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"翻转图像","TranslatedContent":"\u003cp\u003e给定一个二进制矩阵\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e，我们想先水平翻转图像，然后反转图像并返回结果。\u003c/p\u003e\n\n\u003cp\u003e水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转\u0026nbsp;\u003ccode\u003e[1, 1, 0]\u003c/code\u003e\u0026nbsp;的结果是\u0026nbsp;\u003ccode\u003e[0, 1, 1]\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e反转图片的意思是图片中的\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;全部被\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;替换，\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;全部被\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;替换。例如，反转\u0026nbsp;\u003ccode\u003e[0, 1, 1]\u003c/code\u003e\u0026nbsp;的结果是\u0026nbsp;\u003ccode\u003e[1, 0, 0]\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入: \u003c/strong\u003e[[1,1,0],[1,0,1],[0,0,0]]\n\u003cstrong\u003e输出: \u003c/strong\u003e[[1,0,0],[0,1,0],[1,1,1]]\n\u003cstrong\u003e解释:\u003c/strong\u003e 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；\n     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入: \u003c/strong\u003e[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n\u003cstrong\u003e输出: \u003c/strong\u003e[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\u003cstrong\u003e解释:\u003c/strong\u003e 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；\n     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length = A[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i][j]\u0026nbsp;\u0026lt;=\u0026nbsp;1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006888":{"ID":"15006888","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006888/","Code":"class Solution:\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[0 if i==1 else 1 for i in line[::-1]] for line in A]\n        \n","Timestamp":"1552927507"},"7573075":{"ID":"7573075","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7573075/","Code":"class Solution:\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[0 if i==1 else 1 for i in line[::-1]] for line in A]\n        ","Timestamp":"1537264597"}}},{"questionId":"1094","questionFrontendId":"1030","Title":"Matrix Cells in Distance Order","TitleSlug":"matrix-cells-in-distance-order","Content":"\u003cp\u003eWe are given a matrix with \u003ccode\u003eR\u003c/code\u003e rows and \u003ccode\u003eC\u003c/code\u003e columns has cells with integer coordinates\u0026nbsp;\u003ccode\u003e(r, c)\u003c/code\u003e, where \u003ccode\u003e0 \u0026lt;= r \u0026lt; R\u003c/code\u003e and \u003ccode\u003e0 \u0026lt;= c \u0026lt; C\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eAdditionally, we are given a cell in that matrix with coordinates\u0026nbsp;\u003ccode\u003e(r0, c0)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the coordinates of\u0026nbsp;all cells in the matrix, sorted by their distance from \u003ccode\u003e(r0, c0)\u003c/code\u003e\u0026nbsp;from smallest distance to largest distance.\u0026nbsp; Here,\u0026nbsp;the distance between two cells \u003ccode\u003e(r1, c1)\u003c/code\u003e and \u003ccode\u003e(r2, c2)\u003c/code\u003e is the Manhattan distance,\u0026nbsp;\u003ccode\u003e|r1 - r2| + |c1 - c2|\u003c/code\u003e.\u0026nbsp; (You may return the answer in any order that satisfies this condition.)\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eR = \u003cspan id=\"example-input-1-1\"\u003e1\u003c/span\u003e, C = \u003cspan id=\"example-input-1-2\"\u003e2\u003c/span\u003e, r0 = \u003cspan id=\"example-input-1-3\"\u003e0\u003c/span\u003e, c0 = \u003cspan id=\"example-input-1-4\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[[0,0],[0,1]]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The distances from (r0, c0) to other cells are: [0,1]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eR = \u003cspan id=\"example-input-2-1\"\u003e2\u003c/span\u003e, C = \u003cspan id=\"example-input-2-2\"\u003e2\u003c/span\u003e, r0 = \u003cspan id=\"example-input-2-3\"\u003e0\u003c/span\u003e, c0 = \u003cspan id=\"example-input-2-4\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[[0,1],[0,0],[1,1],[1,0]]\r\n\u003c/span\u003e\u003cspan id=\"example-output-1\"\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The distances from (r0, c0) to other cells are:\u003c/span\u003e\u003cspan\u003e [0,1,1,2]\u003c/span\u003e\r\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eR = \u003cspan id=\"example-input-3-1\"\u003e2\u003c/span\u003e, C = \u003cspan id=\"example-input-3-2\"\u003e3\u003c/span\u003e, r0 = \u003cspan id=\"example-input-3-3\"\u003e1\u003c/span\u003e, c0 = \u003cspan id=\"example-input-3-4\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\u003c/span\u003e\r\n\u003cspan id=\"example-output-1\"\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The distances from (r0, c0) to other cells are:\u003c/span\u003e\u003cspan\u003e [0,1,1,2,2,3]\u003c/span\u003e\r\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan\u003eNote:\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= R \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= C \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= r0 \u0026lt; R\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= c0 \u0026lt; C\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"距离顺序排列矩阵单元格","TranslatedContent":"\u003cp\u003e给出 \u003ccode\u003eR\u003c/code\u003e 行 \u003ccode\u003eC\u003c/code\u003e 列的矩阵，其中的单元格的整数坐标为 \u003ccode\u003e(r, c)\u003c/code\u003e，满足 \u003ccode\u003e0 \u0026lt;= r \u0026lt; R\u003c/code\u003e 且 \u003ccode\u003e0 \u0026lt;= c \u0026lt; C\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，我们在该矩阵中给出了一个坐标为\u0026nbsp;\u003ccode\u003e(r0, c0)\u003c/code\u003e 的单元格。\u003c/p\u003e\n\n\u003cp\u003e返回矩阵中的所有单元格的坐标，并按到 \u003ccode\u003e(r0, c0)\u003c/code\u003e 的距离从最小到最大的顺序排，其中，两单元格\u003ccode\u003e(r1, c1)\u003c/code\u003e 和 \u003ccode\u003e(r2, c2)\u003c/code\u003e 之间的距离是曼哈顿距离，\u003ccode\u003e|r1 - r2| + |c1 - c2|\u003c/code\u003e。（你可以按任何满足此条件的顺序返回答案。）\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eR = 1, C = 2, r0 = 0, c0 = 0\n\u003cstrong\u003e输出：\u003c/strong\u003e[[0,0],[0,1]]\n\u003cstrong\u003e解释\u003c/strong\u003e：从 (r0, c0) 到其他单元格的距离为：[0,1]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eR = 2, C = 2, r0 = 0, c0 = 1\n\u003cstrong\u003e输出：\u003c/strong\u003e[[0,1],[0,0],[1,1],[1,0]]\n\u003cstrong\u003e解释\u003c/strong\u003e：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]\n[[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eR = 2, C = 3, r0 = 1, c0 = 2\n\u003cstrong\u003e输出：\u003c/strong\u003e[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n\u003cstrong\u003e解释\u003c/strong\u003e：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]\n其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= R \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= C \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= r0 \u0026lt; R\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= c0 \u0026lt; C\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"17400795":{"ID":"17400795","StatusDisplay":"Accepted","Lang":"python3","Runtime":"296 ms","Memory":"15.3 MB","URL":"/submissions/detail/17400795/","Code":"class Solution:\n    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -\u003e List[List[int]]:\n        res = [[x, y] for x in range(R) for y in range(C)]\n        res.sort(key=lambda x: abs(x[0]-r0)+abs(x[1]-c0))\n        return res\n            \n                ","Timestamp":"1555815258"}}},{"questionId":"824","questionFrontendId":"806","Title":"Number of Lines To Write String","TitleSlug":"number-of-lines-to-write-string","Content":"\u003cp\u003eWe are to write the letters of a given string \u003ccode\u003eS\u003c/code\u003e, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array\u0026nbsp;\u003ccode\u003ewidths\u003c/code\u003e, an array where widths[0] is the width of \u0026#39;a\u0026#39;, widths[1] is the width of \u0026#39;b\u0026#39;, ..., and widths[25] is the width of \u0026#39;z\u0026#39;.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow answer two questions: how many lines have at least one character from \u003ccode\u003eS\u003c/code\u003e, and what is the width used by the last such line? Return your answer as an integer list of length 2.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample :\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \u0026quot;abcdefghijklmnopqrstuvwxyz\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3, 60]\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nAll letters have the same length of 10. To write all 26 letters,\r\nwe need two full lines and one line with 60 units.\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample :\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \u0026quot;bbbcccdddaaa\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [2, 4]\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nAll letters except \u0026#39;a\u0026#39; have the same length of 10, and \r\n\u0026quot;bbbcccdddaa\u0026quot; will cover 9 * 10 + 2 * 4 = 98 units.\r\nFor the last \u0026#39;a\u0026#39;, it is written on the second line because\r\nthere is only 2 units left in the first line.\r\nSo the answer is 2 lines, plus 4 units in the second line.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe length of \u003ccode\u003eS\u003c/code\u003e will be in the range\u0026nbsp;[1, 1000].\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e will only contain lowercase letters.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003ewidths\u003c/code\u003e is\u0026nbsp;an array of length \u003ccode\u003e26\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003ewidths[i]\u003c/code\u003e will be in the range of \u003ccode\u003e[2, 10]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"写字符串需要的行数","TranslatedContent":"\u003cp\u003e我们要把给定的字符串 \u003ccode\u003eS\u003c/code\u003e\u0026nbsp;从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组\u0026nbsp;\u003ccode\u003ewidths\u003c/code\u003e\u0026nbsp;，这个数组\u0026nbsp;widths[0] 代表 \u0026#39;a\u0026#39; 需要的单位，\u0026nbsp;widths[1] 代表 \u0026#39;b\u0026#39; 需要的单位，...，\u0026nbsp;widths[25] 代表 \u0026#39;z\u0026#39; 需要的单位。\u003c/p\u003e\n\n\u003cp\u003e现在回答两个问题：至少多少行能放下\u003ccode\u003eS\u003c/code\u003e，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例 1:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \u0026quot;abcdefghijklmnopqrstuvwxyz\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e [3, 60]\n\u003cstrong\u003e解释: \n\u003c/strong\u003e所有的字符拥有相同的占用单位10。所以书写所有的26个字母，\n我们需要2个整行和占用60个单位的一行。\n\u003c/pre\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例 2:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = \u0026quot;bbbcccdddaaa\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e [2, 4]\n\u003cstrong\u003e解释: \n\u003c/strong\u003e除去字母\u0026#39;a\u0026#39;所有的字符都是相同的单位10，并且字符串 \u0026quot;bbbcccdddaa\u0026quot; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.\n最后一个字母 \u0026#39;a\u0026#39; 将会被写到第二行，因为第一行只剩下2个单位了。\n所以，这个答案是2行，第二行有4个单位宽度。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e 的长度在\u0026nbsp;[1, 1000] 的范围。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e 只包含小写字母。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewidths\u003c/code\u003e 是长度为\u0026nbsp;\u003ccode\u003e26\u003c/code\u003e的数组。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewidths[i]\u003c/code\u003e\u0026nbsp;值的范围在\u0026nbsp;\u003ccode\u003e[2, 10]\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006877":{"ID":"15006877","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006877/","Code":"class Solution(object):\n    def numberOfLines(self, widths, S):\n        \"\"\"\n        :type widths: List[int]\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        line_space = 0\n        line = 0\n        for i in range(len(S)):\n            width = widths[ord(S[i]) - ord('a')]\n            if line_space + width \u003c= 100:\n                line_space += width\n            else:\n                line += 1\n                line_space = width\n        return [line+1, line_space]\n        \n        \n","Timestamp":"1552927417"},"7982611":{"ID":"7982611","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"N/A","URL":"/submissions/detail/7982611/","Code":"class Solution(object):\n    def numberOfLines(self, widths, S):\n        \"\"\"\n        :type widths: List[int]\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        line_space = 0\n        line = 0\n        for i in range(len(S)):\n            width = widths[ord(S[i]) - ord('a')]\n            if line_space + width \u003c= 100:\n                line_space += width\n            else:\n                line += 1\n                line_space = width\n        return [line+1, line_space]\n        \n        ","Timestamp":"1538985203"}}},{"questionId":"777","questionFrontendId":"766","Title":"Toeplitz Matrix","TitleSlug":"toeplitz-matrix","Content":"\u003cp\u003eA matrix is \u003cem\u003eToeplitz\u003c/em\u003e if every diagonal from top-left to bottom-right has the same element.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow given an \u003ccode\u003eM x N\u003c/code\u003e matrix, return\u0026nbsp;\u003ccode\u003eTrue\u003c/code\u003e\u0026nbsp;if and only if the matrix is \u003cem\u003eToeplitz\u003c/em\u003e.\u003cbr /\u003e\r\n\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\r\n\u003c/strong\u003ematrix = [\r\n\u0026nbsp; [1,2,3,4],\r\n\u0026nbsp; [5,1,2,3],\r\n\u0026nbsp; [9,5,1,2]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e True\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nIn the above grid, the\u0026nbsp;diagonals are:\r\n\u0026quot;[9]\u0026quot;, \u0026quot;[5, 5]\u0026quot;, \u0026quot;[1, 1, 1]\u0026quot;, \u0026quot;[2, 2, 2]\u0026quot;, \u0026quot;[3, 3]\u0026quot;, \u0026quot;[4]\u0026quot;.\r\nIn each diagonal all elements are the same, so the answer is True.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\r\n\u003c/strong\u003ematrix = [\r\n\u0026nbsp; [1,2],\r\n\u0026nbsp; [2,2]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e False\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nThe diagonal \u0026quot;[1, 2]\u0026quot; has different elements.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cbr /\u003e\r\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003ematrix\u003c/code\u003e will be a 2D array of integers.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003ematrix\u003c/code\u003e will have a number of rows and columns in range \u003ccode\u003e[1, 20]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003ematrix[i][j]\u003c/code\u003e will be integers in range \u003ccode\u003e[0, 99]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003e\u003cbr /\u003e\r\n\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eWhat if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\u003c/li\u003e\r\n\t\u003cli\u003eWhat if the matrix is so large that you can only load up a partial row into the memory at once?\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"托普利茨矩阵","TranslatedContent":"\u003cp\u003e如果一个矩阵的每一方向由左上到右下的对角线上具有相同元素，那么这个矩阵是\u003cem\u003e托普利茨矩阵\u003c/em\u003e。\u003c/p\u003e\n\n\u003cp\u003e给定一个\u0026nbsp;\u003ccode\u003eM x N\u003c/code\u003e\u0026nbsp;的矩阵，当且仅当它是\u003cem\u003e托普利茨矩阵\u003c/em\u003e时返回\u0026nbsp;\u003ccode\u003eTrue\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \nmatrix = [\n\u0026nbsp; [1,2,3,4],\n\u0026nbsp; [5,1,2,3],\n\u0026nbsp; [9,5,1,2]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e True\n\u003cstrong\u003e解释:\u003c/strong\u003e\n在上述矩阵中, 其对角线为:\n\u0026quot;[9]\u0026quot;, \u0026quot;[5, 5]\u0026quot;, \u0026quot;[1, 1, 1]\u0026quot;, \u0026quot;[2, 2, 2]\u0026quot;, \u0026quot;[3, 3]\u0026quot;, \u0026quot;[4]\u0026quot;。\n各条对角线上的所有元素均相同, 因此答案是True。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\nmatrix = [\n\u0026nbsp; [1,2],\n\u0026nbsp; [2,2]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e False\n\u003cstrong\u003e解释: \n\u003c/strong\u003e对角线\u0026quot;[1, 2]\u0026quot;上的元素不同。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003ematrix\u003c/code\u003e\u0026nbsp;是一个包含整数的二维数组。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ematrix\u003c/code\u003e\u0026nbsp;的行数和列数均在\u0026nbsp;\u003ccode\u003e[1, 20]\u003c/code\u003e范围内。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ematrix[i][j]\u003c/code\u003e\u0026nbsp;包含的整数在\u0026nbsp;\u003ccode\u003e[0, 99]\u003c/code\u003e范围内。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e如果矩阵存储在磁盘上，并且磁盘内存是有限的，因此一次最多只能将一行矩阵加载到内存中，该怎么办？\u003c/li\u003e\n\t\u003cli\u003e如果矩阵太大以至于只能一次将部分行加载到内存中，该怎么办？\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006863":{"ID":"15006863","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006863/","Code":"class Solution(object):\n    def isToeplitzMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not matrix:\n            return True\n        L = matrix[0]\n        for line in matrix[1:]:\n            for x in range(len(line)-1):\n                if line[x+1] != L[x]:\n                    return False\n            L = line\n        return True\n","Timestamp":"1552927282"},"7985317":{"ID":"7985317","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7985317/","Code":"class Solution(object):\n    def isToeplitzMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if not matrix:\n            return True\n        L = matrix[0]\n        for line in matrix[1:]:\n            for x in range(len(line)-1):\n                if line[x+1] != L[x]:\n                    return False\n            L = line\n        return True","Timestamp":"1538987604"}}},{"questionId":"637","questionFrontendId":"637","Title":"Average of Levels in Binary Tree","TitleSlug":"average-of-levels-in-binary-tree","Content":"Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\u003cb\u003eOutput:\u003c/b\u003e [3, 14.5, 11]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe range of node's value is in the range of 32-bit signed integer.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"二叉树的层平均值","TranslatedContent":"\u003cp\u003e给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u003cstrong\u003e输出:\u003c/strong\u003e [3, 14.5, 11]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e节点值的范围在32位有符号整数范围内。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006827":{"ID":"15006827","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"16.2 MB","URL":"/submissions/detail/15006827/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    treelist = []\n    ans = []\n    count = []\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        info = []\n        def dfs(node,depth = 0):\n            if node:\n                if len(info) \u003c= depth:\n                    info.append([0,0])\n                info[depth][0] += node.val\n                info[depth][1] += 1\n                dfs(node.left, depth + 1)\n                dfs(node.right, depth + 1)\n        dfs(root)\n        \n        return [s/float(c) for s,c in info]\n        \n\n","Timestamp":"1552926966"},"1729235":{"ID":"1729235","StatusDisplay":"Accepted","Lang":"python","Runtime":"112 ms","Memory":"N/A","URL":"/submissions/detail/1729235/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    treelist = []\n    ans = []\n    count = []\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        info = []\n        def dfs(node,depth = 0):\n            if node:\n                if len(info) \u003c= depth:\n                    info.append([0,0])\n                info[depth][0] += node.val\n                info[depth][1] += 1\n                dfs(node.left, depth + 1)\n                dfs(node.right, depth + 1)\n        dfs(root)\n        \n        return [s/float(c) for s,c in info]\n        ","Timestamp":"1501331045"},"7572959":{"ID":"7572959","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7572959/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    treelist = []\n    ans = []\n    count = []\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        info = []\n        def dfs(node,depth = 0):\n            if node:\n                if len(info) \u003c= depth:\n                    info.append([0,0])\n                info[depth][0] += node.val\n                info[depth][1] += 1\n                dfs(node.left, depth + 1)\n                dfs(node.right, depth + 1)\n        dfs(root)\n        \n        return [s/float(c) for s,c in info]\n        \n","Timestamp":"1536219007"}}},{"questionId":"22","questionFrontendId":"22","Title":"Generate Parentheses","TitleSlug":"generate-parentheses","Content":"\u003cp\u003e\r\nGiven \u003ci\u003en\u003c/i\u003e pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor example, given \u003ci\u003en\u003c/i\u003e = 3, a solution set is:\r\n\u003c/p\u003e\r\n\u003cpre\u003e\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n\u003c/pre\u003e","Difficulty":"Medium","TranslatedTitle":"括号生成","TranslatedContent":"\u003cp\u003e给出\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且\u003cstrong\u003e有效的\u003c/strong\u003e括号组合。\u003c/p\u003e\n\n\u003cp\u003e例如，给出\u0026nbsp;\u003cem\u003en \u003c/em\u003e=\u003cem\u003e \u003c/em\u003e3，生成结果为：\u003c/p\u003e\n\n\u003cpre\u003e[\n  \u0026quot;((()))\u0026quot;,\n  \u0026quot;(()())\u0026quot;,\n  \u0026quot;(())()\u0026quot;,\n  \u0026quot;()(())\u0026quot;,\n  \u0026quot;()()()\u0026quot;\n]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006704":{"ID":"15006704","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006704/","Code":"class Solution(object):\n    def generateParenthesis(self, N):\n        if N == 0: return ['']\n        ans = []\n        for c in range(N):\n            for left in self.generateParenthesis(c):\n                for right in self.generateParenthesis(N-1-c):\n                    ans.append('({}){}'.format(left, right))\n        return ans\n            \n        \n","Timestamp":"1552925502"},"7916136":{"ID":"7916136","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7916136/","Code":"class Solution(object):\n    def generateParenthesis(self, N):\n        if N == 0: return ['']\n        ans = []\n        for c in range(N):\n            for left in self.generateParenthesis(c):\n                for right in self.generateParenthesis(N-1-c):\n                    ans.append('({}){}'.format(left, right))\n        return ans\n            \n        ","Timestamp":"1538817031"}}},{"questionId":"841","questionFrontendId":"821","Title":"Shortest Distance to a Character","TitleSlug":"shortest-distance-to-a-character","Content":"\u003cp\u003eGiven a string \u003ccode\u003eS\u003c/code\u003e\u0026nbsp;and a character \u003ccode\u003eC\u003c/code\u003e, return an array of integers representing the shortest distance from the character \u003ccode\u003eC\u003c/code\u003e in the string.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e S = \u0026quot;loveleetcode\u0026quot;, C = \u0026#39;e\u0026#39;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e string length is\u0026nbsp;in\u0026nbsp;\u003ccode\u003e[1, 10000].\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;is a single character, and guaranteed to be in string \u003ccode\u003eS\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eAll letters in \u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003eC\u003c/code\u003e are lowercase.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"字符的最短距离","TranslatedContent":"\u003cp\u003e给定一个字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;和一个字符\u0026nbsp;\u003ccode\u003eC\u003c/code\u003e。返回一个代表字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;中每个字符到字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;中的字符\u0026nbsp;\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;的最短距离的数组。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e S = \u0026quot;loveleetcode\u0026quot;, C = \u0026#39;e\u0026#39;\n\u003cstrong\u003e输出:\u003c/strong\u003e [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;的长度范围为\u0026nbsp;\u003ccode\u003e[1, 10000]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;是一个单字符，且保证是字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;里的字符。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;中的所有字母均为小写字母。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006884":{"ID":"15006884","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006884/","Code":"class Solution:\n    def shortestToChar(self, S, C):\n        \"\"\"\n        :type S: str\n        :type C: str\n        :rtype: List[int]\n        \"\"\"\n        res = [10000 for _ in range(len(S))]\n        has_C = False\n        last_C = 0\n        for x in range(len(S)):\n            if S[x] == C:\n                has_C = True\n                last_C = x\n            if has_C:\n                res[x] = x - last_C\n        has_C = False\n        last_C = 0\n        for x in range(len(S)-1,0-1,-1):\n            if S[x] == C:\n                has_C = True\n                last_C = x\n            if has_C and last_C - x \u003c res[x]:\n                res[x] = last_C - x\n        \n        return res\n","Timestamp":"1552927484"},"7973405":{"ID":"7973405","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/7973405/","Code":"class Solution:\n    def shortestToChar(self, S, C):\n        \"\"\"\n        :type S: str\n        :type C: str\n        :rtype: List[int]\n        \"\"\"\n        res = [10000 for _ in range(len(S))]\n        has_C = False\n        last_C = 0\n        for x in range(len(S)):\n            if S[x] == C:\n                has_C = True\n                last_C = x\n            if has_C:\n                res[x] = x - last_C\n        has_C = False\n        last_C = 0\n        for x in range(len(S)-1,0-1,-1):\n            if S[x] == C:\n                has_C = True\n                last_C = x\n            if has_C and last_C - x \u003c res[x]:\n                res[x] = last_C - x\n        \n        return res","Timestamp":"1538974575"}}},{"questionId":"119","questionFrontendId":"119","Title":"Pascal's Triangle II","TitleSlug":"pascals-triangle-ii","Content":"\u003cp\u003eGiven a non-negative\u0026nbsp;index \u003cem\u003ek\u003c/em\u003e\u0026nbsp;where \u003cem\u003ek\u003c/em\u003e \u0026le;\u0026nbsp;33, return the \u003cem\u003ek\u003c/em\u003e\u003csup\u003eth\u003c/sup\u003e\u0026nbsp;index row of the Pascal\u0026#39;s triangle.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that the row index starts from\u0026nbsp;0.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003eIn Pascal\u0026#39;s triangle, each number is the sum of the two numbers directly above it.\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,3,3,1]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eCould you optimize your algorithm to use only \u003cem\u003eO\u003c/em\u003e(\u003cem\u003ek\u003c/em\u003e) extra space?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"杨辉三角 II","TranslatedContent":"\u003cp\u003e给定一个非负索引\u0026nbsp;\u003cem\u003ek\u003c/em\u003e，其中 \u003cem\u003ek\u003c/em\u003e\u0026nbsp;\u0026le;\u0026nbsp;33，返回杨辉三角的第 \u003cem\u003ek \u003c/em\u003e行。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e在杨辉三角中，每个数是它左上方和右上方的数的和。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 3\n\u003cstrong\u003e输出:\u003c/strong\u003e [1,3,3,1]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你可以优化你的算法到 \u003cem\u003eO\u003c/em\u003e(\u003cem\u003ek\u003c/em\u003e) 空间复杂度吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006654":{"ID":"15006654","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006654/","Code":"class Solution:\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        res = [0 for x in range(rowIndex+1)]\n        res[0],res[1] = 1, 1\n        for x in range(1, rowIndex):\n            for k in range(x,0-1,-1):\n                res[k+1] = res[k] + res[k+1]\n            res[x+1] = 1\n        return res\n            \n            \n        \n","Timestamp":"1552925085"},"7990020":{"ID":"7990020","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7990020/","Code":"class Solution:\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        res = [0 for x in range(rowIndex+1)]\n        res[0],res[1] = 1, 1\n        for x in range(1, rowIndex):\n            for k in range(x,0-1,-1):\n                res[k+1] = res[k] + res[k+1]\n            res[x+1] = 1\n        return res\n            \n            \n        ","Timestamp":"1538991337"}}},{"questionId":"89","questionFrontendId":"89","Title":"Gray Code","TitleSlug":"gray-code","Content":"\u003cp\u003eThe gray code is a binary numeral system where two successive values differ in only one bit.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a non-negative integer \u003cem\u003en\u003c/em\u003e representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[0,1,3,2]\u003c/code\u003e\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\n00 - 0\r\n01 - 1\r\n11 - 3\r\n10 - 2\r\n\r\nFor a given\u0026nbsp;\u003cem\u003en\u003c/em\u003e, a gray code sequence may not be uniquely defined.\r\nFor example, [0,2,3,1] is also a valid gray code sequence.\r\n\r\n00 - 0\r\n10 - 2\r\n11 - 3\r\n01 - 1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;0\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[0]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e We define the gray code sequence to begin with 0.\r\n\u0026nbsp;            A gray code sequence of \u003cem\u003en\u003c/em\u003e has size = 2\u003csup\u003en\u003c/sup\u003e, which for \u003cem\u003en\u003c/em\u003e = 0 the size is 2\u003csup\u003e0\u003c/sup\u003e = 1.\r\n\u0026nbsp;            Therefore, for \u003cem\u003en\u003c/em\u003e = 0 the gray code sequence is [0].\u003c/code\u003e\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"格雷编码","TranslatedContent":"\u003cp\u003e格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。\u003c/p\u003e\n\n\u003cp\u003e给定一个代表编码总位数的非负整数\u003cem\u003e n\u003c/em\u003e，打印其格雷编码序列。格雷编码序列必须以 0 开头。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;2\n\u003cstrong\u003e输出:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[0,1,3,2]\u003c/code\u003e\n\u003cstrong\u003e解释:\u003c/strong\u003e\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n对于给定的\u0026nbsp;\u003cem\u003en\u003c/em\u003e，其格雷编码序列并不唯一。\n例如，\u003ccode\u003e[0,2,3,1]\u003c/code\u003e\u0026nbsp;也是一个有效的格雷编码序列。\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;0\n\u003cstrong\u003e输出:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[0]\n\u003cstrong\u003e解释:\u003c/strong\u003e 我们定义\u003c/code\u003e格雷编码序列必须以 0 开头。\u003ccode\u003e\n\u0026nbsp;    给定\u003c/code\u003e编码总位数为\u003ccode\u003e \u003cem\u003en\u003c/em\u003e 的格雷编码序列，其长度为 2\u003csup\u003en\u003c/sup\u003e\u003c/code\u003e。\u003ccode\u003e当 \u003cem\u003en\u003c/em\u003e = 0 时，长度为 2\u003csup\u003e0\u003c/sup\u003e = 1。\n\u0026nbsp;    因此，当 \u003cem\u003en\u003c/em\u003e = 0 时，其格雷编码序列为 [0]。\u003c/code\u003e\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006951":{"ID":"15006951","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11 MB","URL":"/submissions/detail/15006951/","Code":"class Solution:\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [i ^ (i \u003e\u003e 1) for i in range(1 \u003c\u003c n)]\n        \n","Timestamp":"1552928113"},"8450574":{"ID":"8450574","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/8450574/","Code":"class Solution:\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        results = [0]\n        for i in range(n):\n            results += [x + pow(2, i) for x in reversed(results)]\n        return results\n        ","Timestamp":"1539937249"},"8450595":{"ID":"8450595","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/8450595/","Code":"class Solution:\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [i ^ (i \u003e\u003e 1) for i in range(1 \u003c\u003c n)]\n        ","Timestamp":"1539937279"},"8450609":{"ID":"8450609","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/8450609/","Code":"class Solution:\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [i ^ (i \u003e\u003e 1) for i in range(1 \u003c\u003c n)]\n        ","Timestamp":"1539937290"},"8450621":{"ID":"8450621","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/8450621/","Code":"class Solution:\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        return [i ^ (i \u003e\u003e 1) for i in range(1 \u003c\u003c n)]\n        ","Timestamp":"1539937303"}}},{"questionId":"1050","questionFrontendId":"1008","Title":"Construct Binary Search Tree from Preorder Traversal","TitleSlug":"construct-binary-search-tree-from-preorder-traversal","Content":"\u003cp\u003eReturn the root node of a binary \u003cstrong\u003esearch\u003c/strong\u003e tree that matches the given \u003ccode\u003epreorder\u003c/code\u003e traversal.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cem\u003e(Recall that a binary search tree\u0026nbsp;is a binary tree where for every \u003cfont face=\"monospace\"\u003enode\u003c/font\u003e, any descendant of \u003ccode\u003enode.left\u003c/code\u003e has a value \u003ccode\u003e\u0026lt;\u003c/code\u003e\u0026nbsp;\u003ccode\u003enode.val\u003c/code\u003e, and any descendant of \u003ccode\u003enode.right\u003c/code\u003e has a value \u003ccode\u003e\u0026gt;\u003c/code\u003e\u0026nbsp;\u003ccode\u003enode.val\u003c/code\u003e.\u0026nbsp; Also recall that a preorder traversal\u0026nbsp;displays the value of the\u0026nbsp;\u003ccode\u003enode\u003c/code\u003e first, then traverses \u003ccode\u003enode.left\u003c/code\u003e, then traverses \u003ccode\u003enode.right\u003c/code\u003e.)\u003c/em\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[8,5,1,7,10,12]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[8,5,10,1,7,null,12]\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1266.png\" style=\"height: 200px; width: 306px;\" /\u003e\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= preorder.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eThe values of \u003ccode\u003epreorder\u003c/code\u003e are distinct.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"先序遍历构造二叉树","TranslatedContent":"\u003cp\u003e返回与给定先序遍历\u0026nbsp;\u003ccode\u003epreorder\u003c/code\u003e 相匹配的二叉搜索树（binary \u003cstrong\u003esearch\u003c/strong\u003e tree）的根结点。\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于\u0026nbsp;\u003ccode\u003enode.left\u003c/code\u003e\u0026nbsp;的任何后代，值总 \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003enode.val\u003c/code\u003e，而 \u003ccode\u003enode.right\u003c/code\u003e 的任何后代，值总 \u003ccode\u003e\u0026gt;\u003c/code\u003e \u003ccode\u003enode.val\u003c/code\u003e。此外，先序遍历首先显示节点的值，然后遍历 \u003ccode\u003enode.left\u003c/code\u003e，接着遍历 \u003ccode\u003enode.right\u003c/code\u003e。）\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[8,5,1,7,10,12]\n\u003cstrong\u003e输出：\u003c/strong\u003e[8,5,10,1,7,null,12]\n\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/1266.png\" style=\"height: 200px; width: 306px;\"\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= preorder.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e先序\u0026nbsp;\u003ccode\u003epreorder\u003c/code\u003e\u0026nbsp;中的值是不同的。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16855547":{"ID":"16855547","StatusDisplay":"Accepted","Lang":"python3","Runtime":"88 ms","Memory":"13.1 MB","URL":"/submissions/detail/16855547/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -\u003e TreeNode:\n        \n        def inner(l):\n            if not l:\n                return None\n            t = TreeNode(l[0])\n            t.left = inner([x for x in l if x \u003cl[0]])\n            t.right = inner([x for x in l if x \u003el[0]])\n            return t\n        return inner(preorder)","Timestamp":"1555125057"}}},{"questionId":"1006","questionFrontendId":"966","Title":"Vowel Spellchecker","TitleSlug":"vowel-spellchecker","Content":"\u003cp\u003eGiven a\u0026nbsp;\u003ccode\u003ewordlist\u003c/code\u003e, we want to implement a spellchecker that converts a query word into a correct word.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor a given \u003ccode\u003equery\u003c/code\u003e word, the spell checker handles two categories of spelling mistakes:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eCapitalization: If the query matches a word in the wordlist (\u003cstrong\u003ecase-insensitive\u003c/strong\u003e), then the query word is returned with the same case as the case in the wordlist.\r\n\r\n\t\u003cul\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;YellOw\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;Yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;Yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\r\n\t\u003c/ul\u003e\r\n\t\u003c/li\u003e\r\n\t\u003cli\u003eVowel Errors: If after replacing the vowels (\u0026#39;a\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;u\u0026#39;) of the query word with any vowel individually, it matches a word in the wordlist (\u003cstrong\u003ecase-insensitive\u003c/strong\u003e), then the query word is returned with the same case as the match in the wordlist.\r\n\t\u003cul\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yollow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;YellOw\u0026quot;\u003c/code\u003e\u003c/li\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yeellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;\u0026quot;\u003c/code\u003e (no match)\u003c/li\u003e\r\n\t\t\u003cli\u003eExample: \u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yllw\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;\u0026quot;\u003c/code\u003e (no match)\u003c/li\u003e\r\n\t\u003c/ul\u003e\r\n\t\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eIn addition, the spell checker operates under the following precedence rules:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eWhen the query exactly matches a word in the wordlist (\u003cstrong\u003ecase-sensitive\u003c/strong\u003e), you should return the same word back.\u003c/li\u003e\r\n\t\u003cli\u003eWhen the query matches a word up to capitlization, you should return the first such match in the wordlist.\u003c/li\u003e\r\n\t\u003cli\u003eWhen the query matches a word up to vowel errors, you should return the first such match in the wordlist.\u003c/li\u003e\r\n\t\u003cli\u003eIf the query has no matches in the wordlist, you should return the empty string.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eGiven some \u003ccode\u003equeries\u003c/code\u003e, return a\u0026nbsp;list of words \u003ccode\u003eanswer\u003c/code\u003e, where \u003ccode\u003eanswer[i]\u003c/code\u003e\u0026nbsp;is\u0026nbsp;the correct word for \u003ccode\u003equery = queries[i]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ewordlist = \u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;KiTe\u0026quot;,\u0026quot;kite\u0026quot;,\u0026quot;hare\u0026quot;,\u0026quot;Hare\u0026quot;]\u003c/span\u003e, queries = \u003cspan id=\"example-input-1-2\"\u003e[\u0026quot;kite\u0026quot;,\u0026quot;Kite\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;Hare\u0026quot;,\u0026quot;HARE\u0026quot;,\u0026quot;Hear\u0026quot;,\u0026quot;hear\u0026quot;,\u0026quot;keti\u0026quot;,\u0026quot;keet\u0026quot;,\u0026quot;keto\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[\u0026quot;kite\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;Hare\u0026quot;,\u0026quot;hare\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;KiTe\u0026quot;]\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordlist.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordlist[i].length \u0026lt;= 7\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries[i].length \u0026lt;= 7\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eAll strings in \u003ccode\u003ewordlist\u003c/code\u003e and \u003ccode\u003equeries\u003c/code\u003e consist only of \u003cstrong\u003eenglish\u003c/strong\u003e\u0026nbsp;letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"元音拼写检查器","TranslatedContent":"\u003cp\u003e在给定单词列表\u0026nbsp;\u003ccode\u003ewordlist\u003c/code\u003e\u0026nbsp;的情况下，我们希望实现一个拼写检查器，将查询单词转换为正确的单词。\u003c/p\u003e\n\n\u003cp\u003e对于给定的查询单词\u0026nbsp;\u003ccode\u003equery\u003c/code\u003e，拼写检查器将会处理两类拼写错误：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e大小写：如果查询匹配单词列表中的某个单词（\u003cstrong\u003e不区分大小写\u003c/strong\u003e），则返回的正确单词与单词列表中的大小写相同。\n\n\t\u003cul\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;YellOw\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;Yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;Yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;yellow\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;yellow\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003e元音错误：如果在将查询单词中的元音（\u0026lsquo;a\u0026rsquo;、\u0026lsquo;e\u0026rsquo;、\u0026lsquo;i\u0026rsquo;、\u0026lsquo;o\u0026rsquo;、\u0026lsquo;u\u0026rsquo;）分别替换为任何元音后，能与单词列表中的单词匹配（\u003cstrong\u003e不区分大小写\u003c/strong\u003e），则返回的正确单词与单词列表中的匹配项大小写相同。\n\t\u003cul\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yollow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;YellOw\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yeellow\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;\u0026quot;\u003c/code\u003e （无匹配项）\u003c/li\u003e\n\t\t\u003cli\u003e例如：\u003ccode\u003ewordlist = [\u0026quot;YellOw\u0026quot;]\u003c/code\u003e, \u003ccode\u003equery = \u0026quot;yllw\u0026quot;\u003c/code\u003e: \u003ccode\u003ecorrect = \u0026quot;\u0026quot;\u003c/code\u003e （无匹配项）\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e此外，拼写检查器还按照以下优先级规则操作：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e当查询完全匹配单词列表中的某个单词（\u003cstrong\u003e区分大小写\u003c/strong\u003e）时，应返回相同的单词。\u003c/li\u003e\n\t\u003cli\u003e当查询匹配到大小写问题的单词时，您应该返回单词列表中的第一个这样的匹配项。\u003c/li\u003e\n\t\u003cli\u003e当查询匹配到元音错误的单词时，您应该返回单词列表中的第一个这样的匹配项。\u003c/li\u003e\n\t\u003cli\u003e如果该查询在单词列表中没有匹配项，则应返回空字符串。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e给出一些查询 \u003ccode\u003equeries\u003c/code\u003e，返回一个单词列表 \u003ccode\u003eanswer\u003c/code\u003e，其中 \u003ccode\u003eanswer[i]\u003c/code\u003e 是由查询 \u003ccode\u003equery = queries[i]\u003c/code\u003e 得到的正确单词。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ewordlist = [\u0026quot;KiTe\u0026quot;,\u0026quot;kite\u0026quot;,\u0026quot;hare\u0026quot;,\u0026quot;Hare\u0026quot;], queries = [\u0026quot;kite\u0026quot;,\u0026quot;Kite\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;Hare\u0026quot;,\u0026quot;HARE\u0026quot;,\u0026quot;Hear\u0026quot;,\u0026quot;hear\u0026quot;,\u0026quot;keti\u0026quot;,\u0026quot;keet\u0026quot;,\u0026quot;keto\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;kite\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;Hare\u0026quot;,\u0026quot;hare\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;KiTe\u0026quot;,\u0026quot;\u0026quot;,\u0026quot;KiTe\u0026quot;]\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordlist.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= wordlist[i].length \u0026lt;= 7\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries[i].length \u0026lt;= 7\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003ewordlist\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003equeries\u003c/code\u003e\u0026nbsp;中的所有字符串仅由\u003cstrong\u003e英文\u003c/strong\u003e字母组成。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"11051394":{"ID":"11051394","StatusDisplay":"Accepted","Lang":"python3","Runtime":"152 ms","Memory":"11 MB","URL":"/submissions/detail/11051394/","Code":"import re\n\nclass Solution:\n    def spellchecker(self, wordlist, queries):\n        \"\"\"\n        :type wordlist: List[str]\n        :type queries: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if not queries:\n            return []\n        trans_re = re.compile('[AaEeIiOoUu]')\n        res = []\n        dic = set(wordlist)\n        \n        change_dict = {}\n        for word in wordlist:\n            t = word.lower()\n            if t not in change_dict:\n                change_dict[t] = word\n        \n        word_dict = {}\n        for word in wordlist:\n            t = trans_re.sub('_',word).lower()\n            if t not in word_dict:\n                word_dict[t] = word\n                \n        for query in queries:\n            if query in dic:\n                res.append(query)\n            else:\n                l = query.lower()\n                if l in change_dict:\n                    res.append(change_dict[l])\n                    continue\n                t = trans_re.sub('_',query).lower()\n                if t in word_dict:\n                    res.append(word_dict[t])\n                else:\n                    res.append('')\n        return res\n            \n        ","Timestamp":"1546140083"},"15006937":{"ID":"15006937","StatusDisplay":"Accepted","Lang":"python","Runtime":"136 ms","Memory":"13.1 MB","URL":"/submissions/detail/15006937/","Code":"import re\n\nclass Solution:\n    def spellchecker(self, wordlist, queries):\n        \"\"\"\n        :type wordlist: List[str]\n        :type queries: List[str]\n        :rtype: List[str]\n        \"\"\"\n        if not queries:\n            return []\n        trans_re = re.compile('[AaEeIiOoUu]')\n        res = []\n        dic = set(wordlist)\n        \n        change_dict = {}\n        for word in wordlist:\n            t = word.lower()\n            if t not in change_dict:\n                change_dict[t] = word\n        \n        word_dict = {}\n        for word in wordlist:\n            t = trans_re.sub('_',word).lower()\n            if t not in word_dict:\n                word_dict[t] = word\n                \n        for query in queries:\n            if query in dic:\n                res.append(query)\n            else:\n                l = query.lower()\n                if l in change_dict:\n                    res.append(change_dict[l])\n                    continue\n                t = trans_re.sub('_',query).lower()\n                if t in word_dict:\n                    res.append(word_dict[t])\n                else:\n                    res.append('')\n        return res\n            \n        \n","Timestamp":"1552927879"}}},{"questionId":"822","questionFrontendId":"804","Title":"Unique Morse Code Words","TitleSlug":"unique-morse-code-words","Content":"\u003cp\u003eInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e maps to \u003ccode\u003e\u0026quot;.-\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e maps to \u003ccode\u003e\u0026quot;-...\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e maps to \u003ccode\u003e\u0026quot;-.-.\u0026quot;\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor convenience, the full table for the 26 letters of the English alphabet is given below:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[\u0026quot;.-\u0026quot;,\u0026quot;-...\u0026quot;,\u0026quot;-.-.\u0026quot;,\u0026quot;-..\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;..-.\u0026quot;,\u0026quot;--.\u0026quot;,\u0026quot;....\u0026quot;,\u0026quot;..\u0026quot;,\u0026quot;.---\u0026quot;,\u0026quot;-.-\u0026quot;,\u0026quot;.-..\u0026quot;,\u0026quot;--\u0026quot;,\u0026quot;-.\u0026quot;,\u0026quot;---\u0026quot;,\u0026quot;.--.\u0026quot;,\u0026quot;--.-\u0026quot;,\u0026quot;.-.\u0026quot;,\u0026quot;...\u0026quot;,\u0026quot;-\u0026quot;,\u0026quot;..-\u0026quot;,\u0026quot;...-\u0026quot;,\u0026quot;.--\u0026quot;,\u0026quot;-..-\u0026quot;,\u0026quot;-.--\u0026quot;,\u0026quot;--..\u0026quot;]\u003c/pre\u003e\r\n\r\n\u003cp\u003eNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \u0026quot;cba\u0026quot; can be written as \u0026quot;-.-..--...\u0026quot;, (which is the concatenation \u0026quot;-.-.\u0026quot; + \u0026quot;-...\u0026quot; + \u0026quot;.-\u0026quot;). We\u0026#39;ll call such a concatenation, the transformation\u0026nbsp;of a word.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the number of different transformations among all words we have.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e words = [\u0026quot;gin\u0026quot;, \u0026quot;zen\u0026quot;, \u0026quot;gig\u0026quot;, \u0026quot;msg\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThe transformation of each word is:\r\n\u0026quot;gin\u0026quot; -\u0026gt; \u0026quot;--...-.\u0026quot;\r\n\u0026quot;zen\u0026quot; -\u0026gt; \u0026quot;--...-.\u0026quot;\r\n\u0026quot;gig\u0026quot; -\u0026gt; \u0026quot;--...--.\u0026quot;\r\n\u0026quot;msg\u0026quot; -\u0026gt; \u0026quot;--...--.\u0026quot;\r\n\r\nThere are 2 different transformations, \u0026quot;--...-.\u0026quot; and \u0026quot;--...--.\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe length of \u003ccode\u003ewords\u003c/code\u003e will be at most \u003ccode\u003e100\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach \u003ccode\u003ewords[i]\u003c/code\u003e will have length in range \u003ccode\u003e[1, 12]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003ewords[i]\u003c/code\u003e will only consist of lowercase letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"唯一摩尔斯密码词","TranslatedContent":"\u003cp\u003e国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串，\u0026nbsp;比如: \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e 对应 \u003ccode\u003e\u0026quot;.-\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e 对应 \u003ccode\u003e\u0026quot;-...\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;c\u0026quot;\u003c/code\u003e 对应 \u003ccode\u003e\u0026quot;-.-.\u0026quot;\u003c/code\u003e, 等等。\u003c/p\u003e\n\n\u003cp\u003e为了方便，所有26个英文字母对应摩尔斯密码表如下：\u003c/p\u003e\n\n\u003cpre\u003e[\u0026quot;.-\u0026quot;,\u0026quot;-...\u0026quot;,\u0026quot;-.-.\u0026quot;,\u0026quot;-..\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;..-.\u0026quot;,\u0026quot;--.\u0026quot;,\u0026quot;....\u0026quot;,\u0026quot;..\u0026quot;,\u0026quot;.---\u0026quot;,\u0026quot;-.-\u0026quot;,\u0026quot;.-..\u0026quot;,\u0026quot;--\u0026quot;,\u0026quot;-.\u0026quot;,\u0026quot;---\u0026quot;,\u0026quot;.--.\u0026quot;,\u0026quot;--.-\u0026quot;,\u0026quot;.-.\u0026quot;,\u0026quot;...\u0026quot;,\u0026quot;-\u0026quot;,\u0026quot;..-\u0026quot;,\u0026quot;...-\u0026quot;,\u0026quot;.--\u0026quot;,\u0026quot;-..-\u0026quot;,\u0026quot;-.--\u0026quot;,\u0026quot;--..\u0026quot;]\u003c/pre\u003e\n\n\u003cp\u003e给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，\u0026quot;cab\u0026quot; 可以写成 \u0026quot;-.-..--...\u0026quot;，(即 \u0026quot;-.-.\u0026quot; + \u0026quot;-...\u0026quot; + \u0026quot;.-\u0026quot;字符串的结合)。我们将这样一个连接过程称作单词翻译。\u003c/p\u003e\n\n\u003cp\u003e返回我们可以获得所有词不同单词翻译的数量。\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e例如:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e words = [\u0026quot;gin\u0026quot;, \u0026quot;zen\u0026quot;, \u0026quot;gig\u0026quot;, \u0026quot;msg\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释: \u003c/strong\u003e\n各单词翻译如下:\n\u0026quot;gin\u0026quot; -\u0026gt; \u0026quot;--...-.\u0026quot;\n\u0026quot;zen\u0026quot; -\u0026gt; \u0026quot;--...-.\u0026quot;\n\u0026quot;gig\u0026quot; -\u0026gt; \u0026quot;--...--.\u0026quot;\n\u0026quot;msg\u0026quot; -\u0026gt; \u0026quot;--...--.\u0026quot;\n\n共有 2 种不同翻译, \u0026quot;--...-.\u0026quot; 和 \u0026quot;--...--.\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e单词列表\u003ccode\u003ewords\u003c/code\u003e\u0026nbsp;的长度不会超过 \u003ccode\u003e100\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个单词\u0026nbsp;\u003ccode\u003ewords[i]\u003c/code\u003e的长度范围为\u0026nbsp;\u003ccode\u003e[1, 12]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个单词\u0026nbsp;\u003ccode\u003ewords[i]\u003c/code\u003e只包含小写字母。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006876":{"ID":"15006876","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006876/","Code":"class Solution:\n    def uniqueMorseRepresentations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        table = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        \n        res_set = set()\n        for word in words:\n            res_set.add(''.join([table[ord(k) - ord('a')] for k in list(word)]))\n        return len(res_set)\n            \n        \n","Timestamp":"1552927402"},"7573065":{"ID":"7573065","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7573065/","Code":"class Solution:\n    def uniqueMorseRepresentations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        table = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        \n        res_set = set()\n        for word in words:\n            res_set.add(''.join([table[ord(k) - ord('a')] for k in list(word)]))\n        return len(res_set)\n            \n        ","Timestamp":"1537258700"}}},{"questionId":"926","questionFrontendId":"890","Title":"Find and Replace Pattern","TitleSlug":"find-and-replace-pattern","Content":"\u003cp\u003eYou have a list of\u0026nbsp;\u003ccode\u003ewords\u003c/code\u003e and a \u003ccode\u003epattern\u003c/code\u003e, and you want to know which words in \u003ccode\u003ewords\u003c/code\u003e matches the pattern.\u003c/p\u003e\r\n\r\n\u003cp\u003eA word matches the pattern if there exists a permutation of letters \u003ccode\u003ep\u003c/code\u003e so that after replacing every letter \u003ccode\u003ex\u003c/code\u003e in the pattern with \u003ccode\u003ep(x)\u003c/code\u003e, we get the desired word.\u003c/p\u003e\r\n\r\n\u003cp\u003e(\u003cem\u003eRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\u003c/em\u003e)\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn a list of the words in \u003ccode\u003ewords\u003c/code\u003e\u0026nbsp;that match the given pattern.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return the answer in any order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ewords = \u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;abc\u0026quot;,\u0026quot;deq\u0026quot;,\u0026quot;mee\u0026quot;,\u0026quot;aqq\u0026quot;,\u0026quot;dkd\u0026quot;,\u0026quot;ccc\u0026quot;]\u003c/span\u003e, pattern = \u003cspan id=\"example-input-1-2\"\u003e\u0026quot;abb\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[\u0026quot;mee\u0026quot;,\u0026quot;aqq\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003e\u003cspan\u003eExplanation: \u003c/span\u003e\u003c/strong\u003e\u0026quot;mee\u0026quot; matches the pattern because there is a permutation {a -\u0026gt; m, b -\u0026gt; e, ...}. \r\n\u0026quot;ccc\u0026quot; does not match the pattern because {a -\u0026gt; c, b -\u0026gt; c, ...} is not a permutation,\r\nsince a and b map to the same letter.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pattern.length = words[i].length\u0026nbsp;\u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"查找和替换模式","TranslatedContent":"\u003cp\u003e你有一个单词列表\u0026nbsp;\u003ccode\u003ewords\u003c/code\u003e\u0026nbsp;和一个模式\u0026nbsp;\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e，你想知道 \u003ccode\u003ewords\u003c/code\u003e 中的哪些单词与模式匹配。\u003c/p\u003e\n\n\u003cp\u003e如果存在字母的排列 \u003ccode\u003ep\u003c/code\u003e\u0026nbsp;，使得将模式中的每个字母 \u003ccode\u003ex\u003c/code\u003e 替换为 \u003ccode\u003ep(x)\u003c/code\u003e 之后，我们就得到了所需的单词，那么单词与模式是匹配的。\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e返回 \u003ccode\u003ewords\u003c/code\u003e 中与给定模式匹配的单词列表。\u003c/p\u003e\n\n\u003cp\u003e你可以按任何顺序返回答案。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ewords = [\u0026quot;abc\u0026quot;,\u0026quot;deq\u0026quot;,\u0026quot;mee\u0026quot;,\u0026quot;aqq\u0026quot;,\u0026quot;dkd\u0026quot;,\u0026quot;ccc\u0026quot;], pattern = \u0026quot;abb\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;mee\u0026quot;,\u0026quot;aqq\u0026quot;]\n\u003cstrong\u003e解释：\n\u003c/strong\u003e\u0026quot;mee\u0026quot; 与模式匹配，因为存在排列 {a -\u0026gt; m, b -\u0026gt; e, ...}。\n\u0026quot;ccc\u0026quot; 与模式不匹配，因为 {a -\u0026gt; c, b -\u0026gt; c, ...} 不是排列。\n因为 a 和 b 映射到同一个字母。\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pattern.length = words[i].length\u0026nbsp;\u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006953":{"ID":"15006953","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006953/","Code":"class Solution:\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for word in words:\n            status = True\n            data = {}\n            for i in range(len(word)):\n                if pattern[i] not in data:\n                    data[pattern[i]] = word[i]\n                else:\n                    if data[pattern[i]] != word[i]:\n                        status = False\n                        break\n            if len(set(data.keys())) != len(set(data.values())):\n                status = False\n                \n            if status:\n                res.append(word)\n        return res\n        \n","Timestamp":"1552928140"},"7885557":{"ID":"7885557","StatusDisplay":"Accepted","Lang":"python3","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7885557/","Code":"class Solution:\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for word in words:\n            status = True\n            data = {}\n            for i in range(len(word)):\n                if pattern[i] not in data:\n                    data[pattern[i]] = word[i]\n                else:\n                    if data[pattern[i]] != word[i]:\n                        status = False\n                        break\n            if len(set(data.keys())) != len(set(data.values())):\n                status = False\n                \n            if status:\n                res.append(word)\n        return res\n        ","Timestamp":"1538207247"}}},{"questionId":"783","questionFrontendId":"700","Title":"Search in a Binary Search Tree","TitleSlug":"search-in-a-binary-search-tree","Content":"\u003cp\u003eGiven the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node\u0026#39;s value equals the given value. Return the subtree rooted with that node. If such node doesn\u0026#39;t exist, you should return NULL.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example,\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\n\r\nAnd the value to search: 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eYou should return this subtree:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n      2     \r\n     / \\   \r\n    1   3\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eIn the example above, if we want to search the value \u003ccode\u003e5\u003c/code\u003e, since there is no node with value \u003ccode\u003e5\u003c/code\u003e, we should return \u003ccode\u003eNULL\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that an empty tree is represented by \u003ccode\u003eNULL\u003c/code\u003e, therefore you would see the expected output (serialized tree format) as\u0026nbsp;\u003ccode\u003e[]\u003c/code\u003e, not \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"二叉搜索树中的搜索","TranslatedContent":"\u003cp\u003e给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。\u003c/p\u003e\n\n\u003cp\u003e例如，\u003c/p\u003e\n\n\u003cpre\u003e\n给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和值: 2\n\u003c/pre\u003e\n\n\u003cp\u003e你应该返回如下子树:\u003c/p\u003e\n\n\u003cpre\u003e\n      2     \n     / \\   \n    1   3\n\u003c/pre\u003e\n\n\u003cp\u003e在上述示例中，如果要找的值是 \u003ccode\u003e5\u003c/code\u003e，但因为没有节点值为 \u003ccode\u003e5\u003c/code\u003e，我们应该返回 \u003ccode\u003eNULL\u003c/code\u003e。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006849":{"ID":"15006849","StatusDisplay":"Accepted","Lang":"python","Runtime":"80 ms","Memory":"14.9 MB","URL":"/submissions/detail/15006849/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def searchBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return\n        if root.val == val:\n            return root\n        elif root.val  \u003e val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n            \n","Timestamp":"1552927162"},"7986059":{"ID":"7986059","StatusDisplay":"Accepted","Lang":"python3","Runtime":"116 ms","Memory":"N/A","URL":"/submissions/detail/7986059/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def searchBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return\n        if root.val == val:\n            return root\n        elif root.val  \u003e val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n            ","Timestamp":"1538988236"}}},{"questionId":"975","questionFrontendId":"938","Title":"Range Sum of BST","TitleSlug":"range-sum-of-bst","Content":"\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e node of a binary search tree, return the sum of values of all nodes with value between \u003ccode\u003eL\u003c/code\u003e and \u003ccode\u003eR\u003c/code\u003e (inclusive).\u003c/p\u003e\r\n\r\n\u003cp\u003eThe binary search tree is guaranteed to have unique values.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eroot = \u003cspan id=\"example-input-1-1\"\u003e[10,5,15,3,7,null,18]\u003c/span\u003e, L = \u003cspan id=\"example-input-1-2\"\u003e7\u003c/span\u003e, R = \u003cspan id=\"example-input-1-3\"\u003e15\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e32\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eroot = \u003cspan id=\"example-input-2-1\"\u003e[10,5,15,3,7,13,18,1,null,6]\u003c/span\u003e, L = \u003cspan id=\"example-input-2-2\"\u003e6\u003c/span\u003e, R = \u003cspan id=\"example-input-2-3\"\u003e10\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e23\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe number of nodes in the tree is at most \u003ccode\u003e10000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe final answer is guaranteed to be less than \u003ccode\u003e2^31\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"二叉搜索树的范围和","TranslatedContent":"\u003cp\u003e给定二叉搜索树的根结点\u0026nbsp;\u003ccode\u003eroot\u003c/code\u003e，返回 \u003ccode\u003eL\u003c/code\u003e 和 \u003ccode\u003eR\u003c/code\u003e（含）之间的所有结点的值的和。\u003c/p\u003e\n\n\u003cp\u003e二叉搜索树保证具有唯一的值。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eroot = [10,5,15,3,7,null,18], L = 7, R = 15\n\u003cstrong\u003e输出：\u003c/strong\u003e32\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eroot = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10\n\u003cstrong\u003e输出：\u003c/strong\u003e23\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e树中的结点数量最多为\u0026nbsp;\u003ccode\u003e10000\u003c/code\u003e\u0026nbsp;个。\u003c/li\u003e\n\t\u003cli\u003e最终的答案保证小于\u0026nbsp;\u003ccode\u003e2^31\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006925":{"ID":"15006925","StatusDisplay":"Accepted","Lang":"python","Runtime":"352 ms","Memory":"27.2 MB","URL":"/submissions/detail/15006925/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def rangeSumBST(self, root, L, R):\n        \"\"\"\n        :type root: TreeNode\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if L \u003c= root.val \u003c= R:\n            res = root.val\n        else:\n            res = 0\n        res += self.rangeSumBST(root.left,L,R)\n        res += self.rangeSumBST(root.right,L,R)\n        return res\n        \n            \n            \n        \n","Timestamp":"1552927770"},"9315926":{"ID":"9315926","StatusDisplay":"Accepted","Lang":"python3","Runtime":"388 ms","Memory":"N/A","URL":"/submissions/detail/9315926/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def rangeSumBST(self, root, L, R):\n        \"\"\"\n        :type root: TreeNode\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if L \u003c= root.val \u003c= R:\n            res = root.val\n        else:\n            res = 0\n        res += self.rangeSumBST(root.left,L,R)\n        res += self.rangeSumBST(root.right,L,R)\n        return res\n        \n            \n            \n        ","Timestamp":"1542083191"}}},{"questionId":"617","questionFrontendId":"617","Title":"Merge Two Binary Trees","TitleSlug":"merge-two-binary-trees","Content":"\u003cp\u003eGiven two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\n\tTree 1                     Tree 2                  \r\n          1                         2                             \r\n         / \\                       / \\                            \r\n        3   2                     1   3                        \r\n       /                           \\   \\                      \r\n      5                             4   7                  \r\n\u003cb\u003eOutput:\u003c/b\u003e \r\nMerged tree:\r\n\t     3\r\n\t    / \\\r\n\t   4   5\r\n\t  / \\   \\ \r\n\t 5   4   7\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The merging process must start from the root nodes of both trees.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"合并二叉树","TranslatedContent":"\u003cp\u003e给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。\u003c/p\u003e\n\n\u003cp\u003e你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则\u003cstrong\u003e不为\u0026nbsp;\u003c/strong\u003eNULL 的节点将直接作为新二叉树的节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n\tTree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n\u003cstrong\u003e输出:\u003c/strong\u003e \n合并后的树:\n\t     3\n\t    / \\\n\t   4   5\n\t  / \\   \\ \n\t 5   4   7\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u0026nbsp;合并必须从两个树的根节点开始。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006823":{"ID":"15006823","StatusDisplay":"Accepted","Lang":"python","Runtime":"80 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006823/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if t1 and t2:\n            t1.val += t2.val\n        elif t2:\n            return t2\n        else:\n            return t1\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        return t1\n        \n\n","Timestamp":"1552926941"},"1729264":{"ID":"1729264","StatusDisplay":"Accepted","Lang":"python","Runtime":"112 ms","Memory":"N/A","URL":"/submissions/detail/1729264/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if t1 and t2:\n            t1.val += t2.val\n        elif t2:\n            return t2\n        else:\n            return t1\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        return t1\n        ","Timestamp":"1501149996"},"7572954":{"ID":"7572954","StatusDisplay":"Accepted","Lang":"python","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7572954/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if t1 and t2:\n            t1.val += t2.val\n        elif t2:\n            return t2\n        else:\n            return t1\n        t1.left = self.mergeTrees(t1.left,t2.left)\n        t1.right = self.mergeTrees(t1.right,t2.right)\n        return t1\n        \n","Timestamp":"1536218998"}}},{"questionId":"20","questionFrontendId":"20","Title":"Valid Parentheses","TitleSlug":"valid-parentheses","Content":"\u003cp\u003eGiven a string containing just the characters \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;{\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;}\u0026#39;\u003c/code\u003e, \u003ccode\u003e\u0026#39;[\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;]\u0026#39;\u003c/code\u003e, determine if the input string is valid.\u003c/p\u003e\r\n\r\n\u003cp\u003eAn input string is valid if:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eOpen brackets must be closed by the same type of brackets.\u003c/li\u003e\r\n\t\u003cli\u003eOpen brackets must be closed in the correct order.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003eNote that an empty string is\u0026nbsp;also considered valid.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;()\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;()[]{}\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;(]\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;([)]\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;{[]}\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"有效的括号","TranslatedContent":"\u003cp\u003e给定一个只包括 \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e，\u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e，\u003ccode\u003e\u0026#39;{\u0026#39;\u003c/code\u003e，\u003ccode\u003e\u0026#39;}\u0026#39;\u003c/code\u003e，\u003ccode\u003e\u0026#39;[\u0026#39;\u003c/code\u003e，\u003ccode\u003e\u0026#39;]\u0026#39;\u003c/code\u003e\u0026nbsp;的字符串，判断字符串是否有效。\u003c/p\u003e\n\n\u003cp\u003e有效字符串需满足：\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e左括号必须用相同类型的右括号闭合。\u003c/li\u003e\n\t\u003cli\u003e左括号必须以正确的顺序闭合。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e注意空字符串可被认为是有效字符串。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;()\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;()[]{}\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;(]\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;([)]\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;{[]}\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"10894436":{"ID":"10894436","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/10894436/","Code":"class Solution:\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for x in s:\n            if x == ']':\n                if not stack:\n                    return False\n                if stack[-1] == '[':\n                        stack.pop(-1)\n                else:\n                        return False\n            elif x == '}':\n                    if not stack:\n                        return False\n                    if stack[-1] == '{':\n                        stack.pop(-1)\n                    else:\n                        return False\n            elif x == ')':\n                    if not stack:\n                        return False\n                    if stack[-1] == '(':\n                        stack.pop(-1)\n                    else:\n                        return False\n            \n            else:\n                stack.append(x)\n        if stack:\n            return False\n        return True\n        ","Timestamp":"1545812831"},"11341239":{"ID":"11341239","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"6.5 MB","URL":"/submissions/detail/11341239/","Code":"class Solution:\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        t = {\n            ')': '(',\n            ']': '[',\n            '}': '{'\n        }\n        stack = []\n        flag = True\n        for x in range(len(s)):\n            if s[x] in t:\n                if stack:\n                    if stack[-1] == t[s[x]]:\n                        stack.pop(-1)\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                stack.append(s[x])\n        if stack:\n            return False\n        return True","Timestamp":"1546851564"},"15006693":{"ID":"15006693","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006693/","Code":"class Solution:\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        t = {\n            ')': '(',\n            ']': '[',\n            '}': '{'\n        }\n        stack = []\n        flag = True\n        for x in range(len(s)):\n            if s[x] in t:\n                if stack:\n                    if stack[-1] == t[s[x]]:\n                        stack.pop(-1)\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                stack.append(s[x])\n        if stack:\n            return False\n        return True\n","Timestamp":"1552925401"}}},{"questionId":"238","questionFrontendId":"238","Title":"Product of Array Except Self","TitleSlug":"product-of-array-except-self","Content":"\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e of \u003cem\u003en\u003c/em\u003e integers where \u003cem\u003en\u003c/em\u003e \u0026gt; 1, \u0026nbsp;return an array \u003ccode\u003eoutput\u003c/code\u003e such that \u003ccode\u003eoutput[i]\u003c/code\u003e is equal to the product of all the elements of \u003ccode\u003enums\u003c/code\u003e except \u003ccode\u003enums[i]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e  \u003ccode\u003e[1,2,3,4]\u003c/code\u003e\r\n\u003cb\u003eOutput:\u003c/b\u003e \u003ccode\u003e[24,12,8,6]\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003ePlease solve it \u003cstrong\u003ewithout division\u003c/strong\u003e and in O(\u003cem\u003en\u003c/em\u003e).\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003cbr /\u003e\r\nCould you solve it with constant space complexity? (The output array \u003cstrong\u003edoes not\u003c/strong\u003e count as extra space for the purpose of space complexity analysis.)\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"除自身以外数组的乘积","TranslatedContent":"\u003cp\u003e给定长度为\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;的整数数组\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e，其中\u0026nbsp;\u003cem\u003en\u003c/em\u003e \u0026gt; 1，返回输出数组\u0026nbsp;\u003ccode\u003eoutput\u003c/code\u003e\u0026nbsp;，其中 \u003ccode\u003eoutput[i]\u003c/code\u003e\u0026nbsp;等于\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e\u0026nbsp;中除\u0026nbsp;\u003ccode\u003enums[i]\u003c/code\u003e\u0026nbsp;之外其余各元素的乘积。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[1,2,3,4]\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e[24,12,8,6]\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e请\u003cstrong\u003e不要使用除法，\u003c/strong\u003e且在\u0026nbsp;O(\u003cem\u003en\u003c/em\u003e) 时间复杂度内完成此题。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003cbr\u003e\n你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组\u003cstrong\u003e不被视为\u003c/strong\u003e额外空间。）\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006726":{"ID":"15006726","StatusDisplay":"Accepted","Lang":"python","Runtime":"92 ms","Memory":"18 MB","URL":"/submissions/detail/15006726/","Code":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = 1\n        zeros = 0\n        index = None\n        for i,n in enumerate(nums):\n            if n == 0:\n                zeros +=1\n                index = i\n            else:\n                res *= n\n        if zeros \u003e=2:\n            return [0]*len(nums)\n        elif zeros == 1:\n            l = [0]*len(nums)\n            l[index] = res\n            return l\n        return [res/s for s in nums]\n\n","Timestamp":"1552925647"},"1729349":{"ID":"1729349","StatusDisplay":"Accepted","Lang":"python","Runtime":"180 ms","Memory":"N/A","URL":"/submissions/detail/1729349/","Code":"class Solution(object):\r\n    def productExceptSelf(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        res = 1\r\n        zeros = 0\r\n        index = None\r\n        for i,n in enumerate(nums):\r\n            if n == 0:\r\n                zeros +=1\r\n                index = i\r\n            else:\r\n                res *= n\r\n        if zeros \u003e=2:\r\n            return [0]*len(nums)\r\n        elif zeros == 1:\r\n            l = [0]*len(nums)\r\n            l[index] = res\r\n            return l\r\n        return [res/s for s in nums]","Timestamp":"1472876568"},"7572778":{"ID":"7572778","StatusDisplay":"Accepted","Lang":"python","Runtime":"140 ms","Memory":"N/A","URL":"/submissions/detail/7572778/","Code":"class Solution(object):\n    def productExceptSelf(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = 1\n        zeros = 0\n        index = None\n        for i,n in enumerate(nums):\n            if n == 0:\n                zeros +=1\n                index = i\n            else:\n                res *= n\n        if zeros \u003e=2:\n            return [0]*len(nums)\n        elif zeros == 1:\n            l = [0]*len(nums)\n            l[index] = res\n            return l\n        return [res/s for s in nums]\n","Timestamp":"1536218658"}}},{"questionId":"77","questionFrontendId":"77","Title":"Combinations","TitleSlug":"combinations","Content":"\u003cp\u003eGiven two integers \u003cem\u003en\u003c/em\u003e and \u003cem\u003ek\u003c/em\u003e, return all possible combinations of \u003cem\u003ek\u003c/em\u003e numbers out of 1 ... \u003cem\u003en\u003c/em\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;n = 4, k = 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"组合","TranslatedContent":"\u003cp\u003e给定两个整数 \u003cem\u003en\u003c/em\u003e 和 \u003cem\u003ek\u003c/em\u003e，返回 1 ... \u003cem\u003en \u003c/em\u003e中所有可能的 \u003cem\u003ek\u003c/em\u003e 个数的组合。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;n = 4, k = 2\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006864":{"ID":"15006864","StatusDisplay":"Accepted","Lang":"python","Runtime":"624 ms","Memory":"12.7 MB","URL":"/submissions/detail/15006864/","Code":"class Solution:\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, min_value, k):\n            if k == 0:\n                res.append(nums)\n                return\n            if min_value \u003e n:\n                return\n            for x in range(min_value, n+1):\n                inner(nums+[x], x+1,  k-1)\n        \n        inner([], 1, k)\n        return res\n        \n","Timestamp":"1552927296"},"7972234":{"ID":"7972234","StatusDisplay":"Accepted","Lang":"python3","Runtime":"676 ms","Memory":"N/A","URL":"/submissions/detail/7972234/","Code":"class Solution:\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums,min_value,n,k):\n            if k == 0:\n                res.append(nums)\n                return\n            if min_value \u003e n:\n                return\n            for x in range(min_value, n+1):\n                inner(nums+[x], x+1, n, k-1)\n        \n        inner([], 1, n, k)\n        return res\n        ","Timestamp":"1538973070"},"7972243":{"ID":"7972243","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1248 ms","Memory":"N/A","URL":"/submissions/detail/7972243/","Code":"class Solution:\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, min_value, k):\n            if k == 0:\n                res.append(nums)\n                return\n            if min_value \u003e n:\n                return\n            for x in range(min_value, n+1):\n                inner(nums+[x], x+1,  k-1)\n        \n        inner([], 1, k)\n        return res\n        ","Timestamp":"1538973103"},"7972245":{"ID":"7972245","StatusDisplay":"Accepted","Lang":"python3","Runtime":"684 ms","Memory":"N/A","URL":"/submissions/detail/7972245/","Code":"class Solution:\n    def combine(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums, min_value, k):\n            if k == 0:\n                res.append(nums)\n                return\n            if min_value \u003e n:\n                return\n            for x in range(min_value, n+1):\n                inner(nums+[x], x+1,  k-1)\n        \n        inner([], 1, k)\n        return res\n        ","Timestamp":"1538973113"}}},{"questionId":"189","questionFrontendId":"189","Title":"Rotate Array","TitleSlug":"rotate-array","Content":"\u003cp\u003eGiven an array, rotate the array to the right by \u003cem\u003ek\u003c/em\u003e steps, where\u0026nbsp;\u003cem\u003ek\u003c/em\u003e\u0026nbsp;is non-negative.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e[1,2,3,4,5,6,7]\u003c/code\u003e and \u003cem\u003ek\u003c/em\u003e = 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e[5,6,7,1,2,3,4]\u003c/code\u003e\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nrotate 1 steps to the right: \u003ccode\u003e[7,1,2,3,4,5,6]\u003c/code\u003e\r\nrotate 2 steps to the right: \u003ccode\u003e[6,7,1,2,3,4,5]\r\n\u003c/code\u003erotate 3 steps to the right: \u003ccode\u003e[5,6,7,1,2,3,4]\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e[-1,-100,3,99]\u003c/code\u003e and \u003cem\u003ek\u003c/em\u003e = 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [3,99,-1,-100]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nrotate 1 steps to the right: [99,-1,-100,3]\r\nrotate 2 steps to the right: [3,99,-1,-100]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eTry to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\u003c/li\u003e\r\n\t\u003cli\u003eCould you do it in-place with O(1) extra space?\u003c/li\u003e\r\n\u003c/ul\u003e","Difficulty":"Easy","TranslatedTitle":"旋转数组","TranslatedContent":"\u003cp\u003e给定一个数组，将数组中的元素向右移动\u0026nbsp;\u003cem\u003ek\u0026nbsp;\u003c/em\u003e个位置，其中\u0026nbsp;\u003cem\u003ek\u0026nbsp;\u003c/em\u003e是非负数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[1,2,3,4,5,6,7]\u003c/code\u003e 和 \u003cem\u003ek\u003c/em\u003e = 3\n\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e[5,6,7,1,2,3,4]\u003c/code\u003e\n\u003cstrong\u003e解释:\u003c/strong\u003e\n向右旋转 1 步: \u003ccode\u003e[7,1,2,3,4,5,6]\u003c/code\u003e\n向右旋转 2 步: \u003ccode\u003e[6,7,1,2,3,4,5]\n\u003c/code\u003e向右旋转 3 步: \u003ccode\u003e[5,6,7,1,2,3,4]\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[-1,-100,3,99]\u003c/code\u003e 和 \u003cem\u003ek\u003c/em\u003e = 2\n\u003cstrong\u003e输出:\u003c/strong\u003e [3,99,-1,-100]\n\u003cstrong\u003e解释:\u003c/strong\u003e \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。\u003c/li\u003e\n\t\u003cli\u003e要求使用空间复杂度为\u0026nbsp;O(1) 的原地算法。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006956":{"ID":"15006956","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"13.3 MB","URL":"/submissions/detail/15006956/","Code":"class Solution:\n    def rotate(self, nums: List[int], k: int) -\u003e None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if k \u003e len(nums):\n            k = k % len(nums)\n        t = nums[-k:]\n        \n\n        for x in range(len(nums) - 1, k-1, -1):\n            nums[x] = nums[x-k]\n        \n        for x in range(len(t)):\n            nums[x] = t[x]\n       ","Timestamp":"1552928394"}}},{"questionId":"898","questionFrontendId":"867","Title":"Transpose Matrix","TitleSlug":"transpose-matrix","Content":"\u003cp\u003eGiven a\u0026nbsp;matrix \u003ccode\u003eA\u003c/code\u003e, return the transpose of \u003ccode\u003eA\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe transpose of a matrix is the matrix flipped over it\u0026#39;s main diagonal, switching the row and column indices of the matrix.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[[1,2,3],[4,5,6],[7,8,9]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[[1,4,7],[2,5,8],[3,6,9]]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[[1,2,3],[4,5,6]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[[1,4],[2,5],[3,6]]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cspan\u003e1 \u0026lt;= A.length\u0026nbsp;\u0026lt;= 1000\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cspan\u003e1 \u0026lt;= A[0].length\u0026nbsp;\u0026lt;= 1000\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"转置矩阵","TranslatedContent":"\u003cp\u003e给定一个矩阵\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e，\u0026nbsp;返回\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;的转置矩阵。\u003c/p\u003e\n\n\u003cp\u003e矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,2,3],[4,5,6],[7,8,9]]\n\u003cstrong\u003e输出：\u003c/strong\u003e[[1,4,7],[2,5,8],[3,6,9]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,2,3],[4,5,6]]\n\u003cstrong\u003e输出：\u003c/strong\u003e[[1,4],[2,5],[3,6]]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length\u0026nbsp;\u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[0].length\u0026nbsp;\u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006896":{"ID":"15006896","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"11.2 MB","URL":"/submissions/detail/15006896/","Code":"class Solution:\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[A[x][y] for x in range(len(A))] for y in range(len(A[0]))]\n        \n        \n","Timestamp":"1552927573"},"7971205":{"ID":"7971205","StatusDisplay":"Accepted","Lang":"python3","Runtime":"100 ms","Memory":"N/A","URL":"/submissions/detail/7971205/","Code":"class Solution:\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        res = [[A[x][y] for x in range(len(A))] for y in range(len(A[0]))]\n        return res\n        \n        ","Timestamp":"1538970365"},"7971211":{"ID":"7971211","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/7971211/","Code":"class Solution:\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[A[x][y] for x in range(len(A))] for y in range(len(A[0]))]\n        \n        ","Timestamp":"1538970376"},"7971215":{"ID":"7971215","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/7971215/","Code":"class Solution:\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        return [[A[x][y] for x in range(len(A))] for y in range(len(A[0]))]\n        \n        ","Timestamp":"1538970383"}}},{"questionId":"957","questionFrontendId":"921","Title":"Minimum Add to Make Parentheses Valid","TitleSlug":"minimum-add-to-make-parentheses-valid","Content":"\u003cp\u003eGiven a string\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e of \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e parentheses, we add the minimum number of parentheses ( \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e or \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e, and in any positions ) so that the resulting parentheses string is valid.\u003c/p\u003e\r\n\r\n\u003cp\u003eFormally, a parentheses string is valid if and only if:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eIt is the empty string, or\u003c/li\u003e\r\n\t\u003cli\u003eIt can be written as \u003ccode\u003eAB\u003c/code\u003e\u0026nbsp;(\u003ccode\u003eA\u003c/code\u003e concatenated with \u003ccode\u003eB\u003c/code\u003e), where \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e are valid strings, or\u003c/li\u003e\r\n\t\u003cli\u003eIt can be written as \u003ccode\u003e(A)\u003c/code\u003e, where \u003ccode\u003eA\u003c/code\u003e is a valid string.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eGiven a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e\u0026quot;())\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e1\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e\u0026quot;(((\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e3\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e\u0026quot;()\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e0\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-4-1\"\u003e\u0026quot;()))((\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e4\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e only consists of \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e characters.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\u0026nbsp;\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Medium","TranslatedTitle":"使括号有效的最少添加","TranslatedContent":"\u003cp\u003e给定一个由\u0026nbsp;\u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e\u0026nbsp;括号组成的字符串 \u003ccode\u003eS\u003c/code\u003e，我们需要添加最少的括号（ \u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e\u0026nbsp;或是\u0026nbsp;\u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e，可以在任何位置），以使得到的括号字符串有效。\u003c/p\u003e\n\n\u003cp\u003e从形式上讲，只有满足下面几点之一，括号字符串才是有效的：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e它是一个空字符串，或者\u003c/li\u003e\n\t\u003cli\u003e它可以被写成\u0026nbsp;\u003ccode\u003eAB\u003c/code\u003e\u0026nbsp;（\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;与\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;连接）, 其中\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;都是有效字符串，或者\u003c/li\u003e\n\t\u003cli\u003e它可以被写作\u0026nbsp;\u003ccode\u003e(A)\u003c/code\u003e，其中\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;是有效字符串。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e给定一个括号字符串，返回为使结果字符串有效而必须添加的最少括号数。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;())\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;(((\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;()\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;()))((\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e4\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003eS.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e 只包含\u0026nbsp;\u003ccode\u003e\u0026#39;(\u0026#39;\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003e\u0026#39;)\u0026#39;\u003c/code\u003e\u0026nbsp;字符。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006919":{"ID":"15006919","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006919/","Code":"class Solution:\n    def minAddToMakeValid(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        for x in range(len(S)):\n            if S[x] == '(':\n                stack.append('(')\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(')')\n                \n        return len(stack)\n        \n","Timestamp":"1552927721"},"8445298":{"ID":"8445298","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/8445298/","Code":"class Solution:\n    def minAddToMakeValid(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        for x in range(len(S)):\n            if S[x] == '(':\n                stack.append('(')\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(')')\n                \n        return len(stack)\n        ","Timestamp":"1539931846"},"8445356":{"ID":"8445356","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/8445356/","Code":"class Solution:\n    def minAddToMakeValid(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        for x in range(len(S)):\n            if S[x] == '(':\n                stack.append('(')\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(')')\n                \n        return len(stack)\n        ","Timestamp":"1539931913"}}},{"questionId":"344","questionFrontendId":"344","Title":"Reverse String","TitleSlug":"reverse-string","Content":"\u003cp\u003eWrite a function that reverses a string. The input string is given as an array of characters \u003ccode\u003echar[]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eDo not allocate extra space for another array, you must do this by \u003cstrong\u003emodifying the input array\u0026nbsp;\u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003ein-place\u003c/a\u003e\u003c/strong\u003e with O(1) extra memory.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume all the characters consist of \u003ca href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\"\u003eprintable ascii characters\u003c/a\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;h\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;o\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[\u0026quot;o\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;h\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;H\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[\u0026quot;h\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;H\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"反转字符串","TranslatedContent":"\u003cp\u003e编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 \u003ccode\u003echar[]\u003c/code\u003e 的形式给出。\u003c/p\u003e\n\n\u003cp\u003e不要给另外的数组分配额外的空间，你必须\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/原地算法\" target=\"_blank\"\u003e原地\u003c/a\u003e修改输入数组\u003c/strong\u003e、使用 O(1) 的额外空间解决这一问题。\u003c/p\u003e\n\n\u003cp\u003e你可以假设数组中的所有字符都是 \u003ca href=\"https://baike.baidu.com/item/ASCII\" target=\"_blank\"\u003eASCII\u003c/a\u003e 码表中的可打印字符。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;h\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;o\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;o\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;h\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;H\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;h\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;H\u0026quot;]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006776":{"ID":"15006776","StatusDisplay":"Accepted","Lang":"python3","Runtime":"184 ms","Memory":"17.7 MB","URL":"/submissions/detail/15006776/","Code":"class Solution:\n    def reverseString(self, s: List[str]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        for x in range(len(s)//2):\n            s[x], s[-x-1] = s[-x-1],s[x] \n        ","Timestamp":"1552926070"},"15006782":{"ID":"15006782","StatusDisplay":"Accepted","Lang":"python3","Runtime":"180 ms","Memory":"17.5 MB","URL":"/submissions/detail/15006782/","Code":"class Solution:\n    def reverseString(self, s: List[str]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        l = len(s)\n        for x in range(l//2):\n            s[x], s[l-x-1] = s[l-x-1],s[x] \n        ","Timestamp":"1552926113"},"1729267":{"ID":"1729267","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1729267/","Code":"class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1]\n        ","Timestamp":"1501325711"},"1729444":{"ID":"1729444","StatusDisplay":"Accepted","Lang":"java","Runtime":"5 ms","Memory":"N/A","URL":"/submissions/detail/1729444/","Code":"public class Solution {\r\n    public String reverseString(String s) {\r\n        StringBuilder sb=new StringBuilder(s);\r\n        sb.reverse();\r\n        return sb.toString();\r\n    }\r\n}","Timestamp":"1466060130"},"1978006":{"ID":"1978006","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/1978006/","Code":"class Solution:\n    def reverseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1]\n        ","Timestamp":"1525449079"},"7572835":{"ID":"7572835","StatusDisplay":"Accepted","Lang":"python3","Runtime":"100 ms","Memory":"N/A","URL":"/submissions/detail/7572835/","Code":"class Solution:\n    def reverseString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return s[::-1]\n        \n","Timestamp":"1536218754"}}},{"questionId":"284","questionFrontendId":"284","Title":"Peeking Iterator","TitleSlug":"peeking-iterator","Content":"\u003cp\u003eGiven an Iterator class interface with methods: \u003ccode\u003enext()\u003c/code\u003e and \u003ccode\u003ehasNext()\u003c/code\u003e, design and implement a PeekingIterator that support the \u003ccode\u003epeek()\u003c/code\u003e operation -- it essentially peek() at the element that will be returned by the next call to next().\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nAssume that the iterator is initialized to the beginning of the list: \u003cstrong\u003e\u003ccode\u003e[1,2,3]\u003c/code\u003e\u003c/strong\u003e.\r\n\r\nCall \u003cstrong\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/strong\u003e gets you \u003cstrong\u003e1\u003c/strong\u003e, the first element in the list.\r\nNow you call \u003cstrong\u003e\u003ccode\u003epeek()\u003c/code\u003e\u003c/strong\u003e and it returns \u003cstrong\u003e2\u003c/strong\u003e, the next element. Calling \u003cstrong\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/strong\u003e after that \u003ci\u003e\u003cb\u003estill\u003c/b\u003e\u003c/i\u003e return \u003cstrong\u003e2\u003c/strong\u003e. \r\nYou call \u003cstrong\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/strong\u003e the final time and it returns \u003cstrong\u003e3\u003c/strong\u003e, the last element. \r\nCalling \u003cstrong\u003e\u003ccode\u003ehasNext()\u003c/code\u003e\u003c/strong\u003e after that should return \u003cstrong\u003efalse\u003c/strong\u003e.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up\u003c/b\u003e: How would you extend your design to be generic and work with all types, not just integer?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"顶端迭代器","TranslatedContent":"\u003cp\u003e给定一个迭代器类的接口，接口包含两个方法：\u0026nbsp;\u003ccode\u003enext()\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003ehasNext()\u003c/code\u003e。设计并实现一个支持\u0026nbsp;\u003ccode\u003epeek()\u003c/code\u003e\u0026nbsp;操作的顶端迭代器 -- 其本质就是把原本应由\u0026nbsp;\u003ccode\u003enext()\u003c/code\u003e\u0026nbsp;方法返回的元素\u0026nbsp;\u003ccode\u003epeek()\u003c/code\u003e\u0026nbsp;出来。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e假设迭代器被初始化为列表\u0026nbsp;\u003cstrong\u003e\u003ccode\u003e[1,2,3]\u003c/code\u003e\u003c/strong\u003e。\n\n调用\u0026nbsp;\u003cstrong\u003e\u003ccode\u003enext() \u003c/code\u003e\u003c/strong\u003e返回 \u003cstrong\u003e1\u003c/strong\u003e，得到列表中的第一个元素。\n现在调用\u0026nbsp;\u003cstrong\u003e\u003ccode\u003epeek()\u003c/code\u003e\u003c/strong\u003e\u0026nbsp;返回 \u003cstrong\u003e2\u003c/strong\u003e，下一个元素。在此之后调用\u0026nbsp;\u003cstrong\u003e\u003ccode\u003enext() \u003c/code\u003e\u003c/strong\u003e仍然返回 \u003cstrong\u003e2\u003c/strong\u003e。\n最后一次调用\u0026nbsp;\u003cstrong\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/strong\u003e\u0026nbsp;返回 \u003cstrong\u003e3\u003c/strong\u003e，末尾元素。在此之后调用\u0026nbsp;\u003cstrong\u003e\u003ccode\u003ehasNext()\u003c/code\u003e\u003c/strong\u003e\u0026nbsp;应该返回 \u003cstrong\u003efalse\u003c/strong\u003e。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006734":{"ID":"15006734","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006734/","Code":"# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self.iterator = iterator\n        self.temp = None\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        if not self.temp:\n            self.temp = self.iterator.next()\n        return self.temp\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if self.temp:\n            t = self.temp\n            self.temp = None\n            return t\n        return self.iterator.next()\n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        if self.temp:\n            return True\n        return self.iterator.hasNext()\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].\n","Timestamp":"1552925737"},"8459644":{"ID":"8459644","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/8459644/","Code":"# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self.iterator = iterator\n        self.temp = None\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        if not self.temp:\n            self.temp = self.iterator.next()\n        return self.temp\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        if self.temp:\n            t = self.temp\n            self.temp = None\n            return t\n        return self.iterator.next()\n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        if self.temp:\n            return True\n        return self.iterator.hasNext()\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].","Timestamp":"1539948849"}}},{"questionId":"53","questionFrontendId":"53","Title":"Maximum Subarray","TitleSlug":"maximum-subarray","Content":"\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, find the contiguous subarray\u0026nbsp;(containing at least one number) which has the largest sum and return its sum.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [-2,1,-3,4,-1,2,1,-5,4],\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\u0026nbsp;[4,-1,2,1] has the largest sum = 6.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eIf you have figured out the O(\u003cem\u003en\u003c/em\u003e) solution, try coding another solution using the divide and conquer approach, which is more subtle.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"最大子序和","TranslatedContent":"\u003cp\u003e给定一个整数数组 \u003ccode\u003enums\u003c/code\u003e\u0026nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [-2,1,-3,4,-1,2,1,-5,4],\n\u003cstrong\u003e输出:\u003c/strong\u003e 6\n\u003cstrong\u003e解释:\u003c/strong\u003e\u0026nbsp;连续子数组\u0026nbsp;[4,-1,2,1] 的和最大，为\u0026nbsp;6。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果你已经实现复杂度为 O(\u003cem\u003en\u003c/em\u003e) 的解法，尝试使用更为精妙的分治法求解。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"12623836":{"ID":"12623836","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"7.4 MB","URL":"/submissions/detail/12623836/","Code":"#\n# @lc app=leetcode.cn id=53 lang=python3\n#\n# [53] 最大子序和\n#\n# https://leetcode-cn.com/problems/maximum-subarray/description/\n#\n# algorithms\n# Easy (41.61%)\n# Total Accepted:    33.4K\n# Total Submissions: 80.3K\n# Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'\n#\n# 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n# \n# 示例:\n# \n# 输入: [-2,1,-3,4,-1,2,1,-5,4],\n# 输出: 6\n# 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n# \n# \n# 进阶:\n# \n# 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n# \n#\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for x in range(1, len(nums)):\n            if nums[x-1] \u003e 0:\n                nums[x] += nums[x-1]\n        return max(nums)\n        \n","Timestamp":"1549967169"},"15006799":{"ID":"15006799","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13.7 MB","URL":"/submissions/detail/15006799/","Code":"#\n# @lc app=leetcode.cn id=53 lang=python3\n#\n# [53] 最大子序和\n#\n# https://leetcode-cn.com/problems/maximum-subarray/description/\n#\n# algorithms\n# Easy (41.61%)\n# Total Accepted:    33.4K\n# Total Submissions: 80.3K\n# Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'\n#\n# 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n# \n# 示例:\n# \n# 输入: [-2,1,-3,4,-1,2,1,-5,4],\n# 输出: 6\n# 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n# \n# \n# 进阶:\n# \n# 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n# \n#\nclass Solution:\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for x in range(1, len(nums)):\n            if nums[x-1] \u003e 0:\n                nums[x] += nums[x-1]\n        return max(nums)\n        \n\n","Timestamp":"1552926736"}}},{"questionId":"1031","questionFrontendId":"989","Title":"Add to Array-Form of Integer","TitleSlug":"add-to-array-form-of-integer","Content":"\u003cp\u003eFor a non-negative integer \u003ccode\u003eX\u003c/code\u003e, the\u0026nbsp;\u003cem\u003earray-form of \u003ccode\u003eX\u003c/code\u003e\u003c/em\u003e\u0026nbsp;is an array of its digits in left to right order.\u0026nbsp; For example, if \u003ccode\u003eX = 1231\u003c/code\u003e, then the array form is\u0026nbsp;\u003ccode\u003e[1,2,3,1]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven the array-form \u003ccode\u003eA\u003c/code\u003e of a non-negative\u0026nbsp;integer \u003ccode\u003eX\u003c/code\u003e, return the array-form of the integer \u003ccode\u003eX+K\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-1-1\"\u003e[1,2,0,0]\u003c/span\u003e, K = 34\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[1,2,3,4]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e1200 + 34 = 1234\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-2-1\"\u003e[2,7,4]\u003c/span\u003e, K = \u003cspan id=\"example-input-2-2\"\u003e181\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[4,5,5]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e274 + 181 = 455\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-3-1\"\u003e[2,1,5]\u003c/span\u003e, K = \u003cspan id=\"example-input-3-2\"\u003e806\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e[1,0,2,1]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e215 + 806 = 1021\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-4-1\"\u003e[9,9,9,9,9,9,9,9,9,9]\u003c/span\u003e, K = \u003cspan id=\"example-input-4-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e[1,0,0,0,0,0,0,0,0,0,0]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e9999999999 + 1 = 10000000000\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote：\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eIf \u003ccode\u003eA.length \u0026gt; 1\u003c/code\u003e, then \u003ccode\u003eA[0] != 0\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"数组形式的整数加法","TranslatedContent":"\u003cp\u003e对于非负整数\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;而言，\u003cem\u003e\u003ccode\u003eX\u003c/code\u003e\u003c/em\u003e\u0026nbsp;的\u003cem\u003e数组形式\u003c/em\u003e是每位数字按从左到右的顺序形成的数组。例如，如果\u0026nbsp;\u003ccode\u003eX = 1231\u003c/code\u003e，那么其数组形式为\u0026nbsp;\u003ccode\u003e[1,2,3,1]\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e给定非负整数 \u003ccode\u003eX\u003c/code\u003e 的数组形式\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e，返回整数\u0026nbsp;\u003ccode\u003eX+K\u003c/code\u003e\u0026nbsp;的数组形式。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [1,2,0,0], K = 34\n\u003cstrong\u003e输出：\u003c/strong\u003e[1,2,3,4]\n\u003cstrong\u003e解释：\u003c/strong\u003e1200 + 34 = 1234\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e解释 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [2,7,4], K = 181\n\u003cstrong\u003e输出：\u003c/strong\u003e[4,5,5]\n\u003cstrong\u003e解释：\u003c/strong\u003e274 + 181 = 455\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [2,1,5], K = 806\n\u003cstrong\u003e输出：\u003c/strong\u003e[1,0,2,1]\n\u003cstrong\u003e解释：\u003c/strong\u003e215 + 806 = 1021\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [9,9,9,9,9,9,9,9,9,9], K = 1\n\u003cstrong\u003e输出：\u003c/strong\u003e[1,0,0,0,0,0,0,0,0,0,0]\n\u003cstrong\u003e解释：\u003c/strong\u003e9999999999 + 1 = 10000000000\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e如果\u0026nbsp;\u003ccode\u003eA.length \u0026gt; 1\u003c/code\u003e，那么\u0026nbsp;\u003ccode\u003eA[0] != 0\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12614486":{"ID":"12614486","StatusDisplay":"Accepted","Lang":"python3","Runtime":"12744 ms","Memory":"7.1 MB","URL":"/submissions/detail/12614486/","Code":"#\n# @lc app=leetcode.cn id=989 lang=python3\n#\n# [989] 按公因数计算最大组件大小\n#\n# https://leetcode-cn.com/problems/add-to-array-form-of-integer/description/\n#\n# algorithms\n# Easy (33.46%)\n# Total Accepted:    270\n# Total Submissions: 807\n# Testcase Example:  '[1,2,0,0]\\n34'\n#\n# 对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n# \n# 给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n# \n# \n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：A = [1,2,0,0], K = 34\n# 输出：[1,2,3,4]\n# 解释：1200 + 34 = 1234\n# \n# \n# 解释 2：\n# \n# 输入：A = [2,7,4], K = 181\n# 输出：[4,5,5]\n# 解释：274 + 181 = 455\n# \n# \n# 示例 3：\n# \n# 输入：A = [2,1,5], K = 806\n# 输出：[1,0,2,1]\n# 解释：215 + 806 = 1021\n# \n# \n# 示例 4：\n# \n# 输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n# 输出：[1,0,0,0,0,0,0,0,0,0,0]\n# 解释：9999999999 + 1 = 10000000000\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# 0 \u003c= A[i] \u003c= 9\n# 0 \u003c= K \u003c= 10000\n# 如果 A.length \u003e 1，那么 A[0] != 0\n# \n# \n#\nclass Solution:\n    def addToArrayForm(self, A: 'List[int]', K: 'int') -\u003e 'List[int]':\n        a = 0\n        B = A[::-1]\n        for x in range(len(A)):\n            a += B[x] * (10 ** x)\n        r = a + K\n        return [ int(i) for i in list(str(r))]\n\n","Timestamp":"1549959560"},"12615500":{"ID":"12615500","StatusDisplay":"Accepted","Lang":"python3","Runtime":"360 ms","Memory":"6.8 MB","URL":"/submissions/detail/12615500/","Code":"#\n# @lc app=leetcode.cn id=989 lang=python3\n#\n# [989] 按公因数计算最大组件大小\n#\n# https://leetcode-cn.com/problems/add-to-array-form-of-integer/description/\n#\n# algorithms\n# Easy (33.46%)\n# Total Accepted:    270\n# Total Submissions: 807\n# Testcase Example:  '[1,2,0,0]\\n34'\n#\n# 对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n# \n# 给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n# \n# \n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：A = [1,2,0,0], K = 34\n# 输出：[1,2,3,4]\n# 解释：1200 + 34 = 1234\n# \n# \n# 解释 2：\n# \n# 输入：A = [2,7,4], K = 181\n# 输出：[4,5,5]\n# 解释：274 + 181 = 455\n# \n# \n# 示例 3：\n# \n# 输入：A = [2,1,5], K = 806\n# 输出：[1,0,2,1]\n# 解释：215 + 806 = 1021\n# \n# \n# 示例 4：\n# \n# 输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n# 输出：[1,0,0,0,0,0,0,0,0,0,0]\n# 解释：9999999999 + 1 = 10000000000\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# 0 \u003c= A[i] \u003c= 9\n# 0 \u003c= K \u003c= 10000\n# 如果 A.length \u003e 1，那么 A[0] != 0\n# \n# \n#\nclass Solution:\n    def addToArrayForm(self, A: 'List[int]', K: 'int') -\u003e 'List[int]':\n        A[-1] += K\n        flag = 0\n        for x in range(len(A)-1, -1, -1):\n            if flag:\n                A[x] += flag\n                flag = 0\n            flag = A[x] // 10\n            A[x] = A[x] % 10\n        if flag:\n            if flag \u003e= 10:\n                return [int(i) for i in list(str(flag))] + A\n            else:\n                return [flag] + A\n        else:\n            return A\n\n","Timestamp":"1549960284"},"15006947":{"ID":"15006947","StatusDisplay":"Accepted","Lang":"python3","Runtime":"188 ms","Memory":"13.4 MB","URL":"/submissions/detail/15006947/","Code":"#\n# @lc app=leetcode.cn id=989 lang=python3\n#\n# [989] 按公因数计算最大组件大小\n#\n# https://leetcode-cn.com/problems/add-to-array-form-of-integer/description/\n#\n# algorithms\n# Easy (33.46%)\n# Total Accepted:    270\n# Total Submissions: 807\n# Testcase Example:  '[1,2,0,0]\\n34'\n#\n# 对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n# \n# 给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n# \n# \n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：A = [1,2,0,0], K = 34\n# 输出：[1,2,3,4]\n# 解释：1200 + 34 = 1234\n# \n# \n# 解释 2：\n# \n# 输入：A = [2,7,4], K = 181\n# 输出：[4,5,5]\n# 解释：274 + 181 = 455\n# \n# \n# 示例 3：\n# \n# 输入：A = [2,1,5], K = 806\n# 输出：[1,0,2,1]\n# 解释：215 + 806 = 1021\n# \n# \n# 示例 4：\n# \n# 输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n# 输出：[1,0,0,0,0,0,0,0,0,0,0]\n# 解释：9999999999 + 1 = 10000000000\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# 0 \u003c= A[i] \u003c= 9\n# 0 \u003c= K \u003c= 10000\n# 如果 A.length \u003e 1，那么 A[0] != 0\n# \n# \n#\nclass Solution:\n    def addToArrayForm(self, A: 'List[int]', K: 'int') -\u003e 'List[int]':\n        A[-1] += K\n        flag = 0\n        for x in range(len(A)-1, -1, -1):\n            if flag:\n                A[x] += flag\n                flag = 0\n            flag = A[x] // 10\n            A[x] = A[x] % 10\n        if flag:\n            if flag \u003e= 10:\n                return [int(i) for i in list(str(flag))] + A\n            else:\n                return [flag] + A\n        else:\n            return A\n\n\n","Timestamp":"1552927993"}}},{"questionId":"258","questionFrontendId":"258","Title":"Add Digits","TitleSlug":"add-digits","Content":"\u003cp\u003eGiven a non-negative integer \u003ccode\u003enum\u003c/code\u003e, repeatedly add all its digits until the result has only one digit.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e38\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2 \r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe process is like: \u003ccode\u003e3 + 8 = 11\u003c/code\u003e, \u003ccode\u003e1 + 1 = 2\u003c/code\u003e. \r\n\u0026nbsp;            Since \u003ccode\u003e2\u003c/code\u003e has only one digit, return it.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr /\u003e\r\nCould you do it without any loop/recursion in O(1) runtime?\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"各位相加","TranslatedContent":"\u003cp\u003e给定一个非负整数 \u003ccode\u003enum\u003c/code\u003e，反复将各个位上的数字相加，直到结果为一位数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e38\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e 2 \n\u003cstrong\u003e解释: \u003c/strong\u003e各位相加的过程为\u003cstrong\u003e：\u003c/strong\u003e\u003ccode\u003e3 + 8 = 11\u003c/code\u003e, \u003ccode\u003e1 + 1 = 2\u003c/code\u003e。 由于\u0026nbsp;\u003ccode\u003e2\u003c/code\u003e 是一位数，所以返回 2。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003cbr\u003e\n你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006724":{"ID":"15006724","StatusDisplay":"Accepted","Lang":"c","Runtime":"4 ms","Memory":"6.6 MB","URL":"/submissions/detail/15006724/","Code":"int addDigits(int num) {\n    if (num == 0)\n        return num;\n    return 1+(num-1)%9;\n}\n\n","Timestamp":"1552925638"},"1729380":{"ID":"1729380","StatusDisplay":"Accepted","Lang":"python","Runtime":"88 ms","Memory":"N/A","URL":"/submissions/detail/1729380/","Code":"class Solution(object):\r\n    def addDigits(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        if num == 0:\r\n            return num\r\n        return 1+(num-1)%9","Timestamp":"1472039550"},"1729430":{"ID":"1729430","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/1729430/","Code":"class Solution(object):\r\n    def addDigits(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        if num == 0:\r\n            return num\r\n        return 1+(num-1)%9","Timestamp":"1472039575"},"1729479":{"ID":"1729479","StatusDisplay":"Accepted","Lang":"c","Runtime":"8 ms","Memory":"N/A","URL":"/submissions/detail/1729479/","Code":"int addDigits(int num) {\r\n    if (num == 0)\r\n        return num;\r\n    return 1+(num-1)%9;\r\n}","Timestamp":"1472039657"},"7572783":{"ID":"7572783","StatusDisplay":"Accepted","Lang":"c","Runtime":"4 ms","Memory":"N/A","URL":"/submissions/detail/7572783/","Code":"int addDigits(int num) {\n    if (num == 0)\n        return num;\n    return 1+(num-1)%9;\n}\n","Timestamp":"1536218688"}}},{"questionId":"23","questionFrontendId":"23","Title":"Merge k Sorted Lists","TitleSlug":"merge-k-sorted-lists","Content":"\u003cp\u003eMerge \u003cem\u003ek\u003c/em\u003e sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n[\r\n\u0026nbsp; 1-\u0026gt;4-\u0026gt;5,\r\n\u0026nbsp; 1-\u0026gt;3-\u0026gt;4,\r\n\u0026nbsp; 2-\u0026gt;6\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6\r\n\u003c/pre\u003e\r\n","Difficulty":"Hard","TranslatedTitle":"合并K个排序链表","TranslatedContent":"\u003cp\u003e合并\u0026nbsp;\u003cem\u003ek\u0026nbsp;\u003c/em\u003e个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n[\n\u0026nbsp; 1-\u0026gt;4-\u0026gt;5,\n\u0026nbsp; 1-\u0026gt;3-\u0026gt;4,\n\u0026nbsp; 2-\u0026gt;6\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11174825":{"ID":"11174825","StatusDisplay":"Accepted","Lang":"python3","Runtime":"4576 ms","Memory":"10.1 MB","URL":"/submissions/detail/11174825/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val \u003e l2.val:\n            l1, l2 = l2, l1\n        head = l1    \n        while l2:\n            if not l1.next:\n                l1.next = l2\n                break\n            if l1.next.val \u003e l2.val:\n                tmp = l2.next\n                l2.next = l1.next\n                l1.next = l2\n                l2 = tmp\n            t = head\n            l1 = l1.next \n                        \n        return head\n    \n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        t = lists[0]\n        for i in range(1, len(lists)):\n            t = self.mergeTwoLists(t, lists[i])\n        return t\n        \n        ","Timestamp":"1546502014"},"15006707":{"ID":"15006707","StatusDisplay":"Accepted","Lang":"python","Runtime":"3984 ms","Memory":"16.4 MB","URL":"/submissions/detail/15006707/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val \u003e l2.val:\n            l1, l2 = l2, l1\n        head = l1    \n        while l2:\n            if not l1.next:\n                l1.next = l2\n                break\n            if l1.next.val \u003e l2.val:\n                tmp = l2.next\n                l2.next = l1.next\n                l1.next = l2\n                l2 = tmp\n            t = head\n            l1 = l1.next \n                        \n        return head\n    \n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        t = lists[0]\n        for i in range(1, len(lists)):\n            t = self.mergeTwoLists(t, lists[i])\n        return t\n        \n        \n","Timestamp":"1552925522"}}},{"questionId":"345","questionFrontendId":"345","Title":"Reverse Vowels of a String","TitleSlug":"reverse-vowels-of-a-string","Content":"\u003cp\u003eWrite a function that takes a string as input and reverse only the vowels of a string.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e\u0026quot;holle\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e\u0026quot;leetcode\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e\u0026quot;leotcede\u0026quot;\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nThe vowels does not include the letter \u0026quot;y\u0026quot;.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"反转字符串中的元音字母","TranslatedContent":"\u003cp\u003e编写一个函数，以字符串作为输入，反转该字符串中的元音字母。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;hello\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003e\u0026quot;holle\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;leetcode\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003e\u0026quot;leotcede\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003cbr\u003e\n元音字母不包含字母\u0026quot;y\u0026quot;。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11345448":{"ID":"11345448","StatusDisplay":"Accepted","Lang":"python3","Runtime":"160 ms","Memory":"8.2 MB","URL":"/submissions/detail/11345448/","Code":"class Solution:\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        yuan = ('a', 'e', 'i', 'o', 'u', 'A','E','I','O', 'U')\n        r = []\n        for x in range(len(s)):\n            if s[x] in yuan:\n                r.append(s[x])\n        k = 1\n        s = list(s)\n        for x in range(len(s)):\n            if s[x] in yuan:\n                s[x] = r[-k]\n                k += 1\n        return ''.join(s)\n        \n        ","Timestamp":"1546855966"},"11345541":{"ID":"11345541","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"8 MB","URL":"/submissions/detail/11345541/","Code":"class Solution:\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        yuan = ('a', 'e', 'i', 'o', 'u', 'A','E','I','O', 'U')\n        s = list(s)\n        a, b = 0, len(s) - 1\n        while a \u003c b:\n            if s[a] not in yuan:\n                a += 1\n                continue\n            if s[b] not in yuan:\n                b -= 1\n                continue\n            s[a], s[b] = s[b],  s[a]\n            a += 1\n            b -= 1\n        return ''.join(s)\n        \n        ","Timestamp":"1546856149"},"11345605":{"ID":"11345605","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"8 MB","URL":"/submissions/detail/11345605/","Code":"class Solution:\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        yuan = set(['a', 'e', 'i', 'o', 'u', 'A','E','I','O', 'U'])\n        s = list(s)\n        a, b = 0, len(s) - 1\n        while a \u003c b:\n            if s[a] not in yuan:\n                a += 1\n                continue\n            if s[b] not in yuan:\n                b -= 1\n                continue\n            s[a], s[b] = s[b],  s[a]\n            a += 1\n            b -= 1\n        return ''.join(s)\n        \n        ","Timestamp":"1546856249"},"11345628":{"ID":"11345628","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"8 MB","URL":"/submissions/detail/11345628/","Code":"class Solution:\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        yuan = set('aeiouAEIOU')\n        s = list(s)\n        a, b = 0, len(s) - 1\n        while a \u003c b:\n            if s[a] not in yuan:\n                a += 1\n                continue\n            if s[b] not in yuan:\n                b -= 1\n                continue\n            s[a], s[b] = s[b],  s[a]\n            a += 1\n            b -= 1\n        return ''.join(s)\n        \n        ","Timestamp":"1546856299"},"15006747":{"ID":"15006747","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"12.5 MB","URL":"/submissions/detail/15006747/","Code":"class Solution:\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        yuan = set('aeiouAEIOU')\n        s = list(s)\n        a, b = 0, len(s) - 1\n        while a \u003c b:\n            if s[a] not in yuan:\n                a += 1\n                continue\n            if s[b] not in yuan:\n                b -= 1\n                continue\n            s[a], s[b] = s[b],  s[a]\n            a += 1\n            b -= 1\n        return ''.join(s)\n        \n        \n","Timestamp":"1552925831"}}},{"questionId":"1018","questionFrontendId":"976","Title":"Largest Perimeter Triangle","TitleSlug":"largest-perimeter-triangle","Content":"\u003cp\u003eGiven an array \u003ccode\u003eA\u003c/code\u003e of positive lengths, return the largest perimeter of a triangle with \u003cstrong\u003enon-zero area\u003c/strong\u003e, formed from 3 of these lengths.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf it is impossible to form any\u0026nbsp;triangle of non-zero area, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[2,1,2]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e5\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[1,2,1]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e0\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[3,2,3,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e10\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-4-1\"\u003e[3,6,2,3]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e8\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"三角形的最大周长","TranslatedContent":"\u003cp\u003e给定由一些正数（代表长度）组成的数组 \u003ccode\u003eA\u003c/code\u003e，返回由其中三个长度组成的、\u003cstrong\u003e面积不为零\u003c/strong\u003e的三角形的最大周长。\u003c/p\u003e\n\n\u003cp\u003e如果不能形成任何面积不为零的三角形，返回\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[2,1,2]\n\u003cstrong\u003e输出：\u003c/strong\u003e5\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,2,1]\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[3,2,3,4]\n\u003cstrong\u003e输出：\u003c/strong\u003e10\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[3,6,2,3]\n\u003cstrong\u003e输出：\u003c/strong\u003e8\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12609837":{"ID":"12609837","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"8.1 MB","URL":"/submissions/detail/12609837/","Code":"#\n# @lc app=leetcode.cn id=976 lang=python3\n#\n# [976] 最小面积矩形\n#\n# https://leetcode-cn.com/problems/largest-perimeter-triangle/description/\n#\n# algorithms\n# Easy (57.06%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.6K\n# Testcase Example:  '[2,1,2]'\n#\n# 给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。\n# \n# 如果不能形成任何面积不为零的三角形，返回 0。\n# \n# \n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：[2,1,2]\n# 输出：5\n# \n# \n# 示例 2：\n# \n# 输入：[1,2,1]\n# 输出：0\n# \n# \n# 示例 3：\n# \n# 输入：[3,2,3,4]\n# 输出：10\n# \n# \n# 示例 4：\n# \n# 输入：[3,6,2,3]\n# 输出：8\n# \n# \n# \n# \n# 提示：\n# \n# \n# 3 \u003c= A.length \u003c= 10000\n# 1 \u003c= A[i] \u003c= 10^6\n# \n# \n#\nclass Solution:\n    def largestPerimeter(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        A.sort(reverse=True)\n        for i in range(len(A) - 3 + 1):\n            if A[i] \u003c A[i+1] + A[i+2]:\n                return A[i] + A[i+1] + A[i+2]\n        else:\n            return 0        \n        \n","Timestamp":"1549955618"},"15006942":{"ID":"15006942","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"13.9 MB","URL":"/submissions/detail/15006942/","Code":"#\n# @lc app=leetcode.cn id=976 lang=python3\n#\n# [976] 最小面积矩形\n#\n# https://leetcode-cn.com/problems/largest-perimeter-triangle/description/\n#\n# algorithms\n# Easy (57.06%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.6K\n# Testcase Example:  '[2,1,2]'\n#\n# 给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。\n# \n# 如果不能形成任何面积不为零的三角形，返回 0。\n# \n# \n# \n# \n# \n# \n# 示例 1：\n# \n# 输入：[2,1,2]\n# 输出：5\n# \n# \n# 示例 2：\n# \n# 输入：[1,2,1]\n# 输出：0\n# \n# \n# 示例 3：\n# \n# 输入：[3,2,3,4]\n# 输出：10\n# \n# \n# 示例 4：\n# \n# 输入：[3,6,2,3]\n# 输出：8\n# \n# \n# \n# \n# 提示：\n# \n# \n# 3 \u003c= A.length \u003c= 10000\n# 1 \u003c= A[i] \u003c= 10^6\n# \n# \n#\nclass Solution:\n    def largestPerimeter(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        A.sort(reverse=True)\n        for i in range(len(A) - 3 + 1):\n            if A[i] \u003c A[i+1] + A[i+2]:\n                return A[i] + A[i+1] + A[i+2]\n        else:\n            return 0        \n        \n\n","Timestamp":"1552927927"}}},{"questionId":"832","questionFrontendId":"814","Title":"Binary Tree Pruning","TitleSlug":"binary-tree-pruning","Content":"\u003cp\u003eWe are given the head node \u003ccode\u003eroot\u003c/code\u003e\u0026nbsp;of a binary tree, where additionally every node\u0026#39;s value is either a 0 or a 1.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the same tree where every subtree (of the given tree) not containing a 1 has been removed.\u003c/p\u003e\r\n\r\n\u003cp\u003e(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 1:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,null,0,0,1]\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e[1,null,0,null,1]\r\n \r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nOnly the red nodes satisfy the property \u0026quot;every subtree not containing a 1\u0026quot;.\r\nThe diagram on the right represents the answer.\r\n\r\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" /\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 2:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,0,1,0,0,0,1]\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e[1,null,1,null,1]\r\n\r\n\r\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" /\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 3:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,1,0,1,1,0,1,0]\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e[1,1,0,1,1,null,1]\r\n\r\n\r\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" /\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe binary tree\u0026nbsp;will\u0026nbsp;have\u0026nbsp;at\u0026nbsp;most \u003ccode\u003e100 nodes\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe value of each node will only be \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"二叉树剪枝","TranslatedContent":"\u003cp\u003e给定二叉树根结点\u0026nbsp;\u003ccode\u003eroot\u003c/code\u003e\u0026nbsp;，此外树的每个结点的值要么是 0，要么是 1。\u003c/p\u003e\n\n\u003cp\u003e返回移除了所有不包含 1 的子树的原二叉树。\u003c/p\u003e\n\n\u003cp\u003e( 节点 X 的子树为 X 本身，以及所有 X 的后代。)\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例1:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,null,0,0,1]\n\u003cstrong\u003e输出: \u003c/strong\u003e[1,null,0,null,1]\n \n\u003cstrong\u003e解释:\u003c/strong\u003e \n只有红色节点满足条件\u0026ldquo;所有不包含 1 的子树\u0026rdquo;。\n右图为返回的答案。\n\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" /\u003e\n\u003c/pre\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例2:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,0,1,0,0,0,1]\n\u003cstrong\u003e输出: \u003c/strong\u003e[1,null,1,null,1]\n\n\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" /\u003e\n\u003c/pre\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例3:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,1,0,1,1,0,1,0]\n\u003cstrong\u003e输出: \u003c/strong\u003e[1,1,0,1,1,null,1]\n\n\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" /\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给定的二叉树最多有\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e\u0026nbsp;个节点。\u003c/li\u003e\n\t\u003cli\u003e每个节点的值只会为\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e 或\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006882":{"ID":"15006882","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006882/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pruneTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def _inner(node):\n            if not node:\n                return 0\n            l = _inner(node.left)\n            if not l:\n                node.left = None\n            r = _inner(node.right)\n            if not r:\n                node.right = None\n            return node.val + r + l\n        \n        _inner(root)\n        return root\n        \n","Timestamp":"1552927468"},"7885559":{"ID":"7885559","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7885559/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pruneTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def _inner(node):\n            if not node:\n                return 0\n            l = _inner(node.left)\n            if not l:\n                node.left = None\n            r = _inner(node.right)\n            if not r:\n                node.right = None\n            return node.val + r + l\n        \n        _inner(root)\n        return root\n        ","Timestamp":"1538207710"}}},{"questionId":"419","questionFrontendId":"419","Title":"Battleships in a Board","TitleSlug":"battleships-in-a-board","Content":"Given an 2D board, count how many battleships are in it. The battleships are represented with \u003ccode\u003e'X'\u003c/code\u003es, empty slots are represented with \u003ccode\u003e'.'\u003c/code\u003es. You may assume the following rules:\r\n\r\n\u003cul\u003e\r\n\u003cli\u003eYou receive a valid board, made of only battleships or empty slots.\u003c/li\u003e\r\n\u003cli\u003eBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape \u003ccode\u003e1xN\u003c/code\u003e (1 row, N columns) or \u003ccode\u003eNx1\u003c/code\u003e (N rows, 1 column), where N can be of any size.\u003c/li\u003e\r\n\u003cli\u003eAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003eX..X\r\n...X\r\n...X\r\n\u003c/pre\u003e\r\nIn the above board there are 2 battleships.\r\n\r\n\u003cp\u003e\u003cb\u003eInvalid Example:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e...X\r\nXXXX\r\n...X\r\n\u003c/pre\u003e\r\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr\u003eCould you do it in \u003cb\u003eone-pass\u003c/b\u003e, using only \u003cb\u003eO(1) extra memory\u003c/b\u003e and \u003cb\u003ewithout modifying\u003c/b\u003e the value of the board?\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"甲板上的战舰","TranslatedContent":"\u003cp\u003e给定一个二维的甲板， 请计算其中有多少艘战舰。\u0026nbsp;战舰用\u0026nbsp;\u003ccode\u003e\u0026#39;X\u0026#39;\u003c/code\u003e表示，空位用\u0026nbsp;\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e表示。\u0026nbsp;你需要遵守以下规则：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给你一个有效的甲板，仅由战舰或者空位组成。\u003c/li\u003e\n\t\u003cli\u003e战舰只能水平或者垂直放置。换句话说,战舰只能由\u0026nbsp;\u003ccode\u003e1xN\u003c/code\u003e (1 行, N 列)组成，或者\u0026nbsp;\u003ccode\u003eNx1\u003c/code\u003e (N 行, 1 列)组成，其中N可以是任意大小。\u003c/li\u003e\n\t\u003cli\u003e两艘战舰之间至少有一个水平或垂直的空位分隔\u0026nbsp;- 即没有相邻的战舰。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\nX..X\n...X\n...X\n\u003c/pre\u003e\n\n\u003cp\u003e在上面的甲板中有2艘战舰。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e无效样例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n...X\nXXXX\n...X\n\u003c/pre\u003e\n\n\u003cp\u003e你不会收到这样的无效甲板\u0026nbsp;- 因为战舰之间至少会有一个空位将它们分开。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你可以用\u003cstrong\u003e一次扫描算法\u003c/strong\u003e，只使用\u003cstrong\u003eO(1)额外空间，\u003c/strong\u003e并且\u003cstrong\u003e不修改\u003c/strong\u003e甲板的值来解决这个问题吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006771":{"ID":"15006771","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"14.3 MB","URL":"/submissions/detail/15006771/","Code":"class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for x,y in [ (x,y) for x in range(len(board)) for y in range(len(board[0]))][::-1]:\n            if board[x][y] == 'X':\n                if ((y \u003e 0 and board[x][y-1] != 'X') or y == 0) and ((x \u003e 0 and board[x-1][y] != 'X') or x == 0 ):\n                    count += 1\n        return count                \n        \n            \n        \n\n","Timestamp":"1552926036"},"1729293":{"ID":"1729293","StatusDisplay":"Accepted","Lang":"python","Runtime":"59 ms","Memory":"N/A","URL":"/submissions/detail/1729293/","Code":"class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for x,y in [ (x,y) for x in range(len(board)) for y in range(len(board[0]))][::-1]:\n            if board[x][y] == 'X':\n                if ((y \u003e 0 and board[x][y-1] != 'X') or y == 0) and ((x \u003e 0 and board[x-1][y] != 'X') or x == 0 ):\n                    count += 1\n        return count                \n        \n            \n        ","Timestamp":"1506586063"},"7572896":{"ID":"7572896","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7572896/","Code":"class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\"\n        count = 0\n        for x,y in [ (x,y) for x in range(len(board)) for y in range(len(board[0]))][::-1]:\n            if board[x][y] == 'X':\n                if ((y \u003e 0 and board[x][y-1] != 'X') or y == 0) and ((x \u003e 0 and board[x-1][y] != 'X') or x == 0 ):\n                    count += 1\n        return count                \n        \n            \n        \n","Timestamp":"1536218869"}}},{"questionId":"338","questionFrontendId":"338","Title":"Counting Bits","TitleSlug":"counting-bits","Content":"\u003cp\u003eGiven a non negative integer number \u003cb\u003enum\u003c/b\u003e. For every numbers \u003cb\u003ei\u003c/b\u003e in the range \u003cb\u003e0 \u0026le; i \u0026le; num\u003c/b\u003e calculate the number of 1\u0026#39;s in their binary representation and return them as an array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[0,1,1]\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e5\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003ccode\u003e[0,1,1,2,1,2]\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eIt is very easy to come up with a solution with run time \u003cb\u003eO(n*sizeof(integer))\u003c/b\u003e. But can you do it in linear time \u003cb\u003eO(n)\u003c/b\u003e /possibly in a single pass?\u003c/li\u003e\r\n\t\u003cli\u003eSpace complexity should be \u003cb\u003eO(n)\u003c/b\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eCan you do it like a boss? Do it without using any builtin function like \u003cb\u003e__builtin_popcount\u003c/b\u003e in c++ or in any other language.\u003c/li\u003e\r\n\u003c/ul\u003e","Difficulty":"Medium","TranslatedTitle":"比特位计数","TranslatedContent":"\u003cp\u003e给定一个非负整数\u0026nbsp;\u003cstrong\u003enum\u003c/strong\u003e。对于\u0026nbsp;\u003cstrong\u003e0 \u0026le; i \u0026le; num \u003c/strong\u003e范围中的每个数字\u0026nbsp;\u003cstrong\u003ei\u0026nbsp;\u003c/strong\u003e，计算其二进制数中的 1 的数目并将它们作为数组返回。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e2\n\u003cstrong\u003e输出: \u003c/strong\u003e[0,1,1]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e5\n\u003cstrong\u003e输出: \u003c/strong\u003e\u003ccode\u003e[0,1,1,2,1,2]\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给出时间复杂度为\u003cstrong\u003eO(n*sizeof(integer))\u003c/strong\u003e的解答非常容易。但你可以在线性时间\u003cstrong\u003eO(n)\u003c/strong\u003e内用一趟扫描做到吗？\u003c/li\u003e\n\t\u003cli\u003e要求算法的空间复杂度为\u003cstrong\u003eO(n)\u003c/strong\u003e。\u003c/li\u003e\n\t\u003cli\u003e你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的\u0026nbsp;\u003cstrong\u003e__builtin_popcount\u003c/strong\u003e）来执行此操作。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006744":{"ID":"15006744","StatusDisplay":"Accepted","Lang":"python","Runtime":"120 ms","Memory":"15.3 MB","URL":"/submissions/detail/15006744/","Code":"class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        return [ bin(x).count('1') for x in xrange(num+1)]\n\n","Timestamp":"1552925791"},"1729213":{"ID":"1729213","StatusDisplay":"Accepted","Lang":"python","Runtime":"212 ms","Memory":"N/A","URL":"/submissions/detail/1729213/","Code":"class Solution(object):\r\n    def countBits(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        list = [0]\r\n        while num \u003e len(list) - 1:\r\n            list += [a + 1 for a in list]\r\n        return list[0 : num + 1]\r\n        ","Timestamp":"1470308465"},"1729233":{"ID":"1729233","StatusDisplay":"Accepted","Lang":"python","Runtime":"202 ms","Memory":"N/A","URL":"/submissions/detail/1729233/","Code":"class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        return [ bin(x).count('1') for x in xrange(num+1)]","Timestamp":"1501256255"},"1729400":{"ID":"1729400","StatusDisplay":"Accepted","Lang":"python","Runtime":"218 ms","Memory":"N/A","URL":"/submissions/detail/1729400/","Code":"class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        return [ bin(x).count('1') for x in xrange(num+1)]","Timestamp":"1501256204"},"7572828":{"ID":"7572828","StatusDisplay":"Accepted","Lang":"python","Runtime":"120 ms","Memory":"N/A","URL":"/submissions/detail/7572828/","Code":"class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        return [ bin(x).count('1') for x in xrange(num+1)]\n","Timestamp":"1536218748"}}},{"questionId":"118","questionFrontendId":"118","Title":"Pascal's Triangle","TitleSlug":"pascals-triangle","Content":"\u003cp\u003eGiven a non-negative integer\u0026nbsp;\u003cem\u003enumRows\u003c/em\u003e, generate the first \u003cem\u003enumRows\u003c/em\u003e of Pascal\u0026#39;s triangle.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003eIn Pascal\u0026#39;s triangle, each number is the sum of the two numbers directly above it.\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 5\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"杨辉三角","TranslatedContent":"\u003cp\u003e给定一个非负整数\u0026nbsp;\u003cem\u003enumRows，\u003c/em\u003e生成杨辉三角的前\u0026nbsp;\u003cem\u003enumRows\u0026nbsp;\u003c/em\u003e行。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e在杨辉三角中，每个数是它左上方和右上方的数的和。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 5\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006653":{"ID":"15006653","StatusDisplay":"Accepted","Lang":"golang","Runtime":"0 ms","Memory":"2.2 MB","URL":"/submissions/detail/15006653/","Code":"func generate(numRows int) [][]int {\n\tres := make([][]int, numRows)\n\tfor r := 0; r \u003c numRows; r++ {\n\t\tres[r] = make([]int, r+1)\n\t\tif r == 0 {\n\t\t\tres[0][0] = 1\n\t\t} else {\n\t\t\tfor i := 0; i \u003c r+1; i++ {\n\t\t\t\tif (i == 0) || (i == r) {\n\t\t\t\t\tres[r][i] = 1\n\t\t\t\t} else {\n\t\t\t\t\tres[r][i] = res[r-1][i] + res[r-1][i-1]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n\n","Timestamp":"1552925071"},"1729319":{"ID":"1729319","StatusDisplay":"Accepted","Lang":"golang","Runtime":"0 ms","Memory":"N/A","URL":"/submissions/detail/1729319/","Code":"func generate(numRows int) [][]int {\n\tres := make([][]int, numRows)\n\tfor r := 0; r \u003c numRows; r++ {\n\t\tres[r] = make([]int, r+1)\n\t\tif r == 0 {\n\t\t\tres[0][0] = 1\n\t\t} else {\n\t\t\tfor i := 0; i \u003c r+1; i++ {\n\t\t\t\tif (i == 0) || (i == r) {\n\t\t\t\t\tres[r][i] = 1\n\t\t\t\t} else {\n\t\t\t\t\tres[r][i] = res[r-1][i] + res[r-1][i-1]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n","Timestamp":"1519640558"},"1729348":{"ID":"1729348","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/1729348/","Code":"class Solution:\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        for x in range(1, numRows+1):\n            if x == 1:\n                res.append([1])\n            else:\n                line = []\n                for i in range(x):\n                    if i == 0:\n                        line.append(1)\n                    elif i == x - 1:\n                        line.append(1)\n                    else:\n                        line.append(res[-1][i-1]+res[-1][i])\n                res.append(line)\n        return res\n    \n","Timestamp":"1519635389"},"7572729":{"ID":"7572729","StatusDisplay":"Accepted","Lang":"golang","Runtime":"0 ms","Memory":"N/A","URL":"/submissions/detail/7572729/","Code":"func generate(numRows int) [][]int {\n\tres := make([][]int, numRows)\n\tfor r := 0; r \u003c numRows; r++ {\n\t\tres[r] = make([]int, r+1)\n\t\tif r == 0 {\n\t\t\tres[0][0] = 1\n\t\t} else {\n\t\t\tfor i := 0; i \u003c r+1; i++ {\n\t\t\t\tif (i == 0) || (i == r) {\n\t\t\t\t\tres[r][i] = 1\n\t\t\t\t} else {\n\t\t\t\t\tres[r][i] = res[r-1][i] + res[r-1][i-1]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n","Timestamp":"1536218526"}}},{"questionId":"205","questionFrontendId":"205","Title":"Isomorphic Strings","TitleSlug":"isomorphic-strings","Content":"\u003cp\u003eGiven two strings \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e and \u003cb\u003e\u003ci\u003et\u003c/i\u003e\u003c/b\u003e, determine if they are isomorphic.\u003c/p\u003e\r\n\r\n\u003cp\u003eTwo strings are isomorphic if the characters in \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e can be replaced to get \u003cb\u003e\u003ci\u003et\u003c/i\u003e\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e = \u003ccode\u003e\u0026quot;egg\u0026quot;, \u003c/code\u003e\u003cb\u003e\u003ci\u003et = \u003c/i\u003e\u003c/b\u003e\u003ccode\u003e\u0026quot;add\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e = \u003ccode\u003e\u0026quot;foo\u0026quot;, \u003c/code\u003e\u003cb\u003e\u003ci\u003et = \u003c/i\u003e\u003c/b\u003e\u003ccode\u003e\u0026quot;bar\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e = \u003ccode\u003e\u0026quot;paper\u0026quot;, \u003c/code\u003e\u003cb\u003e\u003ci\u003et = \u003c/i\u003e\u003c/b\u003e\u003ccode\u003e\u0026quot;title\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nYou may assume both \u003cb\u003e\u003ci\u003es\u0026nbsp;\u003c/i\u003e\u003c/b\u003eand \u003cb\u003e\u003ci\u003et\u0026nbsp;\u003c/i\u003e\u003c/b\u003ehave the same length.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"同构字符串","TranslatedContent":"\u003cp\u003e给定两个字符串\u0026nbsp;\u003cem\u003e\u003cstrong\u003es\u0026nbsp;\u003c/strong\u003e\u003c/em\u003e和\u0026nbsp;\u003cstrong\u003e\u003cem\u003et\u003c/em\u003e\u003c/strong\u003e，判断它们是否是同构的。\u003c/p\u003e\n\n\u003cp\u003e如果\u0026nbsp;\u003cem\u003e\u003cstrong\u003es\u0026nbsp;\u003c/strong\u003e\u003c/em\u003e中的字符可以被替换得到\u0026nbsp;\u003cstrong\u003e\u003cem\u003et\u0026nbsp;\u003c/em\u003e\u003c/strong\u003e，那么这两个字符串是同构的。\u003c/p\u003e\n\n\u003cp\u003e所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cstrong\u003e\u003cem\u003es\u003c/em\u003e\u003c/strong\u003e = \u003ccode\u003e\u0026quot;egg\u0026quot;, \u003c/code\u003e\u003cstrong\u003e\u003cem\u003et = \u003c/em\u003e\u003c/strong\u003e\u003ccode\u003e\u0026quot;add\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cstrong\u003e\u003cem\u003es\u003c/em\u003e\u003c/strong\u003e = \u003ccode\u003e\u0026quot;foo\u0026quot;, \u003c/code\u003e\u003cstrong\u003e\u003cem\u003et = \u003c/em\u003e\u003c/strong\u003e\u003ccode\u003e\u0026quot;bar\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003cstrong\u003e\u003cem\u003es\u003c/em\u003e\u003c/strong\u003e = \u003ccode\u003e\u0026quot;paper\u0026quot;, \u003c/code\u003e\u003cstrong\u003e\u003cem\u003et = \u003c/em\u003e\u003c/strong\u003e\u003ccode\u003e\u0026quot;title\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003cbr\u003e\n你可以假设\u0026nbsp;\u003cem\u003e\u003cstrong\u003es\u0026nbsp;\u003c/strong\u003e\u003c/em\u003e和 \u003cstrong\u003e\u003cem\u003et \u003c/em\u003e\u003c/strong\u003e具有相同的长度。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15773258":{"ID":"15773258","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"13.3 MB","URL":"/submissions/detail/15773258/","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        d = {}\n        rd = {}\n        for x in range(len(s)):\n            if t[x] not in d:\n                d[t[x]] = s[x]\n            elif d[t[x]] != s[x]:\n                return False\n            if s[x] not in rd:\n                rd[s[x]] = t[x]\n            elif rd[s[x]] != t[x]:\n                return False\n            \n        return True","Timestamp":"1553773937"},"15773442":{"ID":"15773442","StatusDisplay":"Accepted","Lang":"python3","Runtime":"100 ms","Memory":"13.3 MB","URL":"/submissions/detail/15773442/","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        d = {}\n        rd = {}\n        for a, b in zip(s, t):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774069"},"15773462":{"ID":"15773462","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"13.4 MB","URL":"/submissions/detail/15773462/","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        d = {}\n        rd = {}\n        for a, b in zip(s, t):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774080"},"15773479":{"ID":"15773479","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"13.2 MB","URL":"/submissions/detail/15773479/","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        d = {}\n        rd = {}\n        for a, b in zip(s, t):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774088"},"15773493":{"ID":"15773493","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"13.2 MB","URL":"/submissions/detail/15773493/","Code":"class Solution:\n    def isIsomorphic(self, s: str, t: str) -\u003e bool:\n        d = {}\n        rd = {}\n        for a, b in zip(s, t):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774096"}}},{"questionId":"1019","questionFrontendId":"977","Title":"Squares of a Sorted Array","TitleSlug":"squares-of-a-sorted-array","Content":"\u003cp\u003eGiven an array of integers \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;sorted in non-decreasing order,\u0026nbsp;return an array of the squares of each number,\u0026nbsp;also in sorted non-decreasing order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[-4,-1,0,3,10]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[0,1,9,16,100]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[-7,-3,2,3,11]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[4,9,9,49,121]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan\u003eNote:\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cspan\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;is sorted in non-decreasing order.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"有序数组的平方","TranslatedContent":"\u003cp\u003e给定一个按非递减顺序排序的整数数组 \u003ccode\u003eA\u003c/code\u003e，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[-4,-1,0,3,10]\n\u003cstrong\u003e输出：\u003c/strong\u003e[0,1,9,16,100]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[-7,-3,2,3,11]\n\u003cstrong\u003e输出：\u003c/strong\u003e[4,9,9,49,121]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;已按非递减顺序排序。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12608719":{"ID":"12608719","StatusDisplay":"Accepted","Lang":"python3","Runtime":"180 ms","Memory":"12.2 MB","URL":"/submissions/detail/12608719/","Code":"#\n# @lc app=leetcode.cn id=977 lang=python3\n#\n# [977] 不同的子序列 II\n#\n# https://leetcode-cn.com/problems/squares-of-a-sorted-array/description/\n#\n# algorithms\n# Easy (74.20%)\n# Total Accepted:    1.8K\n# Total Submissions: 2.4K\n# Testcase Example:  '[-4,-1,0,3,10]'\n#\n# 给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[-4,-1,0,3,10]\n# 输出：[0,1,9,16,100]\n# \n# \n# 示例 2：\n# \n# 输入：[-7,-3,2,3,11]\n# 输出：[4,9,9,49,121]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# A 已按非递减顺序排序。\n# \n# \n#\nclass Solution:\n    def sortedSquares(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        c = [x*x for x in A]\n        c.sort()\n        return c\n\n        \n","Timestamp":"1549954876"},"12608837":{"ID":"12608837","StatusDisplay":"Accepted","Lang":"python3","Runtime":"204 ms","Memory":"10.9 MB","URL":"/submissions/detail/12608837/","Code":"#\n# @lc app=leetcode.cn id=977 lang=python3\n#\n# [977] 不同的子序列 II\n#\n# https://leetcode-cn.com/problems/squares-of-a-sorted-array/description/\n#\n# algorithms\n# Easy (74.20%)\n# Total Accepted:    1.8K\n# Total Submissions: 2.4K\n# Testcase Example:  '[-4,-1,0,3,10]'\n#\n# 给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[-4,-1,0,3,10]\n# 输出：[0,1,9,16,100]\n# \n# \n# 示例 2：\n# \n# 输入：[-7,-3,2,3,11]\n# 输出：[4,9,9,49,121]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# A 已按非递减顺序排序。\n# \n# \n#\nclass Solution:\n    def sortedSquares(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(A)):\n            A[i] = A[i] ** 2\n        \n        A.sort()\n        return A\n\n        \n","Timestamp":"1549954942"},"12608896":{"ID":"12608896","StatusDisplay":"Accepted","Lang":"python3","Runtime":"192 ms","Memory":"10.9 MB","URL":"/submissions/detail/12608896/","Code":"#\n# @lc app=leetcode.cn id=977 lang=python3\n#\n# [977] 不同的子序列 II\n#\n# https://leetcode-cn.com/problems/squares-of-a-sorted-array/description/\n#\n# algorithms\n# Easy (74.20%)\n# Total Accepted:    1.8K\n# Total Submissions: 2.4K\n# Testcase Example:  '[-4,-1,0,3,10]'\n#\n# 给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[-4,-1,0,3,10]\n# 输出：[0,1,9,16,100]\n# \n# \n# 示例 2：\n# \n# 输入：[-7,-3,2,3,11]\n# 输出：[4,9,9,49,121]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# A 已按非递减顺序排序。\n# \n# \n#\nclass Solution:\n    def sortedSquares(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(A)):\n            A[i] = A[i] * A[i]\n        \n        A.sort()\n        return A\n\n        \n","Timestamp":"1549954975"},"15006943":{"ID":"15006943","StatusDisplay":"Accepted","Lang":"python3","Runtime":"164 ms","Memory":"14.7 MB","URL":"/submissions/detail/15006943/","Code":"#\n# @lc app=leetcode.cn id=977 lang=python3\n#\n# [977] 不同的子序列 II\n#\n# https://leetcode-cn.com/problems/squares-of-a-sorted-array/description/\n#\n# algorithms\n# Easy (74.20%)\n# Total Accepted:    1.8K\n# Total Submissions: 2.4K\n# Testcase Example:  '[-4,-1,0,3,10]'\n#\n# 给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[-4,-1,0,3,10]\n# 输出：[0,1,9,16,100]\n# \n# \n# 示例 2：\n# \n# 输入：[-7,-3,2,3,11]\n# 输出：[4,9,9,49,121]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# A 已按非递减顺序排序。\n# \n# \n#\nclass Solution:\n    def sortedSquares(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(A)):\n            A[i] = A[i] * A[i]\n        \n        A.sort()\n        return A\n\n        \n\n","Timestamp":"1552927938"}}},{"questionId":"67","questionFrontendId":"67","Title":"Add Binary","TitleSlug":"add-binary","Content":"\u003cp\u003eGiven two binary strings, return their sum (also a binary string).\u003c/p\u003e\r\n\r\n\u003cp\u003eThe input strings are both \u003cstrong\u003enon-empty\u003c/strong\u003e and contains only characters \u003ccode\u003e1\u003c/code\u003e or\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e a = \u0026quot;11\u0026quot;, b = \u0026quot;1\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;100\u0026quot;\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e a = \u0026quot;1010\u0026quot;, b = \u0026quot;1011\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;10101\u0026quot;\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"二进制求和","TranslatedContent":"\u003cp\u003e给定两个二进制字符串，返回他们的和（用二进制表示）。\u003c/p\u003e\n\n\u003cp\u003e输入为\u003cstrong\u003e非空\u003c/strong\u003e字符串且只包含数字\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e a = \u0026quot;11\u0026quot;, b = \u0026quot;1\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;100\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e a = \u0026quot;1010\u0026quot;, b = \u0026quot;1011\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;10101\u0026quot;\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006838":{"ID":"15006838","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006838/","Code":"class Solution:\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        return str(bin(int(a, 2) + int(b, 2))).replace('0b', '')\n\n\n","Timestamp":"1552927053"},"1729299":{"ID":"1729299","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1729299/","Code":"class Solution:\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        return str(bin(int(a, 2) + int(b, 2))).replace('0b', '')\n","Timestamp":"1521092629"},"7572708":{"ID":"7572708","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7572708/","Code":"class Solution:\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        return str(bin(int(a, 2) + int(b, 2))).replace('0b', '')\n\n","Timestamp":"1536218360"}}},{"questionId":"965","questionFrontendId":"929","Title":"Unique Email Addresses","TitleSlug":"unique-email-addresses","Content":"\u003cp\u003eEvery email consists of a local name and a domain name, separated by the @ sign.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, in \u003ccode\u003ealice@leetcode.com\u003c/code\u003e,\u0026nbsp;\u003ccode\u003ealice\u003c/code\u003e is the local name, and \u003ccode\u003eleetcode.com\u003c/code\u003e is the domain name.\u003c/p\u003e\r\n\r\n\u003cp\u003eBesides lowercase letters, these emails may contain \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003es or \u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003es.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf you add periods (\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e) between some characters in the \u003cstrong\u003elocal name\u003c/strong\u003e part of an email address, mail sent there will be forwarded to the same address without dots in the local name.\u0026nbsp; For example, \u003ccode\u003e\u0026quot;alice.z@leetcode.com\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;alicez@leetcode.com\u0026quot;\u003c/code\u003e forward to the same email address.\u0026nbsp; (Note that this rule does not apply for domain names.)\u003c/p\u003e\r\n\r\n\u003cp\u003eIf you add a plus (\u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e) in the \u003cstrong\u003elocal name\u003c/strong\u003e, everything after the first plus sign will be\u0026nbsp;\u003cstrong\u003eignored\u003c/strong\u003e. This allows certain emails to be filtered, for example\u0026nbsp;\u003ccode\u003em.y+name@email.com\u003c/code\u003e\u0026nbsp;will be forwarded to\u0026nbsp;\u003ccode\u003emy@email.com\u003c/code\u003e.\u0026nbsp; (Again, this rule does not apply for domain names.)\u003c/p\u003e\r\n\r\n\u003cp\u003eIt is possible to use both of these rules at the same time.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a list of \u003ccode\u003eemails\u003c/code\u003e, we send one email to each address in the list.\u0026nbsp;\u0026nbsp;How many different addresses actually receive mails?\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;test.email+alex@leetcode.com\u0026quot;,\u0026quot;test.e.mail+bob.cathy@leetcode.com\u0026quot;,\u0026quot;testemail+david@lee.tcode.com\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003e\u003cspan\u003eExplanation:\u003c/span\u003e\u003c/strong\u003e\u003cspan\u003e\u0026nbsp;\u0026quot;\u003c/span\u003e\u003cspan id=\"example-input-1-1\"\u003etestemail@leetcode.com\u0026quot; and \u0026quot;testemail@lee.tcode.com\u0026quot; \u003c/span\u003eactually receive mails\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= emails[i].length\u0026nbsp;\u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= emails.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eEach \u003ccode\u003eemails[i]\u003c/code\u003e contains exactly one \u003ccode\u003e\u0026#39;@\u0026#39;\u003c/code\u003e character.\u003c/li\u003e\r\n\t\u003cli\u003eAll local and domain names are non-empty.\u003c/li\u003e\r\n\t\u003cli\u003eLocal names do not start with a \u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e character.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"独特的电子邮件地址","TranslatedContent":"\u003cp\u003e每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。\u003c/p\u003e\n\n\u003cp\u003e例如，在\u0026nbsp;\u003ccode\u003ealice@leetcode.com\u003c/code\u003e中，\u0026nbsp;\u003ccode\u003ealice\u003c/code\u003e\u0026nbsp;是本地名称，而\u0026nbsp;\u003ccode\u003eleetcode.com\u003c/code\u003e\u0026nbsp;是域名。\u003c/p\u003e\n\n\u003cp\u003e除了小写字母，这些电子邮件还可能包含 \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e 或 \u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e如果在电子邮件地址的\u003cstrong\u003e本地名称\u003c/strong\u003e部分中的某些字符之间添加句点（\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，\u003ccode\u003e\u0026quot;alice.z@leetcode.com\u0026rdquo;\u003c/code\u003e 和 \u003ccode\u003e\u0026ldquo;alicez@leetcode.com\u0026rdquo;\u003c/code\u003e\u0026nbsp;会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）\u003c/p\u003e\n\n\u003cp\u003e如果在\u003cstrong\u003e本地名称\u003c/strong\u003e中添加加号（\u003ccode\u003e\u0026#39;+\u0026#39;\u003c/code\u003e），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 \u003ccode\u003em.y+name@email.com\u003c/code\u003e 将转发到 \u003ccode\u003emy@email.com\u003c/code\u003e。 （同样，此规则不适用于域名。）\u003c/p\u003e\n\n\u003cp\u003e可以同时使用这两个规则。\u003c/p\u003e\n\n\u003cp\u003e给定电子邮件列表 \u003ccode\u003eemails\u003c/code\u003e，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;test.email+alex@leetcode.com\u0026quot;,\u0026quot;test.e.mail+bob.cathy@leetcode.com\u0026quot;,\u0026quot;testemail+david@lee.tcode.com\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e实际收到邮件的是 \u0026quot;testemail@leetcode.com\u0026quot; 和 \u0026quot;testemail@lee.tcode.com\u0026quot;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= emails[i].length\u0026nbsp;\u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= emails.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e每封 \u003ccode\u003eemails[i]\u003c/code\u003e 都包含有且仅有一个 \u003ccode\u003e\u0026#39;@\u0026#39;\u003c/code\u003e 字符。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006923":{"ID":"15006923","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006923/","Code":"class Solution:\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        res = set()\n        for email in emails:\n            local, host = email.split('@')\n            res.add(local.split('+')[0].replace('.','')+'@'+host)\n        return len(res)\n            \n","Timestamp":"1552927743"},"9315762":{"ID":"9315762","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/9315762/","Code":"class Solution:\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        res = set()\n        for email in emails:\n            local, host = email.split('@')\n            res.add(local.split('+')[0].replace('.','')+'@'+host)\n        return len(res)\n            ","Timestamp":"1542082636"},"9315768":{"ID":"9315768","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/9315768/","Code":"class Solution:\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        res = set()\n        for email in emails:\n            local, host = email.split('@')\n            res.add(local.split('+')[0].replace('.','')+'@'+host)\n        return len(res)\n            ","Timestamp":"1542082644"}}},{"questionId":"5","questionFrontendId":"5","Title":"Longest Palindromic Substring","TitleSlug":"longest-palindromic-substring","Content":"\u003cp\u003eGiven a string \u003cstrong\u003es\u003c/strong\u003e, find the longest palindromic substring in \u003cstrong\u003es\u003c/strong\u003e. You may assume that the maximum length of \u003cstrong\u003es\u003c/strong\u003e is 1000.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;babad\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;bab\u0026quot;\r\n\u003cstrong\u003eNote:\u003c/strong\u003e \u0026quot;aba\u0026quot; is also a valid answer.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;cbbd\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;bb\u0026quot;\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"最长回文子串","TranslatedContent":"\u003cp\u003e给定一个字符串 \u003ccode\u003es\u003c/code\u003e，找到 \u003ccode\u003es\u003c/code\u003e 中最长的回文子串。你可以假设\u0026nbsp;\u003ccode\u003es\u003c/code\u003e 的最大长度为 1000。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;babad\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;bab\u0026quot;\n\u003cstrong\u003e注意:\u003c/strong\u003e \u0026quot;aba\u0026quot; 也是一个有效答案。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;cbbd\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;bb\u0026quot;\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11172338":{"ID":"11172338","StatusDisplay":"Accepted","Lang":"python3","Runtime":"2052 ms","Memory":"6.4 MB","URL":"/submissions/detail/11172338/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        l = len(s)\n        # 单字符扩展\n        for i in range(l):\n            k = 0\n            while i - k \u003e= 0 and i + k \u003c l:\n                if s[i-k] == s[i+k]:\n                    if 2*k+1 \u003e len(res):\n                        res = s[i-k:i+k+1]\n                else:\n                    break\n                k += 1\n                \n        \n        # 双字符扩展\n        for i in range(l-1):\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e len(res):\n                        res = s[i-k:i+k+2]\n                else:\n                    break\n                k += 1\n        return res","Timestamp":"1546500081"},"11172350":{"ID":"11172350","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1916 ms","Memory":"6.5 MB","URL":"/submissions/detail/11172350/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        l = len(s)\n        # 单字符扩展\n        for i in range(l):\n            k = 0\n            while i - k \u003e= 0 and i + k \u003c l:\n                if s[i-k] == s[i+k]:\n                    if 2*k+1 \u003e len(res):\n                        res = s[i-k:i+k+1]\n                else:\n                    break\n                k += 1\n                \n        \n        # 双字符扩展\n        for i in range(l-1):\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e len(res):\n                        res = s[i-k:i+k+2]\n                else:\n                    break\n                k += 1\n        return res","Timestamp":"1546500092"},"11172538":{"ID":"11172538","StatusDisplay":"Accepted","Lang":"python3","Runtime":"836 ms","Memory":"6.5 MB","URL":"/submissions/detail/11172538/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        res = \"\"\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = 0\n            while i - k \u003e= 0 and i + k \u003c l:\n                if s[i-k] == s[i+k]:\n                    if 2*k+1 \u003e max_len:\n                        res = s[i-k:i+k+1]\n                        max_len = len(res)\n                else:\n                    break\n                k += 1\n                \n        \n        # 双字符扩展\n        for i in range(l-1):\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e max_len:\n                        res = s[i-k:i+k+2]\n                        max_len = len(res)\n                else:\n                    break\n                k += 1\n        return res","Timestamp":"1546500275"},"11172652":{"ID":"11172652","StatusDisplay":"Accepted","Lang":"python3","Runtime":"872 ms","Memory":"6.4 MB","URL":"/submissions/detail/11172652/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        res = \"\"\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = 0\n            while i - k \u003e= 0 and i + k \u003c l:\n                if s[i-k] == s[i+k]:\n                    if 2*k+1 \u003e max_len:\n                        res = s[i-k:i+k+1]\n                        max_len = len(res)\n                else:\n                    break\n                k += 1\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e max_len:\n                        res = s[i-k:i+k+2]\n                        max_len = len(res)\n                else:\n                    break\n                k += 1\n                \n        return res","Timestamp":"1546500362"},"11172922":{"ID":"11172922","StatusDisplay":"Accepted","Lang":"python3","Runtime":"408 ms","Memory":"6.4 MB","URL":"/submissions/detail/11172922/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        start = 0\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = 0\n            while i - k \u003e= 0 and i + k \u003c l:\n                if s[i-k] == s[i+k]:\n                    if 2*k+1 \u003e max_len:\n                        start = i-k\n                        max_len = 2*k+1\n                else:\n                    break\n                k += 1\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e max_len:\n                        start = i-k\n                        max_len = 2*k+2\n                else:\n                    break\n                k += 1\n                \n        return s[start:start+max_len]","Timestamp":"1546500578"},"11173600":{"ID":"11173600","StatusDisplay":"Accepted","Lang":"python3","Runtime":"260 ms","Memory":"6.5 MB","URL":"/submissions/detail/11173600/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        start = 0\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = max_len // 2\n            while i - k \u003e= 0 and i + k \u003c l and s[i-k:i+k+1] == s[i-k:i+k+1][::-1]:\n                start = i-k\n                max_len = 2*k+1\n                k += 1\n            k = 0\n            while i - k \u003e= 0 and i+1 + k \u003c l:\n                if s[i-k] == s[i+1+k]:\n                    if 2*k+2 \u003e max_len:\n                        start = i-k\n                        max_len = 2*k+2\n                else:\n                    break\n                k += 1\n                \n        return s[start:start+max_len]","Timestamp":"1546501088"},"11173692":{"ID":"11173692","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"6.5 MB","URL":"/submissions/detail/11173692/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        start = 0\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = max_len // 2\n            while i - k \u003e= 0 and i + k \u003c l and s[i-k:i+k+1] == s[i-k:i+k+1][::-1]:\n                start = i-k\n                max_len = 2*k+1\n                k += 1\n            k = max_len // 2\n            while i - k \u003e= 0 and i + 1 + k \u003c l and s[i-k:i+k+2] == s[i-k:i+k+2][::-1]:\n                start = i-k\n                max_len = 2*k+2\n                k += 1   \n        return s[start:start+max_len]","Timestamp":"1546501150"},"11173714":{"ID":"11173714","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"6.4 MB","URL":"/submissions/detail/11173714/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        start = 0\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = max_len // 2\n            while i - k \u003e= 0 and i + k \u003c l and s[i-k:i+k+1] == s[i-k:i+k+1][::-1]:\n                start = i-k\n                max_len = 2*k+1\n                k += 1\n            k = max_len // 2\n            while i - k \u003e= 0 and i + 1 + k \u003c l and s[i-k:i+k+2] == s[i-k:i+k+2][::-1]:\n                start = i-k\n                max_len = 2*k+2\n                k += 1   \n        return s[start:start+max_len]","Timestamp":"1546501164"},"15006797":{"ID":"15006797","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006797/","Code":"class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        l = len(s)\n        if l \u003c 2 or s == s[::-1]:\n            return s\n        \n        start = 0\n        max_len = 0\n        # 单字符扩展\n        for i in range(l):\n            k = max_len // 2\n            while i - k \u003e= 0 and i + k \u003c l and s[i-k:i+k+1] == s[i-k:i+k+1][::-1]:\n                start = i-k\n                max_len = 2*k+1\n                k += 1\n            k = max_len // 2\n            while i - k \u003e= 0 and i + 1 + k \u003c l and s[i-k:i+k+2] == s[i-k:i+k+2][::-1]:\n                start = i-k\n                max_len = 2*k+2\n                k += 1   \n        return s[start:start+max_len]\n","Timestamp":"1552926719"}}},{"questionId":"27","questionFrontendId":"27","Title":"Remove Element","TitleSlug":"remove-element","Content":"\u003cp\u003eGiven an array \u003cem\u003enums\u003c/em\u003e and a value \u003cem\u003eval\u003c/em\u003e, remove all instances of that value \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003e\u003cstrong\u003ein-place\u003c/strong\u003e\u003c/a\u003e and return the new length.\u003c/p\u003e\r\n\r\n\u003cp\u003eDo not allocate extra space for another array, you must do this by \u003cstrong\u003emodifying the input array \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003ein-place\u003c/a\u003e\u003c/strong\u003e with O(1) extra memory.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe order of elements can be changed. It doesn\u0026#39;t matter what you leave beyond the new length.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[3,2,2,3]\u003c/strong\u003e, \u003cem\u003eval\u003c/em\u003e = \u003cstrong\u003e3\u003c/strong\u003e,\r\n\r\nYour function should return length = \u003cstrong\u003e2\u003c/strong\u003e, with the first two elements of \u003cem\u003enums\u003c/em\u003e being \u003cstrong\u003e2\u003c/strong\u003e.\r\n\r\nIt doesn\u0026#39;t matter what you leave beyond the returned length.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[0,1,2,2,3,0,4,2]\u003c/strong\u003e, \u003cem\u003eval\u003c/em\u003e = \u003cstrong\u003e2\u003c/strong\u003e,\r\n\r\nYour function should return length = \u003cstrong\u003e\u003ccode\u003e5\u003c/code\u003e\u003c/strong\u003e, with the first five elements of \u003cem\u003e\u003ccode\u003enums\u003c/code\u003e\u003c/em\u003e containing\u0026nbsp;\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, and\u0026nbsp;\u003cstrong\u003e4\u003c/strong\u003e.\r\n\r\nNote that the order of those five elements can be arbitrary.\r\n\r\nIt doesn\u0026#39;t matter what values are set beyond\u0026nbsp;the returned length.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eClarification:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eConfused why the returned value is an integer but your answer is an array?\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that the input array is passed in by \u003cstrong\u003ereference\u003c/strong\u003e, which means modification to the input array will be known to the caller as well.\u003c/p\u003e\r\n\r\n\u003cp\u003eInternally you can think of this:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n// \u003cstrong\u003enums\u003c/strong\u003e is passed in by reference. (i.e., without making a copy)\r\nint len = removeElement(nums, val);\r\n\r\n// any modification to \u003cstrong\u003enums\u003c/strong\u003e in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first \u003cstrong\u003elen\u003c/strong\u003e elements.\r\nfor (int i = 0; i \u0026lt; len; i++) {\r\n\u0026nbsp; \u0026nbsp; print(nums[i]);\r\n}\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"移除元素","TranslatedContent":"\u003cp\u003e给定一个数组 \u003cem\u003enums\u0026nbsp;\u003c/em\u003e和一个值 \u003cem\u003eval\u003c/em\u003e，你需要\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e\u003c/strong\u003e移除所有数值等于\u0026nbsp;\u003cem\u003eval\u0026nbsp;\u003c/em\u003e的元素，返回移除后数组的新长度。\u003c/p\u003e\n\n\u003cp\u003e不要使用额外的数组空间，你必须在\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e修改输入数组\u003c/strong\u003e并在使用 O(1) 额外空间的条件下完成。\u003c/p\u003e\n\n\u003cp\u003e元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[3,2,2,3]\u003c/strong\u003e, \u003cem\u003eval\u003c/em\u003e = \u003cstrong\u003e3\u003c/strong\u003e,\n\n函数应该返回新的长度 \u003cstrong\u003e2\u003c/strong\u003e, 并且 \u003cem\u003enums \u003c/em\u003e中的前两个元素均为 \u003cstrong\u003e2\u003c/strong\u003e。\n\n你不需要考虑数组中超出新长度后面的元素。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[0,1,2,2,3,0,4,2]\u003c/strong\u003e, \u003cem\u003eval\u003c/em\u003e = \u003cstrong\u003e2\u003c/strong\u003e,\n\n函数应该返回新的长度 \u003cstrong\u003e\u003ccode\u003e5\u003c/code\u003e\u003c/strong\u003e, 并且 \u003cem\u003enums \u003c/em\u003e中的前五个元素为 \u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e4\u003c/strong\u003e。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e为什么返回数值是整数，但输出的答案是数组呢?\u003c/p\u003e\n\n\u003cp\u003e请注意，输入数组是以\u003cstrong\u003e\u0026ldquo;引用\u0026rdquo;\u003c/strong\u003e方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\u003c/p\u003e\n\n\u003cp\u003e你可以想象内部操作如下:\u003c/p\u003e\n\n\u003cpre\u003e// \u003cstrong\u003enums\u003c/strong\u003e 是以\u0026ldquo;引用\u0026rdquo;方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中\u003cstrong\u003e该长度范围内\u003c/strong\u003e的所有元素。\nfor (int i = 0; i \u0026lt; len; i++) {\n\u0026nbsp; \u0026nbsp; print(nums[i]);\n}\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"10899711":{"ID":"10899711","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.4 MB","URL":"/submissions/detail/10899711/","Code":"class Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        cal = 0\n        for i in range(len(nums) -1, -1 , -1):\n            if nums[i] == val:\n                cal += 1\n                for x in range(i ,len(nums) -1):\n                    nums[x], nums[x+1] = nums[x+1], nums[x]\n        return len(nums) - cal","Timestamp":"1545817765"},"11342349":{"ID":"11342349","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.5 MB","URL":"/submissions/detail/11342349/","Code":"class Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        cal = 0\n        for i in range(len(nums) -1, -1 , -1):\n            if nums[i] == val:\n                cal += 1\n                for x in range(i ,len(nums) -1):\n                    nums[x], nums[x+1] = nums[x+1], nums[x]\n        return len(nums) - cal","Timestamp":"1546852438"},"15006730":{"ID":"15006730","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006730/","Code":"class Solution:\n    def removeElement(self, nums, val):\n        \"\"\"\n        :type nums: List[int]\n        :type val: int\n        :rtype: int\n        \"\"\"\n        cal = 0\n        for i in range(len(nums) -1, -1 , -1):\n            if nums[i] == val:\n                cal += 1\n                for x in range(i ,len(nums) -1):\n                    nums[x], nums[x+1] = nums[x+1], nums[x]\n        return len(nums) - cal\n","Timestamp":"1552925677"}}},{"questionId":"981","questionFrontendId":"944","Title":"Delete Columns to Make Sorted","TitleSlug":"delete-columns-to-make-sorted","Content":"\u003cp\u003eWe are given an array\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e of \u003ccode\u003eN\u003c/code\u003e lowercase letter strings, all of the same length.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, if we have an array \u003ccode\u003eA = [\u0026quot;\u003c/code\u003e\u003ccode\u003eabcdef\u003c/code\u003e\u003ccode\u003e\u0026quot;,\u0026quot;uvwxyz\u0026quot;]\u003c/code\u003e and deletion indices \u003ccode\u003e{0, 2, 3}\u003c/code\u003e, then the final array after deletions is \u003ccode\u003e[\u0026quot;bef\u0026quot;, \u0026quot;vyz\u0026quot;]\u003c/code\u003e,\u0026nbsp;and the remaining columns of \u003ccode\u003eA\u003c/code\u003e are\u0026nbsp;\u003ccode\u003e[\u0026quot;b\u0026quot;\u003c/code\u003e\u003ccode\u003e,\u0026quot;\u003c/code\u003e\u003ccode\u003ev\u0026quot;]\u003c/code\u003e, \u003ccode\u003e[\u0026quot;e\u0026quot;,\u0026quot;y\u0026quot;]\u003c/code\u003e, and \u003ccode\u003e[\u0026quot;f\u0026quot;,\u0026quot;z\u0026quot;]\u003c/code\u003e.\u0026nbsp; (Formally, the \u003ccode\u003ec\u003c/code\u003e-th column is \u003ccode\u003e[A[0][c], A[1][c], ..., A[A.length-1][c]]\u003c/code\u003e.)\u003c/p\u003e\r\n\r\n\u003cp\u003eSuppose we chose a set of deletion indices \u003ccode\u003eD\u003c/code\u003e such that after deletions, each remaining column in A is in \u003cstrong\u003enon-decreasing\u003c/strong\u003e sorted order.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the minimum possible value of \u003ccode\u003eD.length\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;cba\u0026quot;,\u0026quot;daf\u0026quot;,\u0026quot;ghi\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nAfter choosing D = {1}, each column [\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;,\u0026quot;g\u0026quot;] and [\u0026quot;a\u0026quot;,\u0026quot;f\u0026quot;,\u0026quot;i\u0026quot;] are in non-decreasing sorted order.\r\nIf we chose D = {}, then a column [\u0026quot;b\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;] would not be in non-decreasing sorted order.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eD = {}\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[\u0026quot;zyx\u0026quot;,\u0026quot;wvu\u0026quot;,\u0026quot;tsr\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eD = {0, 1, 2}\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan\u003eNote:\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i].length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"删列造序","TranslatedContent":"\u003cp\u003e给定由\u0026nbsp;\u003ccode\u003eN\u003c/code\u003e\u0026nbsp;个小写字母字符串组成的数组 \u003ccode\u003eA\u003c/code\u003e，其中每个字符串长度相等。\u003c/p\u003e\n\n\u003cp\u003e选取一个删除索引序列，对于 \u003ccode\u003eA\u003c/code\u003e 中的每个字符串，删除对应每个索引处的字符。 所余下的字符串行从上往下读形成列。\u003c/p\u003e\n\n\u003cp\u003e比如，有\u0026nbsp;\u003ccode\u003eA = [\u0026quot;abcdef\u0026quot;, \u0026quot;uvwxyz\u0026quot;]\u003c/code\u003e，删除索引序列\u0026nbsp;\u003ccode\u003e{0, 2, 3}\u003c/code\u003e，删除后 \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;为\u003ccode\u003e[\u0026quot;bef\u0026quot;, \u0026quot;vyz\u0026quot;]\u003c/code\u003e， \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;的列分别为\u003ccode\u003e[\u0026quot;b\u0026quot;,\u0026quot;v\u0026quot;], [\u0026quot;e\u0026quot;,\u0026quot;y\u0026quot;], [\u0026quot;f\u0026quot;,\u0026quot;z\u0026quot;]\u003c/code\u003e。（形式上，第 n\u0026nbsp;列为\u0026nbsp;\u003ccode\u003e[A[0][n], A[1][n], ..., A[A.length-1][n]]\u003c/code\u003e）。\u003c/p\u003e\n\n\u003cp\u003e假设，我们选择了一组删除索引\u0026nbsp;\u003ccode\u003eD\u003c/code\u003e，那么在执行删除操作之后，\u003ccode\u003eA\u003c/code\u003e 中所剩余的每一列都必须是 \u003cstrong\u003e非降序\u003c/strong\u003e\u0026nbsp;排列的，然后请你返回\u0026nbsp;\u003ccode\u003eD.length\u003c/code\u003e\u0026nbsp;的最小可能值。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;cba\u0026quot;, \u0026quot;daf\u0026quot;, \u0026quot;ghi\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003e\n当选择 D = {1}，删除后 A 的列为：[\u0026quot;c\u0026quot;,\u0026quot;d\u0026quot;,\u0026quot;g\u0026quot;] 和 [\u0026quot;a\u0026quot;,\u0026quot;f\u0026quot;,\u0026quot;i\u0026quot;]，均为非降序排列。\n若选择 D = {}，那么 A 的列 [\u0026quot;b\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;] 就不是非降序排列了。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003cstrong\u003e解释：\u003c/strong\u003eD = {}\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;zyx\u0026quot;, \u0026quot;wvu\u0026quot;, \u0026quot;tsr\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003eD = {0, 1, 2}\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i].length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"10943557":{"ID":"10943557","StatusDisplay":"Accepted","Lang":"python3","Runtime":"264 ms","Memory":"7.1 MB","URL":"/submissions/detail/10943557/","Code":"class Solution:\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        D = set()\n        for x in range(len(A[0])):\n            t = A[0][x]\n            for i in range(len(A)-1):\n                if A[i+1][x] \u003e= t:\n                    t = A[i+1][x]\n                else:\n                    D.add(x)\n        return len(D)\n            \n                ","Timestamp":"1545902647"},"15006930":{"ID":"15006930","StatusDisplay":"Accepted","Lang":"python","Runtime":"208 ms","Memory":"11.6 MB","URL":"/submissions/detail/15006930/","Code":"class Solution:\n    def minDeletionSize(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        D = set()\n        for x in range(len(A[0])):\n            t = A[0][x]\n            for i in range(len(A)-1):\n                if A[i+1][x] \u003e= t:\n                    t = A[i+1][x]\n                else:\n                    D.add(x)\n        return len(D)\n            \n                \n","Timestamp":"1552927812"}}},{"questionId":"1027","questionFrontendId":"985","Title":"Sum of Even Numbers After Queries","TitleSlug":"sum-of-even-numbers-after-queries","Content":"\u003cp\u003eWe have an array \u003ccode\u003eA\u003c/code\u003e of integers, and an array \u003ccode\u003equeries\u003c/code\u003e\u0026nbsp;of queries.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor the \u003ccode\u003ei\u003c/code\u003e-th\u0026nbsp;query \u003ccode\u003eval =\u0026nbsp;queries[i][0], index\u0026nbsp;= queries[i][1]\u003c/code\u003e, we add \u003cfont face=\"monospace\"\u003eval\u003c/font\u003e\u0026nbsp;to \u003ccode\u003eA[index]\u003c/code\u003e.\u0026nbsp; Then, the answer to the \u003ccode\u003ei\u003c/code\u003e-th query is the sum of the even values of \u003ccode\u003eA\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cem\u003e(Here, the given \u003ccode\u003eindex = queries[i][1]\u003c/code\u003e is a 0-based index, and each query permanently modifies the array \u003ccode\u003eA\u003c/code\u003e.)\u003c/em\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the answer to all queries.\u0026nbsp; Your \u003ccode\u003eanswer\u003c/code\u003e array should have\u0026nbsp;\u003ccode\u003eanswer[i]\u003c/code\u003e\u0026nbsp;as\u0026nbsp;the answer to the \u003ccode\u003ei\u003c/code\u003e-th query.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-1-1\"\u003e[1,2,3,4]\u003c/span\u003e, queries = \u003cspan id=\"example-input-1-2\"\u003e[[1,0],[-3,1],[-4,0],[2,3]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[8,6,2,4]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nAt the beginning, the array is [1,2,3,4].\r\nAfter adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\r\nAfter adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\r\nAfter adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\r\nAfter adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= queries[i][0] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= queries[i][1] \u0026lt; A.length\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"查询后的偶数和","TranslatedContent":"\u003cp\u003e给出一个整数数组\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;和一个查询数组\u0026nbsp;\u003ccode\u003equeries\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e对于第\u0026nbsp;\u003ccode\u003ei\u003c/code\u003e\u0026nbsp;次查询，有\u0026nbsp;\u003ccode\u003eval =\u0026nbsp;queries[i][0], index\u0026nbsp;= queries[i][1]\u003c/code\u003e，我们会把\u0026nbsp;\u003ccode\u003eval\u003c/code\u003e\u0026nbsp;加到\u0026nbsp;\u003ccode\u003eA[index]\u003c/code\u003e\u0026nbsp;上。然后，第\u0026nbsp;\u003ccode\u003ei\u003c/code\u003e\u0026nbsp;次查询的答案是 \u003ccode\u003eA\u003c/code\u003e 中偶数值的和。\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e（此处给定的\u0026nbsp;\u003ccode\u003eindex = queries[i][1]\u003c/code\u003e\u0026nbsp;是从 0 开始的索引，每次查询都会永久修改数组\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e。）\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e返回所有查询的答案。你的答案应当以数组\u0026nbsp;\u003ccode\u003eanswer\u003c/code\u003e\u0026nbsp;给出，\u003ccode\u003eanswer[i]\u003c/code\u003e\u0026nbsp;为第\u0026nbsp;\u003ccode\u003ei\u003c/code\u003e\u0026nbsp;次查询的答案。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n\u003cstrong\u003e输出：\u003c/strong\u003e[8,6,2,4]\n\u003cstrong\u003e解释：\u003c/strong\u003e\n开始时，数组为 [1,2,3,4]。\n将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt;= queries[i][0] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= queries[i][1] \u0026lt; A.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12616367":{"ID":"12616367","StatusDisplay":"Accepted","Lang":"python3","Runtime":"328 ms","Memory":"16.5 MB","URL":"/submissions/detail/12616367/","Code":"#\n# @lc app=leetcode.cn id=985 lang=python3\n#\n# [985] 令牌放置\n#\n# https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries/description/\n#\n# algorithms\n# Easy (68.70%)\n# Total Accepted:    405\n# Total Submissions: 590\n# Testcase Example:  '[1,2,3,4]\\n[[1,0],[-3,1],[-4,0],[2,3]]'\n#\n# 给出一个整数数组 A 和一个查询数组 queries。\n# \n# 对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index]\n# 上。然后，第 i 次查询的答案是 A 中偶数值的和。\n# \n# （此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）\n# \n# 返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。\n# \n# \n# \n# 示例：\n# \n# 输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n# 输出：[8,6,2,4]\n# 解释：\n# 开始时，数组为 [1,2,3,4]。\n# 将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n# 将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n# 将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n# 将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# 1 \u003c= queries.length \u003c= 10000\n# -10000 \u003c= queries[i][0] \u003c= 10000\n# 0 \u003c= queries[i][1] \u003c A.length\n# \n# \n#\nclass Solution:\n    def sumEvenAfterQueries(self, A: 'List[int]', queries: 'List[List[int]]') -\u003e 'List[int]':\n        res = []\n        s = sum([x for x in A if x % 2 == 0])\n        for i in queries:\n            if A[i[1]] % 2 == 0 and i[0] % 2 == 0:\n                s += i[0]\n            elif A[i[1]] % 2 and i[0] % 2:\n                s += A[i[1]] + i[0]\n            elif A[i[1]] % 2 == 0 and i[0] % 2:\n                s -= A[i[1]]\n            A[i[1]] += i[0]\n            res.append(s)\n\n        return res      \n","Timestamp":"1549960946"},"12616733":{"ID":"12616733","StatusDisplay":"Accepted","Lang":"python3","Runtime":"260 ms","Memory":"16.5 MB","URL":"/submissions/detail/12616733/","Code":"#\n# @lc app=leetcode.cn id=985 lang=python3\n#\n# [985] 令牌放置\n#\n# https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries/description/\n#\n# algorithms\n# Easy (68.70%)\n# Total Accepted:    405\n# Total Submissions: 590\n# Testcase Example:  '[1,2,3,4]\\n[[1,0],[-3,1],[-4,0],[2,3]]'\n#\n# 给出一个整数数组 A 和一个查询数组 queries。\n# \n# 对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index]\n# 上。然后，第 i 次查询的答案是 A 中偶数值的和。\n# \n# （此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）\n# \n# 返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。\n# \n# \n# \n# 示例：\n# \n# 输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n# 输出：[8,6,2,4]\n# 解释：\n# 开始时，数组为 [1,2,3,4]。\n# 将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n# 将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n# 将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n# 将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# 1 \u003c= queries.length \u003c= 10000\n# -10000 \u003c= queries[i][0] \u003c= 10000\n# 0 \u003c= queries[i][1] \u003c A.length\n# \n# \n#\nclass Solution:\n    def sumEvenAfterQueries(self, A: 'List[int]', queries: 'List[List[int]]') -\u003e 'List[int]':\n        res = []\n        s = sum([x for x in A if x % 2 == 0])\n        for i in queries:\n            if A[i[1]] % 2 == 0:\n                if i[0] % 2 == 0:\n                    s += i[0]\n                else:\n                    s -= A[i[1]]\n            else:\n                if i[0] % 2:\n                    s += A[i[1]] + i[0]\n                \n            A[i[1]] += i[0]\n            res.append(s)\n\n        return res      \n","Timestamp":"1549961221"},"15006946":{"ID":"15006946","StatusDisplay":"Accepted","Lang":"python3","Runtime":"176 ms","Memory":"17.5 MB","URL":"/submissions/detail/15006946/","Code":"#\n# @lc app=leetcode.cn id=985 lang=python3\n#\n# [985] 令牌放置\n#\n# https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries/description/\n#\n# algorithms\n# Easy (68.70%)\n# Total Accepted:    405\n# Total Submissions: 590\n# Testcase Example:  '[1,2,3,4]\\n[[1,0],[-3,1],[-4,0],[2,3]]'\n#\n# 给出一个整数数组 A 和一个查询数组 queries。\n# \n# 对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index]\n# 上。然后，第 i 次查询的答案是 A 中偶数值的和。\n# \n# （此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）\n# \n# 返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。\n# \n# \n# \n# 示例：\n# \n# 输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n# 输出：[8,6,2,4]\n# 解释：\n# 开始时，数组为 [1,2,3,4]。\n# 将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n# 将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n# 将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n# 将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= A.length \u003c= 10000\n# -10000 \u003c= A[i] \u003c= 10000\n# 1 \u003c= queries.length \u003c= 10000\n# -10000 \u003c= queries[i][0] \u003c= 10000\n# 0 \u003c= queries[i][1] \u003c A.length\n# \n# \n#\nclass Solution:\n    def sumEvenAfterQueries(self, A: 'List[int]', queries: 'List[List[int]]') -\u003e 'List[int]':\n        res = []\n        s = sum([x for x in A if x % 2 == 0])\n        for i in queries:\n            if A[i[1]] % 2 == 0:\n                if i[0] % 2 == 0:\n                    s += i[0]\n                else:\n                    s -= A[i[1]]\n            else:\n                if i[0] % 2:\n                    s += A[i[1]] + i[0]\n                \n            A[i[1]] += i[0]\n            res.append(s)\n\n        return res      \n\n","Timestamp":"1552927981"}}},{"questionId":"202","questionFrontendId":"202","Title":"Happy Number","TitleSlug":"happy-number","Content":"\u003cp\u003eWrite an algorithm to determine if a number is \u0026quot;happy\u0026quot;.\u003c/p\u003e\r\n\r\n\u003cp\u003eA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u0026nbsp;\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 19\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003cstrong\u003eExplanation: \r\n\u003c/strong\u003e1\u003csup\u003e2\u003c/sup\u003e + 9\u003csup\u003e2\u003c/sup\u003e = 82\r\n8\u003csup\u003e2\u003c/sup\u003e + 2\u003csup\u003e2\u003c/sup\u003e = 68\r\n6\u003csup\u003e2\u003c/sup\u003e + 8\u003csup\u003e2\u003c/sup\u003e = 100\r\n1\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e = 1\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"快乐数","TranslatedContent":"\u003cp\u003e编写一个算法来判断一个数是不是\u0026ldquo;快乐数\u0026rdquo;。\u003c/p\u003e\n\n\u003cp\u003e一个\u0026ldquo;快乐数\u0026rdquo;定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u0026nbsp;\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 19\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释: \n\u003c/strong\u003e1\u003csup\u003e2\u003c/sup\u003e + 9\u003csup\u003e2\u003c/sup\u003e = 82\n8\u003csup\u003e2\u003c/sup\u003e + 2\u003csup\u003e2\u003c/sup\u003e = 68\n6\u003csup\u003e2\u003c/sup\u003e + 8\u003csup\u003e2\u003c/sup\u003e = 100\n1\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e + 0\u003csup\u003e2\u003c/sup\u003e = 1\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"12923929":{"ID":"12923929","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"6.5 MB","URL":"/submissions/detail/12923929/","Code":"#\n# @lc app=leetcode.cn id=202 lang=python3\n#\n# [202] 快乐数\n#\n# https://leetcode-cn.com/problems/happy-number/description/\n#\n# algorithms\n# Easy (51.19%)\n# Total Accepted:    10.7K\n# Total Submissions: 20.8K\n# Testcase Example:  '19'\n#\n# 编写一个算法来判断一个数是不是“快乐数”。\n#\n# 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到\n# 1。如果可以变为 1，那么这个数就是快乐数。\n#\n# 示例: \n#\n# 输入: 19\n# 输出: true\n# 解释:\n# 12 + 92 = 82\n# 82 + 22 = 68\n# 62 + 82 = 100\n# 12 + 02 + 02 = 1\n#\n#\n#\n\n\nclass Solution:\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        s = set()\n        while n != 1:\n            s.add(n)\n            r = 0\n            while n:\n                r += (n % 10)**2\n                n = n // 10\n            n = r\n            if n in s:\n                return False\n        return True\n","Timestamp":"1550483350"},"15006695":{"ID":"15006695","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"13 MB","URL":"/submissions/detail/15006695/","Code":"#\n# @lc app=leetcode.cn id=202 lang=python3\n#\n# [202] 快乐数\n#\n# https://leetcode-cn.com/problems/happy-number/description/\n#\n# algorithms\n# Easy (51.19%)\n# Total Accepted:    10.7K\n# Total Submissions: 20.8K\n# Testcase Example:  '19'\n#\n# 编写一个算法来判断一个数是不是“快乐数”。\n#\n# 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到\n# 1。如果可以变为 1，那么这个数就是快乐数。\n#\n# 示例: \n#\n# 输入: 19\n# 输出: true\n# 解释:\n# 12 + 92 = 82\n# 82 + 22 = 68\n# 62 + 82 = 100\n# 12 + 02 + 02 = 1\n#\n#\n#\n\n\nclass Solution:\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        s = set()\n        while n != 1:\n            s.add(n)\n            r = 0\n            while n:\n                r += (n % 10)**2\n                n = n // 10\n            n = r\n            if n in s:\n                return False\n        return True\n\n","Timestamp":"1552925411"}}},{"questionId":"66","questionFrontendId":"66","Title":"Plus One","TitleSlug":"plus-one","Content":"\u003cp\u003eGiven a \u003cstrong\u003enon-empty\u003c/strong\u003e array of digits\u0026nbsp;representing a non-negative integer, plus one to the integer.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume the integer does not contain any leading zero, except the number 0 itself.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,2,3]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2,4]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array represents the integer 123.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [4,3,2,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [4,3,2,2]\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The array represents the integer 4321.\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"加一","TranslatedContent":"\u003cp\u003e给定一个由\u003cstrong\u003e整数\u003c/strong\u003e组成的\u003cstrong\u003e非空\u003c/strong\u003e数组所表示的非负整数，在该数的基础上加一。\u003c/p\u003e\n\n\u003cp\u003e最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。\u003c/p\u003e\n\n\u003cp\u003e你可以假设除了整数 0 之外，这个整数不会以零开头。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e [1,2,4]\n\u003cstrong\u003e解释:\u003c/strong\u003e 输入数组表示数字 123。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [4,3,2,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e [4,3,2,2]\n\u003cstrong\u003e解释:\u003c/strong\u003e 输入数组表示数字 4321。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006835":{"ID":"15006835","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006835/","Code":"class Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        flag = True\n        for x in range(len(digits)-1,0-1,-1):\n            # print(x)\n            if flag:\n                digits[x] += 1\n                flag = False\n            if digits[x] \u003e= 10:\n                flag = True\n                digits[x] -= 10\n        if flag:\n            return [1] + digits\n        else:\n            return digits\n\n","Timestamp":"1552927031"},"1729436":{"ID":"1729436","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729436/","Code":"class Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        flag = False\n        digits[-1] += 1\n        for i in range(len(digits)-1, 0-1, -1):\n            if flag:\n                digits[i] += 1\n                flag = False\n            if digits[i] \u003e= 10:\n                digits[i] -= 10\n                flag = True\n        else:\n            if flag:\n                digits = [1] + digits\n        return digits\n                \n","Timestamp":"1519806557"},"1958286":{"ID":"1958286","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1958286/","Code":"class Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        flag = True\n        for x in range(len(digits)-1,0-1,-1):\n            # print(x)\n            if flag:\n                digits[x] += 1\n                flag = False\n            if digits[x] \u003e= 10:\n                flag = True\n                digits[x] -= 10\n        if flag:\n            return [1] + digits\n        else:\n            return digits","Timestamp":"1525411002"},"7572978":{"ID":"7572978","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7572978/","Code":"class Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        flag = True\n        for x in range(len(digits)-1,0-1,-1):\n            # print(x)\n            if flag:\n                digits[x] += 1\n                flag = False\n            if digits[x] \u003e= 10:\n                flag = True\n                digits[x] -= 10\n        if flag:\n            return [1] + digits\n        else:\n            return digits\n","Timestamp":"1536219045"}}},{"questionId":"215","questionFrontendId":"215","Title":"Kth Largest Element in an Array","TitleSlug":"kth-largest-element-in-an-array","Content":"\u003cp\u003eFind the \u003cstrong\u003ek\u003c/strong\u003eth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e[3,2,1,5,6,4] \u003c/code\u003eand k = 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e[3,2,3,1,2,4,5,5,6] \u003c/code\u003eand k = 4\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003e\u003cbr /\u003e\r\nYou may assume k is always valid, 1 \u0026le; k \u0026le; array\u0026#39;s length.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"数组中的第K个最大元素","TranslatedContent":"\u003cp\u003e在未排序的数组中找到第 \u003cstrong\u003ek\u003c/strong\u003e 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[3,2,1,5,6,4] 和\u003c/code\u003e k = 2\n\u003cstrong\u003e输出:\u003c/strong\u003e 5\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[3,2,3,1,2,4,5,5,6] 和\u003c/code\u003e k = 4\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你可以假设 k 总是有效的，且 1 \u0026le; k \u0026le; 数组的长度。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11140217":{"ID":"11140217","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"7.2 MB","URL":"/submissions/detail/11140217/","Code":"class Solution:\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return sorted(nums)[-k]","Timestamp":"1546422066"},"11140241":{"ID":"11140241","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"7.1 MB","URL":"/submissions/detail/11140241/","Code":"class Solution:\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return nums[-k]","Timestamp":"1546422093"},"11343710":{"ID":"11343710","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"7.1 MB","URL":"/submissions/detail/11343710/","Code":"class Solution:\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return nums[-k]","Timestamp":"1546853769"},"15006700":{"ID":"15006700","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.2 MB","URL":"/submissions/detail/15006700/","Code":"class Solution:\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return nums[-k]\n","Timestamp":"1552925467"}}},{"questionId":"941","questionFrontendId":"905","Title":"Sort Array By Parity","TitleSlug":"sort-array-by-parity","Content":"\u003cp\u003eGiven an array \u003ccode\u003eA\u003c/code\u003e of non-negative integers, return an array consisting of all the even elements of \u003ccode\u003eA\u003c/code\u003e, followed by all the odd elements of \u003ccode\u003eA\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return any answer array that satisfies this condition.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[3,1,2,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[2,4,3,1]\u003c/span\u003e\r\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"按奇偶排序数组","TranslatedContent":"\u003cp\u003e给定一个非负整数数组 \u003ccode\u003eA\u003c/code\u003e，返回一个由 \u003ccode\u003eA\u003c/code\u003e 的所有偶数元素组成的数组，后面跟 \u003ccode\u003eA\u003c/code\u003e 的所有奇数元素。\u003c/p\u003e\n\n\u003cp\u003e你可以返回满足此条件的任何数组作为答案。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[3,1,2,4]\n\u003cstrong\u003e输出：\u003c/strong\u003e[2,4,3,1]\n输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 5000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006916":{"ID":"15006916","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"11.4 MB","URL":"/submissions/detail/15006916/","Code":"class Solution:\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in A if i % 2 == 0] + [i for i in A if i % 2 == 1]\n        \n","Timestamp":"1552927698"},"7573050":{"ID":"7573050","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"N/A","URL":"/submissions/detail/7573050/","Code":"class Solution:\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = [i for i in A if i % 2 == 0]\n        res += [i for i in A if i % 2 == 1]\n        return res\n        ","Timestamp":"1537258179"},"7573061":{"ID":"7573061","StatusDisplay":"Accepted","Lang":"python3","Runtime":"112 ms","Memory":"N/A","URL":"/submissions/detail/7573061/","Code":"class Solution:\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        return [i for i in A if i % 2 == 0] + [i for i in A if i % 2 == 1]\n        ","Timestamp":"1537258195"}}},{"questionId":"102","questionFrontendId":"102","Title":"Binary Tree Level Order Traversal","TitleSlug":"binary-tree-level-order-traversal","Content":"\u003cp\u003eGiven a binary tree, return the \u003ci\u003elevel order\u003c/i\u003e traversal of its nodes' values. (ie, from left to right, level by level).\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor example:\u003cbr /\u003e\r\nGiven binary tree \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e,\u003cbr /\u003e\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\nreturn its level order traversal as:\u003cbr /\u003e\r\n\u003cpre\u003e\r\n[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"二叉树的层次遍历","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。\u003c/p\u003e\n\n\u003cp\u003e例如:\u003cbr\u003e\n给定二叉树:\u0026nbsp;\u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e,\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\u003c/pre\u003e\n\n\u003cp\u003e返回其层次遍历结果：\u003c/p\u003e\n\n\u003cpre\u003e[\n  [3],\n  [9,20],\n  [15,7]\n]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15004390":{"ID":"15004390","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"11.8 MB","URL":"/submissions/detail/15004390/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append([])\n            res[depth-1].append(node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return res\n","Timestamp":"1552924593"},"15006636":{"ID":"15006636","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006636/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append([])\n            res[depth-1].append(node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return res\n","Timestamp":"1552924928"},"7906499":{"ID":"7906499","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7906499/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append([])\n            res[depth-1].append(node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return res","Timestamp":"1538798396"}}},{"questionId":"108","questionFrontendId":"108","Title":"Convert Sorted Array to Binary Search Tree","TitleSlug":"convert-sorted-array-to-binary-search-tree","Content":"\u003cp\u003eGiven an array where elements are sorted in ascending order, convert it to a height balanced BST.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of \u003cem\u003eevery\u003c/em\u003e node never differ by more than 1.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven the sorted array: [-10,-3,0,5,9],\r\n\r\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"将有序数组转换为二叉搜索树","TranslatedContent":"\u003cp\u003e将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\u003c/p\u003e\n\n\u003cp\u003e本题中，一个高度平衡二叉树是指一个二叉树\u003cem\u003e每个节点\u0026nbsp;\u003c/em\u003e的左右两个子树的高度差的绝对值不超过 1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006643":{"ID":"15006643","StatusDisplay":"Accepted","Lang":"python","Runtime":"376 ms","Memory":"14.7 MB","URL":"/submissions/detail/15006643/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        def inner(nums):\n            if not nums:\n                return None\n            mid = len(nums)//2\n            node = TreeNode(nums[mid])\n            print(nums[:mid],nums[mid] ,nums[mid+1:])\n            node.left = inner(nums[:mid])\n            node.right = inner(nums[mid+1:])\n            return node\n        return inner(nums)\n        \n","Timestamp":"1552925000"},"7907078":{"ID":"7907078","StatusDisplay":"Accepted","Lang":"python3","Runtime":"132 ms","Memory":"N/A","URL":"/submissions/detail/7907078/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        def inner(nums):\n            if not nums:\n                return None\n            mid = len(nums)//2\n            node = TreeNode(nums[mid])\n            print(nums[:mid],nums[mid] ,nums[mid+1:])\n            node.left = inner(nums[:mid])\n            node.right = inner(nums[mid+1:])\n            return node\n        return inner(nums)\n        ","Timestamp":"1538799231"}}},{"questionId":"141","questionFrontendId":"141","Title":"Linked List Cycle","TitleSlug":"linked-list-cycle","Content":"\u003cp\u003eGiven a linked list, determine if it has a cycle in it.\u003c/p\u003e\r\n\r\n\u003cp\u003eTo represent a cycle in the given linked list, we use an integer \u003ccode\u003epos\u003c/code\u003e which represents the position (0-indexed)\u0026nbsp;in the linked list where tail connects to. If \u003ccode\u003epos\u003c/code\u003e is \u003ccode\u003e-1\u003c/code\u003e, then there is no cycle in the linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = \u003cspan id=\"example-input-1-1\"\u003e[3,2,0,-4]\u003c/span\u003e, pos = \u003cspan id=\"example-input-1-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is a cycle in the linked list, where tail connects to the second node.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" /\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = \u003cspan id=\"example-input-1-1\"\u003e[1,2]\u003c/span\u003e, pos = \u003cspan id=\"example-input-1-2\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is a cycle in the linked list, where tail connects to the first node.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" /\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = \u003cspan id=\"example-input-1-1\"\u003e[1]\u003c/span\u003e, pos = \u003cspan id=\"example-input-1-2\"\u003e-1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003efalse\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no cycle in the linked list.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cspan\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" /\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eCan you solve it using \u003cem\u003eO(1)\u003c/em\u003e (i.e. constant) memory?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"环形链表","TranslatedContent":"\u003cp\u003e给定一个链表，判断链表中是否有环。\u003c/p\u003e\n\n\u003cp\u003e为了表示给定链表中的环，我们使用整数 \u003ccode\u003epos\u003c/code\u003e 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 \u003ccode\u003epos\u003c/code\u003e 是 \u003ccode\u003e-1\u003c/code\u003e，则在该链表中没有环。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [3,2,0,-4], pos = 1\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中有一个环，其尾部连接到第二个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [1,2], pos = 0\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中有一个环，其尾部连接到第一个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [1], pos = -1\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中没有环。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你能用 \u003cem\u003eO(1)\u003c/em\u003e（即，常量）内存解决此问题吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006667":{"ID":"15006667","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"17.1 MB","URL":"/submissions/detail/15006667/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        a = head\n        b = head\n        while a and b:\n            a = a.next\n            if not b.next:\n                return False\n            b = b.next.next\n            if a == b:\n                return True\n        return False\n            \n        \n","Timestamp":"1552925222"},"7909992":{"ID":"7909992","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7909992/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        a = head\n        b = head\n        while a and b:\n            a = a.next\n            if not b.next:\n                return False\n            b = b.next.next\n            if a == b:\n                return True\n        return False\n            \n        ","Timestamp":"1538807708"},"7910035":{"ID":"7910035","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7910035/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        a = head\n        b = head\n        while a and b:\n            a = a.next\n            if not b.next:\n                return False\n            b = b.next.next\n            if a == b:\n                return True\n        return False\n            \n        ","Timestamp":"1538807794"}}},{"questionId":"48","questionFrontendId":"48","Title":"Rotate Image","TitleSlug":"rotate-image","Content":"\u003cp\u003eYou are given an \u003cem\u003en\u003c/em\u003e x \u003cem\u003en\u003c/em\u003e 2D matrix representing an image.\u003c/p\u003e\r\n\r\n\u003cp\u003eRotate the image by 90 degrees (clockwise).\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eYou have to rotate the image \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003e\u003cstrong\u003ein-place\u003c/strong\u003e\u003c/a\u003e, which means you have to modify the input 2D matrix directly. \u003cstrong\u003eDO NOT\u003c/strong\u003e allocate another 2D matrix and do the rotation.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cstrong\u003einput matrix\u003c/strong\u003e = \r\n[\r\n  [1,2,3],\r\n  [4,5,6],\r\n  [7,8,9]\r\n],\r\n\r\nrotate the input matrix \u003cstrong\u003ein-place\u003c/strong\u003e such that it becomes:\r\n[\r\n  [7,4,1],\r\n  [8,5,2],\r\n  [9,6,3]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cstrong\u003einput matrix\u003c/strong\u003e =\r\n[\r\n  [ 5, 1, 9,11],\r\n  [ 2, 4, 8,10],\r\n  [13, 3, 6, 7],\r\n  [15,14,12,16]\r\n], \r\n\r\nrotate the input matrix \u003cstrong\u003ein-place\u003c/strong\u003e such that it becomes:\r\n[\r\n  [15,13, 2, 5],\r\n  [14, 3, 4, 1],\r\n  [12, 6, 8, 9],\r\n  [16, 7,10,11]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"旋转图像","TranslatedContent":"\u003cp\u003e给定一个 \u003cem\u003en\u0026nbsp;\u003c/em\u003e\u0026times;\u0026nbsp;\u003cem\u003en\u003c/em\u003e 的二维矩阵表示一个图像。\u003c/p\u003e\n\n\u003cp\u003e将图像顺时针旋转 90 度。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你必须在\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e\u003c/strong\u003e旋转图像，这意味着你需要直接修改输入的二维矩阵。\u003cstrong\u003e请不要\u003c/strong\u003e使用另一个矩阵来旋转图像。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 \u003cstrong\u003ematrix\u003c/strong\u003e = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n\u003cstrong\u003e原地\u003c/strong\u003e旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 \u003cstrong\u003ematrix\u003c/strong\u003e =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n\u003cstrong\u003e原地\u003c/strong\u003e旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15076687":{"ID":"15076687","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"13.2 MB","URL":"/submissions/detail/15076687/","Code":"class Solution:\n    def rotate(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if len(matrix) == 1:\n            return\n        l = len(matrix)\n        m = matrix\n        for x in range(l):\n            for y in range(x,l):\n                if x != y:\n                    m[x][y], m[y][x] = m[y][x], m[x][y]\n        for x in range(l):\n            m[x] = m[x][::-1]","Timestamp":"1553002791"},"16670279":{"ID":"16670279","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"13.1 MB","URL":"/submissions/detail/16670279/","Code":"class Solution:\n    def rotate(self, matrix: List[List[int]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if len(matrix) == 1:\n            return\n        l = len(matrix)\n        m = matrix\n        for x in range(l):\n            for y in range(x,l):\n                if x != y:\n                    m[x][y], m[y][x] = m[y][x], m[x][y]\n        for x in range(l):\n            m[x] = m[x][::-1]","Timestamp":"1553002805"}}},{"questionId":"929","questionFrontendId":"893","Title":"Groups of Special-Equivalent Strings","TitleSlug":"groups-of-special-equivalent-strings","Content":"\u003cp\u003eYou are given an array \u003ccode\u003eA\u003c/code\u003e of strings.\u003c/p\u003e\r\n\r\n\u003cp\u003eTwo strings \u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003eT\u003c/code\u003e are\u0026nbsp;\u003cem\u003especial-equivalent\u003c/em\u003e\u0026nbsp;if after any number of \u003cem\u003emoves\u003c/em\u003e, S == T.\u003c/p\u003e\r\n\r\n\u003cp\u003eA \u003cem\u003emove\u003c/em\u003e consists of choosing two indices \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003ej\u003c/code\u003e with \u003ccode\u003ei % 2 == j % 2\u003c/code\u003e, and swapping \u003ccode\u003eS[i]\u003c/code\u003e with \u003ccode\u003eS[j]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow, a \u003cem\u003egroup of special-equivalent strings from \u003ccode\u003eA\u003c/code\u003e\u003c/em\u003e\u0026nbsp;is a\u0026nbsp;non-empty subset S of \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;such that any string not in S\u0026nbsp;is not special-equivalent with any string in S.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the number of groups of special-equivalent strings from \u003ccode\u003eA\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e3\u003c/span\u003e\r\n\u003cspan\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: 3 groups [\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;], [\u0026quot;b\u0026quot;], [\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;aa\u0026quot;,\u0026quot;bb\u0026quot;,\u0026quot;ab\u0026quot;,\u0026quot;ba\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e4\u003c/span\u003e\r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: 4 groups \u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;aa\u0026quot;], [\u0026quot;bb\u0026quot;], [\u0026quot;ab\u0026quot;], [\u0026quot;ba\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[\u0026quot;abc\u0026quot;,\u0026quot;acb\u0026quot;,\u0026quot;bac\u0026quot;,\u0026quot;bca\u0026quot;,\u0026quot;cab\u0026quot;,\u0026quot;cba\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: 3 groups [\u0026quot;abc\u0026quot;,\u0026quot;cba\u0026quot;], [\u0026quot;acb\u0026quot;,\u0026quot;bca\u0026quot;], [\u0026quot;bac\u0026quot;,\u0026quot;cab\u0026quot;]\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-4-1\"\u003e[\u0026quot;abcd\u0026quot;,\u0026quot;cdab\u0026quot;,\u0026quot;adcb\u0026quot;,\u0026quot;cbad\u0026quot;]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: 1 group \u003cspan id=\"example-input-4-1\"\u003e[\u0026quot;abcd\u0026quot;,\u0026quot;cdab\u0026quot;,\u0026quot;adcb\u0026quot;,\u0026quot;cbad\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eAll \u003ccode\u003eA[i]\u003c/code\u003e have the same length.\u003c/li\u003e\r\n\t\u003cli\u003eAll \u003ccode\u003eA[i]\u003c/code\u003e consist of only lowercase letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"特殊等价字符串组","TranslatedContent":"\u003cp\u003e你将得到一个字符串数组 \u003ccode\u003eA\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e如果经过任意次数的移动，S == T，那么两个字符串 \u003ccode\u003eS\u003c/code\u003e 和 \u003ccode\u003eT\u003c/code\u003e 是\u003cem\u003e特殊等价\u003c/em\u003e的。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e一次\u003cem\u003e移动\u003c/em\u003e包括选择两个索引 \u003ccode\u003ei\u003c/code\u003e 和 \u003ccode\u003ej\u003c/code\u003e，且\u0026nbsp;\u003ccode\u003ei ％ 2 == j ％ 2\u003c/code\u003e，并且交换 \u003ccode\u003eS[j]\u003c/code\u003e 和 \u003ccode\u003eS [i]\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e现在规定，\u003cstrong\u003e\u003ccode\u003eA\u003c/code\u003e 中的特殊等价字符串组\u003c/strong\u003e是 \u003ccode\u003eA\u003c/code\u003e 的非空子集 \u003ccode\u003eS\u003c/code\u003e，这样不在 \u003ccode\u003eS\u003c/code\u003e 中的任何字符串与 \u003ccode\u003eS\u003c/code\u003e 中的任何字符串都不是特殊等价的。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e返回 \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;中特殊等价字符串组的数量。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003e3\u003cstrong\u003e \u003c/strong\u003e组 [\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;]，[\u0026quot;b\u0026quot;]，[\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;c\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;aa\u0026quot;,\u0026quot;bb\u0026quot;,\u0026quot;ab\u0026quot;,\u0026quot;ba\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e4\n\u003cstrong\u003e解释：\u003c/strong\u003e4 组 [\u0026quot;aa\u0026quot;]，[\u0026quot;bb\u0026quot;]，[\u0026quot;ab\u0026quot;]，[\u0026quot;ba\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;abc\u0026quot;,\u0026quot;acb\u0026quot;,\u0026quot;bac\u0026quot;,\u0026quot;bca\u0026quot;,\u0026quot;cab\u0026quot;,\u0026quot;cba\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003e3 组 [\u0026quot;abc\u0026quot;,\u0026quot;cba\u0026quot;]，[\u0026quot;acb\u0026quot;,\u0026quot;bca\u0026quot;]，[\u0026quot;bac\u0026quot;,\u0026quot;cab\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[\u0026quot;abcd\u0026quot;,\u0026quot;cdab\u0026quot;,\u0026quot;adcb\u0026quot;,\u0026quot;cbad\u0026quot;]\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003e1 组 [\u0026quot;abcd\u0026quot;,\u0026quot;cdab\u0026quot;,\u0026quot;adcb\u0026quot;,\u0026quot;cbad\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e所有\u0026nbsp;\u003ccode\u003eA[i]\u003c/code\u003e\u0026nbsp;都具有相同的长度。\u003c/li\u003e\n\t\u003cli\u003e所有\u0026nbsp;\u003ccode\u003eA[i]\u003c/code\u003e\u0026nbsp;都只由小写字母组成。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"11139928":{"ID":"11139928","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"6.7 MB","URL":"/submissions/detail/11139928/","Code":"class Solution:\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        # 将字符串单数位和偶数位分别排序组成一个新串检测是否出现过\n        r =  set()\n        for w in A:\n            c = \"\".join(sorted([w[x] for x in range(len(w)) if x % 2]) + sorted([w[x] for x in range(len(w)) if x % 2 == 0]))\n            if c not in r:\n                r.add(c)\n        return len(r)","Timestamp":"1546421762"},"11140054":{"ID":"11140054","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.7 MB","URL":"/submissions/detail/11140054/","Code":"class Solution:\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        # 将字符串单数位和偶数位分别排序组成一个新串检测是否出现过\n        r =  set()\n        for w in A:\n            c = \"\".join(sorted(w[0::2]) + sorted(w[1::2]))\n            if c not in r:\n                r.add(c)\n        return len(r)","Timestamp":"1546421924"},"15006912":{"ID":"15006912","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006912/","Code":"class Solution:\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        # 将字符串单数位和偶数位分别排序组成一个新串检测是否出现过\n        r =  set()\n        for w in A:\n            c = \"\".join(sorted(w[0::2]) + sorted(w[1::2]))\n            if c not in r:\n                r.add(c)\n        return len(r)\n","Timestamp":"1552927674"}}},{"questionId":"748","questionFrontendId":"747","Title":"Largest Number At Least Twice of Others","TitleSlug":"largest-number-at-least-twice-of-others","Content":"\u003cp\u003eIn a given integer array \u003ccode\u003enums\u003c/code\u003e, there is always exactly one largest element.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind whether the largest element in the array is at least twice as much as every other number in the array.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf it is, return the \u003cstrong\u003eindex\u003c/strong\u003e of the largest element, otherwise return -1.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [3, 6, 1, 0]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 6 is the largest integer, and for every other number in the array x,\r\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1, 2, 3, 4]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e 4 isn\u0026#39;t at least as big as twice the value of 3, so we return -1.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e will have a length in the range \u003ccode\u003e[1, 50]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEvery \u003ccode\u003enums[i]\u003c/code\u003e will be an integer in the range \u003ccode\u003e[0, 99]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"至少是其他数字两倍的最大数","TranslatedContent":"\u003cp\u003e在一个给定的数组\u003ccode\u003enums\u003c/code\u003e中，总是存在一个最大元素 。\u003c/p\u003e\n\n\u003cp\u003e查找数组中的最大元素是否至少是数组中每个其他数字的两倍。\u003c/p\u003e\n\n\u003cp\u003e如果是，则返回最大元素的索引，否则返回-1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e nums = [3, 6, 1, 0]\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003cstrong\u003e解释:\u003c/strong\u003e 6是最大的整数, 对于数组中的其他整数,\n6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e nums = [1, 2, 3, 4]\n\u003cstrong\u003e输出:\u003c/strong\u003e -1\n\u003cstrong\u003e解释:\u003c/strong\u003e 4没有超过3的两倍大, 所以我们返回 -1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e\u0026nbsp;的长度范围在\u003ccode\u003e[1, 50]\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e每个\u0026nbsp;\u003ccode\u003enums[i]\u003c/code\u003e\u0026nbsp;的整数范围在\u0026nbsp;\u003ccode\u003e[0, 99]\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15798386":{"ID":"15798386","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"11.8 MB","URL":"/submissions/detail/15798386/","Code":"class Solution(object):\n    def dominantIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        c = nums.index(max(nums))\n        for i, x in enumerate(nums):\n            if i != c:\n                if nums[c] \u003c x*2:\n                    return -1\n        return c\n        ","Timestamp":"1553794289"}}},{"questionId":"882","questionFrontendId":"852","Title":"Peak Index in a Mountain Array","TitleSlug":"peak-index-in-a-mountain-array","Content":"\u003cp\u003eLet\u0026#39;s call an array \u003ccode\u003eA\u003c/code\u003e a \u003cem\u003emountain\u003c/em\u003e\u0026nbsp;if the following properties hold:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA.length \u0026gt;= 3\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eThere exists some \u003ccode\u003e0 \u0026lt; i\u0026nbsp;\u0026lt; A.length - 1\u003c/code\u003e such that \u003ccode\u003eA[0] \u0026lt; A[1] \u0026lt; ... A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; ... \u0026gt; A[A.length - 1]\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eGiven an array that is definitely a mountain, return any\u0026nbsp;\u003ccode\u003ei\u003c/code\u003e\u0026nbsp;such that\u0026nbsp;\u003ccode\u003eA[0] \u0026lt; A[1] \u0026lt; ... A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; ... \u0026gt; A[A.length - 1]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[0,1,0]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e1\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[0,2,1,0]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e1\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cfont face=\"monospace\"\u003e0 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/font\u003e\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eA\u0026nbsp;is a mountain, as defined above.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"山脉数组的峰顶索引","TranslatedContent":"\u003cp\u003e我们把符合下列属性的数组\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;称作山脉：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eA.length \u0026gt;= 3\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e存在 \u003ccode\u003e0 \u0026lt; i\u0026nbsp;\u0026lt; A.length - 1\u003c/code\u003e 使得\u003ccode\u003eA[0] \u0026lt; A[1] \u0026lt; ... A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; ... \u0026gt; A[A.length - 1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e给定一个确定为山脉的数组，返回任何满足\u0026nbsp;\u003ccode\u003eA[0] \u0026lt; A[1] \u0026lt; ... A[i-1] \u0026lt; A[i] \u0026gt; A[i+1] \u0026gt; ... \u0026gt; A[A.length - 1]\u003c/code\u003e\u0026nbsp;的 \u003ccode\u003ei\u003c/code\u003e\u0026nbsp;的值。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[0,1,0]\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[0,2,1,0]\n\u003cstrong\u003e输出：\u003c/strong\u003e1\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e0 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/li\u003e\n\t\u003cli\u003eA 是如上定义的山脉\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006894":{"ID":"15006894","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.5 MB","URL":"/submissions/detail/15006894/","Code":"class Solution:\n    def peakIndexInMountainArray(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(A)):\n            if A[i] \u003e A[i+1]:\n                return i\n","Timestamp":"1552927550"},"7573069":{"ID":"7573069","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7573069/","Code":"class Solution:\n    def peakIndexInMountainArray(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        for i in range(len(A)):\n            if A[i] \u003e A[i+1]:\n                return i","Timestamp":"1537263268"}}},{"questionId":"515","questionFrontendId":"515","Title":"Find Largest Value in Each Tree Row","TitleSlug":"find-largest-value-in-each-tree-row","Content":"\u003cp\u003eYou need to find the largest value in each row of a binary tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\n\r\n          1\r\n         / \\\r\n        3   2\r\n       / \\   \\  \r\n      5   3   9 \r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e [1, 3, 9]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"在每个树行中找最大值","TranslatedContent":"\u003cp\u003e您需要在二叉树的每一行中找到最大的值。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n\u003cstrong\u003e输出:\u003c/strong\u003e [1, 3, 9]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11140652":{"ID":"11140652","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"10.1 MB","URL":"/submissions/detail/11140652/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def largestValues(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append([])\n            res[depth-1].append(node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return [max(x) for x in res]\n        ","Timestamp":"1546422646"},"11140714":{"ID":"11140714","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"10.2 MB","URL":"/submissions/detail/11140714/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def largestValues(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append(node.val)\n            else:\n                res[depth-1] = max(res[depth-1], node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return res\n        ","Timestamp":"1546422770"},"15006796":{"ID":"15006796","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"16.1 MB","URL":"/submissions/detail/15006796/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def largestValues(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n\n        res = []\n        def inner(node, depth=1):\n            if not node:\n                return\n            if len(res) \u003c depth:\n                res.append(node.val)\n            else:\n                res[depth-1] = max(res[depth-1], node.val)\n            inner(node.left,depth+1)\n            inner(node.right,depth+1)\n        inner(root)\n        return res\n        \n","Timestamp":"1552926464"}}},{"questionId":"260","questionFrontendId":"260","Title":"Single Number III","TitleSlug":"single-number-iii","Content":"\u003cp\u003eGiven an array of numbers \u003ccode\u003enums\u003c/code\u003e, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e  \u003ccode\u003e[1,2,1,3,2,5]\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e[3,5]\u003c/code\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote\u003c/b\u003e:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe order of the result is not important. So in the above example, \u003ccode\u003e[5, 3]\u003c/code\u003e is also correct.\u003c/li\u003e\r\n\t\u003cli\u003eYour algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Medium","TranslatedTitle":"只出现一次的数字 III","TranslatedContent":"\u003cp\u003e给定一个整数数组\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[1,2,1,3,2,5]\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e[3,5]\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e结果输出的顺序并不重要，对于上面的例子，\u0026nbsp;\u003ccode\u003e[5, 3]\u003c/code\u003e\u0026nbsp;也是正确答案。\u003c/li\u003e\n\t\u003cli\u003e你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006727":{"ID":"15006727","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"12.4 MB","URL":"/submissions/detail/15006727/","Code":"class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        num_set=set()\n        for n in nums:\n            if n not in num_set:\n                num_set.add(n)\n            else:\n                num_set.remove(n)\n        return list(num_set)\n\n","Timestamp":"1552925656"},"1729379":{"ID":"1729379","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1729379/","Code":"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        num_set=set()\r\n        for n in nums:\r\n            if n not in num_set:\r\n                num_set.add(n)\r\n            else:\r\n                num_set.remove(n)\r\n        return list(num_set)","Timestamp":"1472830582"},"7572811":{"ID":"7572811","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"N/A","URL":"/submissions/detail/7572811/","Code":"class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        num_set=set()\n        for n in nums:\n            if n not in num_set:\n                num_set.add(n)\n            else:\n                num_set.remove(n)\n        return list(num_set)\n","Timestamp":"1536218703"}}},{"questionId":"35","questionFrontendId":"35","Title":"Search Insert Position","TitleSlug":"search-insert-position","Content":"\u003cp\u003eGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume no duplicates in the array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,3,5,6], 5\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,3,5,6], 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,3,5,6], 7\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,3,5,6], 0\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"搜索插入位置","TranslatedContent":"\u003cp\u003e给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\u003c/p\u003e\n\n\u003cp\u003e你可以假设数组中无重复元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,3,5,6], 5\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,3,5,6], 2\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,3,5,6], 7\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,3,5,6], 0\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"12620922":{"ID":"12620922","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"7.2 MB","URL":"/submissions/detail/12620922/","Code":"#\n# @lc app=leetcode.cn id=35 lang=python3\n#\n# [35] 搜索插入位置\n#\n# https://leetcode-cn.com/problems/search-insert-position/description/\n#\n# algorithms\n# Easy (42.19%)\n# Total Accepted:    26.7K\n# Total Submissions: 63.3K\n# Testcase Example:  '[1,3,5,6]\\n5'\n#\n# 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n# \n# 你可以假设数组中无重复元素。\n# \n# 示例 1:\n# \n# 输入: [1,3,5,6], 5\n# 输出: 2\n# \n# \n# 示例 2:\n# \n# 输入: [1,3,5,6], 2\n# 输出: 1\n# \n# \n# 示例 3:\n# \n# 输入: [1,3,5,6], 7\n# 输出: 4\n# \n# \n# 示例 4:\n# \n# 输入: [1,3,5,6], 0\n# 输出: 0\n# \n# \n#\nclass Solution:\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if target \u003c nums[0]:\n            return 0\n        elif target \u003e nums[-1]:\n            return len(nums)\n        l = 0\n        h = len(nums)\n        # if h == 0 and nums[0] == target:\n            # return 0\n        while l \u003c h:\n            m = (l + h) // 2 \n            if nums[m] == target:\n                return m\n            elif nums[m] \u003c target:\n                l = m + 1\n            else:\n                h = m - 1\n        if target \u003e  nums[l]:\n            return l + 1\n        return l\n        \n        \n","Timestamp":"1549964521"},"15006750":{"ID":"15006750","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13.8 MB","URL":"/submissions/detail/15006750/","Code":"#\n# @lc app=leetcode.cn id=35 lang=python3\n#\n# [35] 搜索插入位置\n#\n# https://leetcode-cn.com/problems/search-insert-position/description/\n#\n# algorithms\n# Easy (42.19%)\n# Total Accepted:    26.7K\n# Total Submissions: 63.3K\n# Testcase Example:  '[1,3,5,6]\\n5'\n#\n# 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n# \n# 你可以假设数组中无重复元素。\n# \n# 示例 1:\n# \n# 输入: [1,3,5,6], 5\n# 输出: 2\n# \n# \n# 示例 2:\n# \n# 输入: [1,3,5,6], 2\n# 输出: 1\n# \n# \n# 示例 3:\n# \n# 输入: [1,3,5,6], 7\n# 输出: 4\n# \n# \n# 示例 4:\n# \n# 输入: [1,3,5,6], 0\n# 输出: 0\n# \n# \n#\nclass Solution:\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if target \u003c nums[0]:\n            return 0\n        elif target \u003e nums[-1]:\n            return len(nums)\n        l = 0\n        h = len(nums)\n        # if h == 0 and nums[0] == target:\n            # return 0\n        while l \u003c h:\n            m = (l + h) // 2 \n            if nums[m] == target:\n                return m\n            elif nums[m] \u003c target:\n                l = m + 1\n            else:\n                h = m - 1\n        if target \u003e  nums[l]:\n            return l + 1\n        return l\n        \n        \n\n","Timestamp":"1552925869"}}},{"questionId":"160","questionFrontendId":"160","Title":"Intersection of Two Linked Lists","TitleSlug":"intersection-of-two-linked-lists","Content":"\u003cp\u003eWrite a program to find the node at which the intersection of two singly linked lists begins.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, the following two linked lists:\u003c/p\u003e\r\n\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_statement.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_statement.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 400px; height: 130px;\" /\u003e\u003c/a\u003e\r\n\r\n\u003cp\u003ebegin to intersect at node c1.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 400px; height: 130px;\" /\u003e\u003c/a\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e Reference of the node with value = 8\r\n\u003cstrong\u003eInput Explanation:\u003c/strong\u003e The intersected node\u0026#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 350px; height: 136px;\" /\u003e\u003c/a\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eintersectVal\u0026nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e Reference of the node with value = 2\r\n\u003cstrong\u003eInput Explanation:\u003c/strong\u003e\u0026nbsp;The intersected node\u0026#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 200px; height: 126px;\" /\u003e\u003c/a\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e null\r\n\u003cstrong\u003eInput Explanation:\u003c/strong\u003e From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The two lists do not intersect, so return null.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNotes:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eIf the two linked lists have no intersection at all, return \u003ccode\u003enull\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe linked lists must retain their original structure after the function returns.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume there are no cycles anywhere in the entire linked structure.\u003c/li\u003e\r\n\t\u003cli\u003eYour code should preferably run in O(n) time and use only O(1) memory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"相交链表","TranslatedContent":"\u003cp\u003e编写一个程序，找到两个单链表相交的起始节点。\u003c/p\u003e\n\n\u003cp\u003e如下面的两个链表\u003cstrong\u003e：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" style=\"height: 130px; width: 400px;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e在节点 c1 开始相交。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" style=\"height: 130px; width: 400px;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eintersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n\u003cstrong\u003e输出：\u003c/strong\u003eReference of the node with value = 8\n\u003cstrong\u003e输入解释：\u003c/strong\u003e相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" style=\"height: 136px; width: 350px;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eintersectVal\u0026nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n\u003cstrong\u003e输出：\u003c/strong\u003eReference of the node with value = 2\n\u003cstrong\u003e输入解释：\u003c/strong\u003e相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" target=\"_blank\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" style=\"height: 126px; width: 200px;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eintersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n\u003cstrong\u003e输出：\u003c/strong\u003enull\n\u003cstrong\u003e输入解释：\u003c/strong\u003e从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n\u003cstrong\u003e解释：\u003c/strong\u003e这两个链表不相交，因此返回 null。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e如果两个链表没有交点，返回 \u003ccode\u003enull\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e在返回结果后，两个链表仍须保持原有的结构。\u003c/li\u003e\n\t\u003cli\u003e可假定整个链表结构中没有循环。\u003c/li\u003e\n\t\u003cli\u003e程序尽量满足 O(\u003cem\u003en\u003c/em\u003e) 时间复杂度，且仅用 O(\u003cem\u003e1\u003c/em\u003e) 内存。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"11180678":{"ID":"11180678","StatusDisplay":"Accepted","Lang":"python","Runtime":"404 ms","Memory":"112.7 MB","URL":"/submissions/detail/11180678/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        def inner(node):\n            if node:\n                for n in inner(node.next):\n                    yield n\n                yield node\n        \n        a = inner(headA)\n        b = inner(headB)\n        flag = False\n        res = None\n        while True:\n            try:\n                x = next(a)\n                y = next(b)\n                if x == y:\n                    res = x\n                else:\n                    break\n            except:\n                break\n        return res\n           \n                ","Timestamp":"1546506639"},"11180704":{"ID":"11180704","StatusDisplay":"Accepted","Lang":"python","Runtime":"412 ms","Memory":"112.7 MB","URL":"/submissions/detail/11180704/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        def inner(node):\n            if node:\n                for n in inner(node.next):\n                    yield n\n                yield node\n        \n        a = inner(headA)\n        b = inner(headB)\n        flag = False\n        res = None\n        while True:\n            try:\n                x = next(a)\n                y = next(b)\n                if x == y:\n                    res = x\n                else:\n                    break\n            except:\n                break\n        return res\n           \n                ","Timestamp":"1546506656"},"11180719":{"ID":"11180719","StatusDisplay":"Accepted","Lang":"python","Runtime":"436 ms","Memory":"112.7 MB","URL":"/submissions/detail/11180719/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        def inner(node):\n            if node:\n                for n in inner(node.next):\n                    yield n\n                yield node\n        \n        a = inner(headA)\n        b = inner(headB)\n        flag = False\n        res = None\n        while True:\n            try:\n                x = next(a)\n                y = next(b)\n                if x == y:\n                    res = x\n                else:\n                    break\n            except:\n                break\n        return res\n           \n                ","Timestamp":"1546506667"},"11182044":{"ID":"11182044","StatusDisplay":"Accepted","Lang":"python","Runtime":"268 ms","Memory":"62.6 MB","URL":"/submissions/detail/11182044/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n           \n                ","Timestamp":"1546507638"},"11182057":{"ID":"11182057","StatusDisplay":"Accepted","Lang":"python","Runtime":"280 ms","Memory":"62.6 MB","URL":"/submissions/detail/11182057/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n           \n                ","Timestamp":"1546507647"},"11182063":{"ID":"11182063","StatusDisplay":"Accepted","Lang":"python","Runtime":"368 ms","Memory":"62.6 MB","URL":"/submissions/detail/11182063/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n           \n                ","Timestamp":"1546507653"},"11182081":{"ID":"11182081","StatusDisplay":"Accepted","Lang":"python","Runtime":"284 ms","Memory":"62.6 MB","URL":"/submissions/detail/11182081/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n           \n                ","Timestamp":"1546507664"},"11182119":{"ID":"11182119","StatusDisplay":"Accepted","Lang":"python","Runtime":"288 ms","Memory":"62.6 MB","URL":"/submissions/detail/11182119/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if headA is None or headB is None:\n            return None\n        \n        a, b = headA, headB\n        \n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a      ","Timestamp":"1546507698"},"11182513":{"ID":"11182513","StatusDisplay":"Accepted","Lang":"python","Runtime":"248 ms","Memory":"64.6 MB","URL":"/submissions/detail/11182513/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        see = set()\n        while headA:\n            see.add(headA)\n            headA = headA.next\n        \n        while headB:\n            if headB in see:\n                return headB\n            else:\n                headB = headB.next\n        return\n                ","Timestamp":"1546508010"},"15006676":{"ID":"15006676","StatusDisplay":"Accepted","Lang":"python","Runtime":"236 ms","Memory":"41.2 MB","URL":"/submissions/detail/15006676/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        see = set()\n        while headA:\n            see.add(headA)\n            headA = headA.next\n        \n        while headB:\n            if headB in see:\n                return headB\n            else:\n                headB = headB.next\n        return\n                \n","Timestamp":"1552925290"},"15797882":{"ID":"15797882","StatusDisplay":"Accepted","Lang":"python","Runtime":"292 ms","Memory":"42.1 MB","URL":"/submissions/detail/15797882/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        see = set()\n        while headA:\n            see.add(headA)\n            headA = headA.next\n        \n        while headB:\n            if headB in see:\n                return headB\n            else:\n                headB = headB.next\n        return\n                \n","Timestamp":"1553792161"},"15797887":{"ID":"15797887","StatusDisplay":"Accepted","Lang":"python","Runtime":"268 ms","Memory":"42.2 MB","URL":"/submissions/detail/15797887/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        see = set()\n        while headA:\n            see.add(headA)\n            headA = headA.next\n        \n        while headB:\n            if headB in see:\n                return headB\n            else:\n                headB = headB.next\n        return\n                \n","Timestamp":"1553792167"}}},{"questionId":"39","questionFrontendId":"39","Title":"Combination Sum","TitleSlug":"combination-sum","Content":"\u003cp\u003eGiven a \u003cstrong\u003eset\u003c/strong\u003e of candidate numbers (\u003ccode\u003ecandidates\u003c/code\u003e) \u003cstrong\u003e(without duplicates)\u003c/strong\u003e and a target number (\u003ccode\u003etarget\u003c/code\u003e), find all unique combinations in \u003ccode\u003ecandidates\u003c/code\u003e\u0026nbsp;where the candidate numbers sums to \u003ccode\u003etarget\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe \u003cstrong\u003esame\u003c/strong\u003e repeated number may be chosen from \u003ccode\u003ecandidates\u003c/code\u003e\u0026nbsp;unlimited number of times.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eAll numbers (including \u003ccode\u003etarget\u003c/code\u003e) will be positive integers.\u003c/li\u003e\r\n\t\u003cli\u003eThe solution set must not contain duplicate combinations.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e candidates = \u003ccode\u003e[2,3,6,7], \u003c/code\u003etarget = \u003ccode\u003e7\u003c/code\u003e,\r\n\u003cstrong\u003eA solution set is:\u003c/strong\u003e\r\n[\r\n  [7],\r\n  [2,2,3]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e candidates = [2,3,5]\u003ccode\u003e, \u003c/code\u003etarget = 8,\r\n\u003cstrong\u003eA solution set is:\u003c/strong\u003e\r\n[\r\n\u0026nbsp; [2,2,2,2],\r\n\u0026nbsp; [2,3,3],\r\n\u0026nbsp; [3,5]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"组合总和","TranslatedContent":"\u003cp\u003e给定一个\u003cstrong\u003e无重复元素\u003c/strong\u003e的数组\u0026nbsp;\u003ccode\u003ecandidates\u003c/code\u003e\u0026nbsp;和一个目标数\u0026nbsp;\u003ccode\u003etarget\u003c/code\u003e\u0026nbsp;，找出\u0026nbsp;\u003ccode\u003ecandidates\u003c/code\u003e\u0026nbsp;中所有可以使数字和为\u0026nbsp;\u003ccode\u003etarget\u003c/code\u003e\u0026nbsp;的组合。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecandidates\u003c/code\u003e\u0026nbsp;中的数字可以无限制重复被选取。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e所有数字（包括\u0026nbsp;\u003ccode\u003etarget\u003c/code\u003e）都是正整数。\u003c/li\u003e\n\t\u003cli\u003e解集不能包含重复的组合。\u0026nbsp;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e candidates = \u003ccode\u003e[2,3,6,7], \u003c/code\u003etarget = \u003ccode\u003e7\u003c/code\u003e,\n\u003cstrong\u003e所求解集为:\u003c/strong\u003e\n[\n  [7],\n  [2,2,3]\n]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e candidates = [2,3,5]\u003ccode\u003e, \u003c/code\u003etarget = 8,\n\u003cstrong\u003e所求解集为:\u003c/strong\u003e\n[\n\u0026nbsp; [2,2,2,2],\n\u0026nbsp; [2,3,3],\n\u0026nbsp; [3,5]\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006767":{"ID":"15006767","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006767/","Code":"class Solution:\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums,low_value, candidates, target):\n            if target == 0:\n                res.append(nums)\n            elif target \u003c low_value:\n                return\n            for x in candidates:\n                if x \u003e= low_value:\n                    inner(nums+[x],x, candidates, target-x)\n        inner([],0, candidates, target)\n        return res\n        \n","Timestamp":"1552925991"},"7972118":{"ID":"7972118","StatusDisplay":"Accepted","Lang":"python3","Runtime":"224 ms","Memory":"N/A","URL":"/submissions/detail/7972118/","Code":"class Solution:\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums,low_value, candidates, target):\n            if target == 0:\n                res.append(nums)\n            elif target \u003c 0:\n                return\n            for x in candidates:\n                if x \u003e= low_value:\n                    inner(nums+[x],x, candidates, target-x)\n        inner([],0, candidates, target)\n        return res\n        ","Timestamp":"1538972719"},"7972123":{"ID":"7972123","StatusDisplay":"Accepted","Lang":"python3","Runtime":"228 ms","Memory":"N/A","URL":"/submissions/detail/7972123/","Code":"class Solution:\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums,low_value, candidates, target):\n            if target == 0:\n                res.append(nums)\n            elif target \u003c 0:\n                return\n            for x in candidates:\n                if x \u003e= low_value:\n                    inner(nums+[x],x, candidates, target-x)\n        inner([],0, candidates, target)\n        return res\n        ","Timestamp":"1538972724"},"7972132":{"ID":"7972132","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/7972132/","Code":"class Solution:\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(nums,low_value, candidates, target):\n            if target == 0:\n                res.append(nums)\n            elif target \u003c low_value:\n                return\n            for x in candidates:\n                if x \u003e= low_value:\n                    inner(nums+[x],x, candidates, target-x)\n        inner([],0, candidates, target)\n        return res\n        ","Timestamp":"1538972748"}}},{"questionId":"257","questionFrontendId":"257","Title":"Binary Tree Paths","TitleSlug":"binary-tree-paths","Content":"\u003cp\u003eGiven a binary tree, return all root-to-leaf paths.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;A leaf is a node with no children.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;1-\u0026gt;2-\u0026gt;5\u0026quot;, \u0026quot;1-\u0026gt;3\u0026quot;]\r\n\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e All root-to-leaf paths are: 1-\u0026gt;2-\u0026gt;5, 1-\u0026gt;3\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"二叉树的所有路径","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回所有从根节点到叶子节点的路径。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u0026nbsp;叶子节点是指没有子节点的节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n\n   1\n /   \\\n2     3\n \\\n  5\n\n\u003cstrong\u003e输出:\u003c/strong\u003e [\u0026quot;1-\u0026gt;2-\u0026gt;5\u0026quot;, \u0026quot;1-\u0026gt;3\u0026quot;]\n\n\u003cstrong\u003e解释:\u003c/strong\u003e 所有根节点到叶子节点的路径为: 1-\u0026gt;2-\u0026gt;5, 1-\u0026gt;3\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006721":{"ID":"15006721","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11 MB","URL":"/submissions/detail/15006721/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        def inner(path, node):\n            if not node:\n                return\n            path = path[:]\n            path.append(str(node.val))\n            if not node.left and not node.right:\n                res.append(path)\n            inner(path, node.left)\n            inner(path, node.right)\n        inner([], root)\n        return ['-\u003e'.join(p) for p in res]\n        \n","Timestamp":"1552925625"},"7985867":{"ID":"7985867","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7985867/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        def inner(path, node):\n            if not node:\n                return\n            path = path[:]\n            path.append(str(node.val))\n            if not node.left and not node.right:\n                res.append(path)\n            inner(path, node.left)\n            inner(path, node.right)\n        inner([], root)\n        return ['-\u003e'.join(p) for p in res]\n        ","Timestamp":"1538988078"}}},{"questionId":"382","questionFrontendId":"382","Title":"Linked List Random Node","TitleSlug":"linked-list-random-node","Content":"\u003cp\u003eGiven a singly linked list, return a random node's value from the linked list. Each node must have the \u003cb\u003esame probability\u003c/b\u003e of being chosen.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr /\u003e\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"链表随机节点","TranslatedContent":"\u003cp\u003e给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点\u003cstrong\u003e被选的概率一样\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003cbr /\u003e\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006760":{"ID":"15006760","StatusDisplay":"Accepted","Lang":"python","Runtime":"84 ms","Memory":"15 MB","URL":"/submissions/detail/15006760/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nimport random\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        self.head = head\n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        choose = None\n        this = self.head\n        max_val = 0\n        while this is not None:\n            val = random.random()\n            if val \u003e max_val:\n                max_val = val\n                choose = this\n            this= this.next\n        return choose.val\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()\n\n","Timestamp":"1552925929"},"1729482":{"ID":"1729482","StatusDisplay":"Accepted","Lang":"python","Runtime":"168 ms","Memory":"N/A","URL":"/submissions/detail/1729482/","Code":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\nimport random\r\nclass Solution(object):\r\n\r\n    def __init__(self, head):\r\n        \"\"\"\r\n        @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n        :type head: ListNode\r\n        \"\"\"\r\n        self.head = head\r\n\r\n    def getRandom(self):\r\n        \"\"\"\r\n        Returns a random node's value.\r\n        :rtype: int\r\n        \"\"\"\r\n        choose = None\r\n        this = self.head\r\n        max_val = 0\r\n        while this is not None:\r\n            val = random.random()\r\n            if val \u003e max_val:\r\n                max_val = val\r\n                choose = this\r\n            this= this.next\r\n        return choose.val\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(head)\r\n# param_1 = obj.getRandom()","Timestamp":"1472874770"},"7572857":{"ID":"7572857","StatusDisplay":"Accepted","Lang":"python","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/7572857/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nimport random\nclass Solution(object):\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        self.head = head\n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        choose = None\n        this = self.head\n        max_val = 0\n        while this is not None:\n            val = random.random()\n            if val \u003e max_val:\n                max_val = val\n                choose = this\n            this= this.next\n        return choose.val\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()\n","Timestamp":"1536218796"}}},{"questionId":"283","questionFrontendId":"283","Title":"Move Zeroes","TitleSlug":"move-zeroes","Content":"\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e, write a function to move all \u003ccode\u003e0\u003c/code\u003e\u0026#39;s to the end of it while maintaining the relative order of the non-zero elements.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003ccode\u003e[0,1,0,3,12]\u003c/code\u003e\r\n\u003cb\u003eOutput:\u003c/b\u003e \u003ccode\u003e[1,3,12,0,0]\u003c/code\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote\u003c/b\u003e:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eYou must do this \u003cb\u003ein-place\u003c/b\u003e without making a copy of the array.\u003c/li\u003e\r\n\t\u003cli\u003eMinimize the total number of operations.\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Easy","TranslatedTitle":"移动零","TranslatedContent":"\u003cp\u003e给定一个数组 \u003ccode\u003enums\u003c/code\u003e，编写一个函数将所有 \u003ccode\u003e0\u003c/code\u003e 移动到数组的末尾，同时保持非零元素的相对顺序。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[0,1,0,3,12]\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e \u003ccode\u003e[1,3,12,0,0]\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明\u003c/strong\u003e:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e必须在原数组上操作，不能拷贝额外的数组。\u003c/li\u003e\n\t\u003cli\u003e尽量减少操作次数。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006733":{"ID":"15006733","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11.8 MB","URL":"/submissions/detail/15006733/","Code":"class Solution:\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return []\n        zi = len(nums)\n        flag = False\n        for i in range(len(nums)):\n            if nums[i] == 0 and not flag:\n                zi = i\n                flag = True\n            elif zi \u003c len(nums):\n                nums[i], nums[zi] = nums[zi], nums[i]\n                while zi\u003clen(nums) and  nums[zi]:\n                    zi += 1\n","Timestamp":"1552925723"},"1729189":{"ID":"1729189","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/1729189/","Code":"class Solution(object):\r\n    def moveZeroes(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        \"\"\"\r\n        i = 0\r\n        n = 0\r\n        while n \u003c len(nums):\r\n            n += 1\r\n            if nums[i] == 0:\r\n                nums.pop(i)\r\n                nums.append(0)\r\n            else:\r\n                i += 1","Timestamp":"1472832710"},"1957922":{"ID":"1957922","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/1957922/","Code":"class Solution:\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return []\n        zi = len(nums)\n        flag = False\n        for i in range(len(nums)):\n            if nums[i] == 0 and not flag:\n                zi = i\n                flag = True\n            elif zi \u003c len(nums):\n                nums[i], nums[zi] = nums[zi], nums[i]\n                while zi\u003clen(nums) and  nums[zi]:\n                    zi += 1","Timestamp":"1525410202"}}},{"questionId":"198","questionFrontendId":"198","Title":"House Robber","TitleSlug":"house-robber","Content":"\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and \u003cb\u003eit will automatically contact the police if two adjacent houses were broken into on the same night\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight \u003cb\u003ewithout alerting the police\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,2,3,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Rob house 1 (money = 1) and then rob house 3 (money = 3).\r\n\u0026nbsp;            Total amount you can rob = 1 + 3 = 4.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [2,7,9,3,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 12\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\r\n\u0026nbsp;            Total amount you can rob = 2 + 9 + 1 = 12.\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"打家劫舍","TranslatedContent":"\u003cp\u003e你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，\u003cstrong\u003e如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e给定一个代表每个房屋存放金额的非负整数数组，计算你\u003cstrong\u003e在不触动警报装置的情况下，\u003c/strong\u003e能够偷窃到的最高金额。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\n\u003cstrong\u003e解释:\u003c/strong\u003e 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n\u0026nbsp;    偷窃到的最高金额 = 1 + 3 = 4 。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [2,7,9,3,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 12\n\u003cstrong\u003e解释:\u003c/strong\u003e 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n\u0026nbsp;    偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17816898":{"ID":"17816898","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"13 MB","URL":"/submissions/detail/17816898/","Code":"class Solution:\n    def rob(self, nums: List[int]) -\u003e int:\n        last = 0\n        now = 0\n        for i in nums:\n            last, now = now, max(last + i, now)\n        return now","Timestamp":"1556362393"}}},{"questionId":"287","questionFrontendId":"287","Title":"Find the Duplicate Number","TitleSlug":"find-the-duplicate-number","Content":"\u003cp\u003eGiven an array \u003ci\u003enums\u003c/i\u003e containing \u003ci\u003en\u003c/i\u003e + 1 integers where each integer is between 1 and \u003ci\u003en\u003c/i\u003e (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003ccode\u003e[1,3,4,2,2]\u003c/code\u003e\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [3,1,3,4,2]\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eYou \u003cb\u003emust not\u003c/b\u003e modify the array (assume the array is read only).\u003c/li\u003e\r\n\t\u003cli\u003eYou must use only constant, \u003ci\u003eO\u003c/i\u003e(1) extra space.\u003c/li\u003e\r\n\t\u003cli\u003eYour runtime complexity should be less than \u003cem\u003eO\u003c/em\u003e(\u003cem\u003en\u003c/em\u003e\u003csup\u003e2\u003c/sup\u003e).\u003c/li\u003e\r\n\t\u003cli\u003eThere is only one duplicate number in the array, but it could be repeated more than once.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"寻找重复数","TranslatedContent":"\u003cp\u003e给定一个包含\u0026nbsp;\u003cem\u003en\u003c/em\u003e + 1 个整数的数组\u0026nbsp;\u003cem\u003enums\u003c/em\u003e，其数字都在 1 到 \u003cem\u003en\u0026nbsp;\u003c/em\u003e之间（包括 1 和 \u003cem\u003en\u003c/em\u003e），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e[1,3,4,2,2]\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [3,1,3,4,2]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003cstrong\u003e不能\u003c/strong\u003e更改原数组（假设数组是只读的）。\u003c/li\u003e\n\t\u003cli\u003e只能使用额外的 \u003cem\u003eO\u003c/em\u003e(1) 的空间。\u003c/li\u003e\n\t\u003cli\u003e时间复杂度小于 \u003cem\u003eO\u003c/em\u003e(\u003cem\u003en\u003c/em\u003e\u003csup\u003e2\u003c/sup\u003e) 。\u003c/li\u003e\n\t\u003cli\u003e数组中只有一个重复的数字，但它可能不止重复出现一次。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006737":{"ID":"15006737","StatusDisplay":"Accepted","Lang":"java","Runtime":"4 ms","Memory":"37.8 MB","URL":"/submissions/detail/15006737/","Code":"public class Solution {\n    public int findDuplicate(int[] nums) {\n        int[] temp =nums;\n        Arrays.sort(temp);\n        for(int i=1;i\u003ctemp.length;i++){\n            if(temp[i]==temp[i-1])\n                return temp[i];\n        }\n        return 0;\n    }\n}\n\n","Timestamp":"1552925751"},"1729469":{"ID":"1729469","StatusDisplay":"Accepted","Lang":"java","Runtime":"6 ms","Memory":"N/A","URL":"/submissions/detail/1729469/","Code":"public class Solution {\r\n    public int findDuplicate(int[] nums) {\r\n        int[] temp =nums;\r\n        Arrays.sort(temp);\r\n        for(int i=1;i\u003ctemp.length;i++){\r\n            if(temp[i]==temp[i-1])\r\n                return temp[i];\r\n        }\r\n        return 0;\r\n    }\r\n}","Timestamp":"1469661296"},"7572821":{"ID":"7572821","StatusDisplay":"Accepted","Lang":"java","Runtime":"5 ms","Memory":"N/A","URL":"/submissions/detail/7572821/","Code":"public class Solution {\n    public int findDuplicate(int[] nums) {\n        int[] temp =nums;\n        Arrays.sort(temp);\n        for(int i=1;i\u003ctemp.length;i++){\n            if(temp[i]==temp[i-1])\n                return temp[i];\n        }\n        return 0;\n    }\n}\n","Timestamp":"1536218736"}}},{"questionId":"226","questionFrontendId":"226","Title":"Invert Binary Tree","TitleSlug":"invert-binary-tree","Content":"\u003cp\u003eInvert a binary tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eInput:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n     4\r\n   /   \\\r\n  2     7\r\n / \\   / \\\r\n1   3 6   9\u003c/pre\u003e\r\n\r\n\u003cp\u003eOutput:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n     4\r\n   /   \\\r\n  7     2\r\n / \\   / \\\r\n9   6 3   1\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eTrivia:\u003c/strong\u003e\u003cbr /\u003e\r\nThis problem was inspired by \u003ca href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\"\u003ethis original tweet\u003c/a\u003e by \u003ca href=\"https://twitter.com/mxcl\" target=\"_blank\"\u003eMax Howell\u003c/a\u003e:\u003c/p\u003e\r\n\r\n\u003cblockquote\u003eGoogle: 90% of our engineers use the software you wrote (Homebrew), but you can\u0026rsquo;t invert a binary tree on a whiteboard so f*** off.\u003c/blockquote\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"翻转二叉树","TranslatedContent":"\u003cp\u003e翻转一棵二叉树。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e输入：\u003c/p\u003e\n\n\u003cpre\u003e     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\u003c/pre\u003e\n\n\u003cp\u003e输出：\u003c/p\u003e\n\n\u003cpre\u003e     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e备注:\u003c/strong\u003e\u003cbr\u003e\n这个问题是受到 \u003ca href=\"https://twitter.com/mxcl\" target=\"_blank\"\u003eMax Howell \u003c/a\u003e的 \u003ca href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\"\u003e原问题\u003c/a\u003e 启发的 ：\u003c/p\u003e\n\n\u003cblockquote\u003e谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。\u003c/blockquote\u003e\n","Status":"ac","Tags":[],"Submits":{"15006706":{"ID":"15006706","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006706/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if root:\n            root.right,root.left = root.left,root.right\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root\n        \n\n","Timestamp":"1552925512"},"1729370":{"ID":"1729370","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729370/","Code":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def invertTree(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        if root:\r\n            root.right,root.left = root.left,root.right\r\n            self.invertTree(root.left)\r\n            self.invertTree(root.right)\r\n        return root\r\n        ","Timestamp":"1471674262"},"7572768":{"ID":"7572768","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7572768/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if root:\n            root.right,root.left = root.left,root.right\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root\n        \n","Timestamp":"1536218635"}}},{"questionId":"764","questionFrontendId":"429","Title":"N-ary Tree Level Order Traversal","TitleSlug":"n-ary-tree-level-order-traversal","Content":"\u003cp\u003eGiven an n-ary tree, return the level order traversal of its nodes\u0026#39; values. (ie, from left to right, level by level).\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given a \u003ccode\u003e3-ary\u003c/code\u003e tree:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eWe should return its level order traversal:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe depth of the tree is at most \u003ccode\u003e1000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe total number of nodes is at most \u003ccode\u003e5000\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"N叉树的层序遍历","TranslatedContent":"\u003cp\u003e给定一个 N 叉树，返回其节点值的\u003cem\u003e层序遍历\u003c/em\u003e。 (即从左到右，逐层遍历)。\u003c/p\u003e\r\n\r\n\u003cp\u003e例如，给定一个\u0026nbsp;\u003ccode\u003e3叉树\u003c/code\u003e\u0026nbsp;:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e返回其层序遍历:\u003c/p\u003e\r\n\r\n\u003cpre\u003e[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e树的深度不会超过\u0026nbsp;\u003ccode\u003e1000\u003c/code\u003e。\u003c/li\u003e\r\n\t\u003cli\u003e树的节点总数不会超过\u0026nbsp;\u003ccode\u003e5000\u003c/code\u003e。\u003c/li\u003e\r\n\u003c/ol\u003e","Status":"ac","Tags":[],"Submits":{"15006773":{"ID":"15006773","StatusDisplay":"Accepted","Lang":"python","Runtime":"96 ms","Memory":"18.3 MB","URL":"/submissions/detail/15006773/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            if node.children:\n                for c in node.children:\n                    inner(c, depth+1)\n        inner(root)\n        return res\n        \n","Timestamp":"1552926048"},"7983878":{"ID":"7983878","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7983878/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def inner(node, depth=0):\n            if not node:\n                return\n            if len(res) == depth:\n                res.append([])\n            res[depth].append(node.val)\n            if node.children:\n                for c in node.children:\n                    inner(c, depth+1)\n        inner(root)\n        return res\n        ","Timestamp":"1538986322"}}},{"questionId":"268","questionFrontendId":"268","Title":"Missing Number","TitleSlug":"missing-number","Content":"\u003cp\u003eGiven an array containing \u003ci\u003en\u003c/i\u003e distinct numbers taken from \u003ccode\u003e0, 1, 2, ..., n\u003c/code\u003e, find the one that is missing from the array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [3,0,1]\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [9,6,4,2,3,5,7,0,1]\r\n\u003cb\u003eOutput:\u003c/b\u003e 8\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote\u003c/b\u003e:\u003cbr /\u003e\r\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"缺失数字","TranslatedContent":"\u003cp\u003e给定一个包含 \u003ccode\u003e0, 1, 2, ..., n\u003c/code\u003e\u0026nbsp;中\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;个数的序列，找出 0 .. \u003cem\u003en\u003c/em\u003e\u0026nbsp;中没有出现在序列中的那个数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [3,0,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [9,6,4,2,3,5,7,0,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 8\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003cbr\u003e\n你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11339348":{"ID":"11339348","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"7.5 MB","URL":"/submissions/detail/11339348/","Code":"class Solution:\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        b = 0\n        for x in range(l+1):\n            b ^= x\n        for x in nums:\n            b  ^= x\n        return b","Timestamp":"1546850292"},"15006728":{"ID":"15006728","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"11.5 MB","URL":"/submissions/detail/15006728/","Code":"class Solution:\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        l = len(nums)\n        b = 0\n        for x in range(l+1):\n            b ^= x\n        for x in nums:\n            b  ^= x\n        return b\n","Timestamp":"1552925666"},"1729403":{"ID":"1729403","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729403/","Code":"class Solution:\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        s = ((len(nums) + 0) * (len(nums)+1)//2)\n        return s - sum(nums)\n","Timestamp":"1519810188"},"7572815":{"ID":"7572815","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7572815/","Code":"class Solution:\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        s = ((len(nums) + 0) * (len(nums)+1)//2)\n        return s - sum(nums)\n\n","Timestamp":"1536218716"}}},{"questionId":"728","questionFrontendId":"728","Title":"Self Dividing Numbers","TitleSlug":"self-dividing-numbers","Content":"\u003cp\u003e\r\nA \u003ci\u003eself-dividing number\u003c/i\u003e is a number that is divisible by every digit it contains.\r\n\u003c/p\u003e\u003cp\u003e\r\nFor example, 128 is a self-dividing number because \u003ccode\u003e128 % 1 == 0\u003c/code\u003e, \u003ccode\u003e128 % 2 == 0\u003c/code\u003e, and \u003ccode\u003e128 % 8 == 0\u003c/code\u003e.\r\n\u003c/p\u003e\u003cp\u003e\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n\u003c/p\u003e\u003cp\u003e\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\nleft = 1, right = 22\r\n\u003cb\u003eOutput:\u003c/b\u003e [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003cli\u003eThe boundaries of each input argument are \u003ccode\u003e1 \u003c= left \u003c= right \u003c= 10000\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"自除数","TranslatedContent":"\u003cp\u003e\u003cem\u003e自除数\u0026nbsp;\u003c/em\u003e是指可以被它包含的每一位数除尽的数。\u003c/p\u003e\n\n\u003cp\u003e例如，128 是一个自除数，因为\u0026nbsp;\u003ccode\u003e128 % 1 == 0\u003c/code\u003e，\u003ccode\u003e128 % 2 == 0\u003c/code\u003e，\u003ccode\u003e128 % 8 == 0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e还有，自除数不允许包含 0 。\u003c/p\u003e\n\n\u003cp\u003e给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入：\u003c/strong\u003e \n上边界left = 1, 下边界right = 22\n\u003cstrong\u003e输出：\u003c/strong\u003e [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e每个输入参数的边界满足\u0026nbsp;\u003ccode\u003e1 \u0026lt;= left \u0026lt;= right \u0026lt;= 10000\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006856":{"ID":"15006856","StatusDisplay":"Accepted","Lang":"python","Runtime":"80 ms","Memory":"11 MB","URL":"/submissions/detail/15006856/","Code":"class Solution:\n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for x in range(left, right+1):\n            if all([i!='0' and x%int(i)==0 for i in list(str(x))]):\n                res.append(x)\n        return res\n","Timestamp":"1552927223"},"7573071":{"ID":"7573071","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"N/A","URL":"/submissions/detail/7573071/","Code":"class Solution:\n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for x in range(left, right+1):\n            if all([i!='0' and x%int(i)==0 for i in list(str(x))]):\n                res.append(x)\n        return res","Timestamp":"1537264360"}}},{"questionId":"105","questionFrontendId":"105","Title":"Construct Binary Tree from Preorder and Inorder Traversal","TitleSlug":"construct-binary-tree-from-preorder-and-inorder-traversal","Content":"\u003cp\u003eGiven preorder and inorder traversal of a tree, construct the binary tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cbr /\u003e\r\nYou may assume that duplicates do not exist in the tree.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\npreorder =\u0026nbsp;[3,9,20,15,7]\r\ninorder = [9,3,15,20,7]\u003c/pre\u003e\r\n\r\n\u003cp\u003eReturn the following binary tree:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"从前序与中序遍历序列构造二叉树","TranslatedContent":"\u003cp\u003e根据一棵树的前序遍历与中序遍历构造二叉树。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003cbr\u003e\n你可以假设树中没有重复的元素。\u003c/p\u003e\n\n\u003cp\u003e例如，给出\u003c/p\u003e\n\n\u003cpre\u003e前序遍历 preorder =\u0026nbsp;[3,9,20,15,7]\n中序遍历 inorder = [9,3,15,20,7]\u003c/pre\u003e\n\n\u003cp\u003e返回如下的二叉树：\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"10992230":{"ID":"10992230","StatusDisplay":"Accepted","Lang":"python3","Runtime":"292 ms","Memory":"83 MB","URL":"/submissions/detail/10992230/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[1+l:],inorder[l+1:])\n        return root\n            \n        ","Timestamp":"1545982730"},"10992237":{"ID":"10992237","StatusDisplay":"Accepted","Lang":"python3","Runtime":"316 ms","Memory":"83 MB","URL":"/submissions/detail/10992237/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[1+l:],inorder[l+1:])\n        return root\n            \n        ","Timestamp":"1545982737"},"10992263":{"ID":"10992263","StatusDisplay":"Accepted","Lang":"python3","Runtime":"296 ms","Memory":"83 MB","URL":"/submissions/detail/10992263/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[-r:],inorder[-r:])\n        return root\n            \n        ","Timestamp":"1545982760"},"15004122":{"ID":"15004122","StatusDisplay":"Accepted","Lang":"python","Runtime":"236 ms","Memory":"85.3 MB","URL":"/submissions/detail/15004122/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[-r:],inorder[-r:])\n        return root\n            \n        \n","Timestamp":"1552924343"},"15004399":{"ID":"15004399","StatusDisplay":"Accepted","Lang":"python","Runtime":"240 ms","Memory":"85.2 MB","URL":"/submissions/detail/15004399/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[-r:],inorder[-r:])\n        return root\n            \n        \n","Timestamp":"1552924606"},"15006639":{"ID":"15006639","StatusDisplay":"Accepted","Lang":"python","Runtime":"192 ms","Memory":"85.3 MB","URL":"/submissions/detail/15006639/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        l = inorder.index(root.val)\n        r = len(inorder) - l - 1\n        if l:\n            root.left = self.buildTree(preorder[1:1+l],inorder[:l])\n        if r:\n            root.right = self.buildTree(preorder[-r:],inorder[-r:])\n        return root\n            \n        \n","Timestamp":"1552924949"}}},{"questionId":"374","questionFrontendId":"374","Title":"Guess Number Higher or Lower","TitleSlug":"guess-number-higher-or-lower","Content":"\u003cp\u003eWe are playing the Guess Game. The game is as follows:\u003c/p\u003e\r\n\r\n\u003cp\u003eI pick a number from \u003cb\u003e1\u003c/b\u003e to \u003cb\u003e\u003ci\u003en\u003c/i\u003e\u003c/b\u003e. You have to guess which number I picked.\u003c/p\u003e\r\n\r\n\u003cp\u003eEvery time you guess wrong, I\u0026#39;ll tell you whether the number is higher or lower.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou call a pre-defined API \u003ccode\u003eguess(int num)\u003c/code\u003e which returns 3 possible results (\u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, or \u003ccode\u003e0\u003c/code\u003e):\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n-1 : My number is lower\r\n 1 : My number is higher\r\n 0 : Congrats! You got it!\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample :\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003en = \u003cspan id=\"example-input-1-1\"\u003e10\u003c/span\u003e, pick = \u003cspan id=\"example-input-1-2\"\u003e6\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e6\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"猜数字大小","TranslatedContent":"\u003cp\u003e我们正在玩一个猜数字游戏。 游戏规则如下：\u003cbr\u003e\n我从\u0026nbsp;\u003cstrong\u003e1\u003c/strong\u003e\u0026nbsp;到\u0026nbsp;\u003cem\u003e\u003cstrong\u003en\u003c/strong\u003e\u003c/em\u003e\u0026nbsp;选择一个数字。 你需要猜我选择了哪个数字。\u003cbr\u003e\n每次你猜错了，我会告诉你这个数字是大了还是小了。\u003cbr\u003e\n你调用一个预先定义好的接口\u0026nbsp;\u003ccode\u003eguess(int num)\u003c/code\u003e，它会返回 3 个可能的结果（\u003ccode\u003e-1\u003c/code\u003e，\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;或 \u003ccode\u003e0\u003c/code\u003e）：\u003c/p\u003e\n\n\u003cpre\u003e-1 : 我的数字比较小\n 1 : 我的数字比较大\n 0 : 恭喜！你猜对了！\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003en = 10, pick = 6\n\u003cstrong\u003e输出: \u003c/strong\u003e6\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006756":{"ID":"15006756","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006756/","Code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        L=1\n        R=n\n        res=0\n        while L\u003c=R:\n            mid= R-((R-L)\u003e\u003e1)\n            res=guess(mid)\n            if res == 0:\n                return mid\n            elif res == 1:\n                L=mid+1\n            else:\n                R=mid-1\n        return L\n\n","Timestamp":"1552925905"},"1729277":{"ID":"1729277","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729277/","Code":"# The guess API is already defined for you.\r\n# @param num, your guess\r\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\n# def guess(num):\r\n\r\nclass Solution(object):\r\n    def guessNumber(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        L=1\r\n        R=n\r\n        res=0\r\n        while L\u003c=R:\r\n            mid= R-((R-L)\u003e\u003e1)\r\n            res=guess(mid)\r\n            if res == 0:\r\n                return mid\r\n            elif res == 1:\r\n                L=mid+1\r\n            else:\r\n                R=mid-1\r\n        return L","Timestamp":"1468552253"},"1729328":{"ID":"1729328","StatusDisplay":"Accepted","Lang":"java","Runtime":"1 ms","Memory":"N/A","URL":"/submissions/detail/1729328/","Code":"/* The guess API is defined in the parent class GuessGame.\r\n   @param num, your guess\r\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\n      int guess(int num); */\r\n\r\npublic class Solution extends GuessGame {\r\n    public int guessNumber(int n) {\r\n        int L=1,R=n;\r\n        int res=0;\r\n        while(L\u003c=R){\r\n            int mid= R-((R-L)\u003e\u003e1);\r\n            res=guess(mid);\r\n            if(res==0)return mid;\r\n            else if(res==1)L=mid+1;\r\n            else R=mid-1;\r\n        }\r\n        return L;\r\n    }\r\n}","Timestamp":"1468551862"},"1729381":{"ID":"1729381","StatusDisplay":"Accepted","Lang":"java","Runtime":"1 ms","Memory":"N/A","URL":"/submissions/detail/1729381/","Code":"/* The guess API is defined in the parent class GuessGame.\r\n   @param num, your guess\r\n   @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\r\n      int guess(int num); */\r\n\r\npublic class Solution extends GuessGame {\r\n    public int guessNumber(int n) {\r\n        int L=1,R=n;\r\n        int res=0;\r\n        while(L\u003c=R){\r\n            int mid= L+((R-L)\u003e\u003e1);\r\n            res=guess(mid);\r\n            if(res==0)return mid;\r\n            else if(res==1)L=mid+1;\r\n            else R=mid-1;\r\n        }\r\n        return L;\r\n    }\r\n}","Timestamp":"1468551181"},"7572848":{"ID":"7572848","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"N/A","URL":"/submissions/detail/7572848/","Code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        L=1\n        R=n\n        res=0\n        while L\u003c=R:\n            mid= R-((R-L)\u003e\u003e1)\n            res=guess(mid)\n            if res == 0:\n                return mid\n            elif res == 1:\n                L=mid+1\n            else:\n                R=mid-1\n        return L\n","Timestamp":"1536218784"}}},{"questionId":"747","questionFrontendId":"746","Title":"Min Cost Climbing Stairs","TitleSlug":"min-cost-climbing-stairs","Content":"\u003cp\u003e\r\nOn a staircase, the \u003ccode\u003ei\u003c/code\u003e-th step has some non-negative cost \u003ccode\u003ecost[i]\u003c/code\u003e assigned (0 indexed).\r\n\u003c/p\u003e\u003cp\u003e\r\nOnce you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e cost = [10, 15, 20]\r\n\u003cb\u003eOutput:\u003c/b\u003e 15\r\n\u003cb\u003eExplanation:\u003c/b\u003e Cheapest is start on cost[1], pay that cost and go to the top.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\r\n\u003cb\u003eOutput:\u003c/b\u003e 6\r\n\u003cb\u003eExplanation:\u003c/b\u003e Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003ccode\u003ecost\u003c/code\u003e will have a length in the range \u003ccode\u003e[2, 1000]\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eEvery \u003ccode\u003ecost[i]\u003c/code\u003e will be an integer in the range \u003ccode\u003e[0, 999]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"使用最小花费爬楼梯","TranslatedContent":"\u003cp\u003e数组的每个索引做为一个阶梯，第\u0026nbsp;\u003ccode\u003ei\u003c/code\u003e个阶梯对应着一个非负数的体力花费值\u0026nbsp;\u003ccode\u003ecost[i]\u003c/code\u003e(索引从0开始)。\u003c/p\u003e\n\n\u003cp\u003e每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。\u003c/p\u003e\n\n\u003cp\u003e您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e cost = [10, 15, 20]\n\u003cstrong\u003e输出:\u003c/strong\u003e 15\n\u003cstrong\u003e解释:\u003c/strong\u003e 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u0026nbsp;示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 6\n\u003cstrong\u003e解释:\u003c/strong\u003e 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003ecost\u003c/code\u003e\u0026nbsp;的长度将会在\u0026nbsp;\u003ccode\u003e[2, 1000]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每一个\u0026nbsp;\u003ccode\u003ecost[i]\u003c/code\u003e 将会是一个Integer类型，范围为\u0026nbsp;\u003ccode\u003e[0, 999]\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"17817769":{"ID":"17817769","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"13.2 MB","URL":"/submissions/detail/17817769/","Code":"class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -\u003e int:\n        last, now = 0, 0\n        for i in range(2, len(cost) + 1):\n            last, now = now, min(now + cost[i-1], last + cost[i-2])\n        return now","Timestamp":"1556363660"}}},{"questionId":"278","questionFrontendId":"278","Title":"First Bad Version","TitleSlug":"first-bad-version","Content":"\u003cp\u003eYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\u003c/p\u003e\r\n\r\n\u003cp\u003eSuppose you have \u003ccode\u003en\u003c/code\u003e versions \u003ccode\u003e[1, 2, ..., n]\u003c/code\u003e and you want to find out the first bad one, which causes all the following ones to be bad.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou are given an API \u003ccode\u003ebool isBadVersion(version)\u003c/code\u003e which will return whether \u003ccode\u003eversion\u003c/code\u003e is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven n = 5, and version = 4 is the first bad version.\r\n\r\n\u003ccode\u003ecall isBadVersion(3) -\u0026gt; false\r\ncall isBadVersion(5)\u0026nbsp;-\u0026gt; true\r\ncall isBadVersion(4)\u0026nbsp;-\u0026gt; true\r\n\r\nThen 4 is the first bad version.\u0026nbsp;\u003c/code\u003e\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"第一个错误的版本","TranslatedContent":"\u003cp\u003e你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。\u003c/p\u003e\n\n\u003cp\u003e假设你有 \u003ccode\u003en\u003c/code\u003e 个版本 \u003ccode\u003e[1, 2, ..., n]\u003c/code\u003e，你想找出导致之后所有版本出错的第一个错误的版本。\u003c/p\u003e\n\n\u003cp\u003e你可以通过调用\u0026nbsp;\u003ccode\u003ebool isBadVersion(version)\u003c/code\u003e\u0026nbsp;接口来判断版本号 \u003ccode\u003eversion\u003c/code\u003e 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 n = 5，并且 version = 4 是第一个错误的版本。\n\n\u003ccode\u003e调用 isBadVersion(3) -\u0026gt; false\n调用 isBadVersion(5)\u0026nbsp;-\u0026gt; true\n调用 isBadVersion(4)\u0026nbsp;-\u0026gt; true\n\n所以，4 是第一个错误的版本。\u0026nbsp;\u003c/code\u003e\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006626":{"ID":"15006626","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/15006626/","Code":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n\nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        l = 1\n        h = n\n        while l \u003c h:\n            m = l + (h - l) // 2\n            if not isBadVersion(m):\n                l = m + 1\n            else:\n                h = m\n        \n        return l\n        ","Timestamp":"1538799274"},"15006731":{"ID":"15006731","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006731/","Code":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n\nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        l = 1\n        h = n\n        while l \u003c h:\n            m = l + (h - l) // 2\n            if not isBadVersion(m):\n                l = m + 1\n            else:\n                h = m\n        \n        return l\n        \n","Timestamp":"1552925693"},"7904737":{"ID":"7904737","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7904737/","Code":"# The isBadVersion API is already defined for you.\n# @param version, an integer\n# @return a bool\n# def isBadVersion(version):\n\nclass Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        l = 1\n        h = n\n        while l \u003c h:\n            m = l + (h - l) // 2\n            if not isBadVersion(m):\n                l = m + 1\n            else:\n                h = m\n        \n        return l\n        ","Timestamp":"1538795506"}}},{"questionId":"627","questionFrontendId":"627","Title":"Swap Salary","TitleSlug":"swap-salary","Content":"\u003cp\u003eGiven a table \u003ccode\u003esalary\u003c/code\u003e, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a \u003cstrong\u003esingle update statement\u003c/strong\u003e and no intermediate temp table.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that you must write a single update statement, \u003cstrong\u003eDO NOT\u003c/strong\u003e write any select statement for this problem.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | m   | 2500   |\r\n| 2  | B    | f   | 1500   |\r\n| 3  | C    | m   | 5500   |\r\n| 4  | D    | f   | 500    |\r\n\u003c/pre\u003e\r\nAfter running your \u003cstrong\u003eupdate\u003c/strong\u003e statement, the above salary table should have the following rows:\r\n\r\n\u003cpre\u003e\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | f   | 2500   |\r\n| 2  | B    | m   | 1500   |\r\n| 3  | C    | f   | 5500   |\r\n| 4  | D    | m   | 500    |\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"交换工资","TranslatedContent":"\u003cp\u003e给定一个\u0026nbsp;\u003ccode\u003esalary\u003c/code\u003e\u0026nbsp;表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。\u003c/p\u003e\n\n\u003cp\u003e注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e例如：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n\u003c/pre\u003e\n\n\u003cp\u003e运行你所编写的更新语句之后，将会得到以下表:\u003c/p\u003e\n\n\u003cpre\u003e| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17546708":{"ID":"17546708","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"627 ms","Memory":"N/A","URL":"/submissions/detail/17546708/","Code":"# Write your MySQL query statement below\nupdate salary \nset sex = case sex when 'm' then 'f' else 'm' end;","Timestamp":"1555998742"}}},{"questionId":"58","questionFrontendId":"58","Title":"Length of Last Word","TitleSlug":"length-of-last-word","Content":"\u003cp\u003eGiven a string \u003ci\u003es\u003c/i\u003e consists of upper/lower-case alphabets and empty space characters \u003ccode\u003e' '\u003c/code\u003e, return the length of last word in the string.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf the last word does not exist, return 0.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e A word is defined as a character sequence consists of non-space characters only.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \"Hello World\"\r\n\u003cb\u003eOutput:\u003c/b\u003e 5\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"最后一个单词的长度","TranslatedContent":"\u003cp\u003e给定一个仅包含大小写字母和空格\u0026nbsp;\u003ccode\u003e\u0026#39; \u0026#39;\u003c/code\u003e\u0026nbsp;的字符串，返回其最后一个单词的长度。\u003c/p\u003e\n\n\u003cp\u003e如果不存在最后一个单词，请返回 0\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e一个单词是指由字母组成，但不包含任何空格的字符串。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;Hello World\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 5\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"12624031":{"ID":"12624031","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"6.5 MB","URL":"/submissions/detail/12624031/","Code":"#\n# @lc app=leetcode.cn id=58 lang=python3\n#\n# [58] 最后一个单词的长度\n#\n# https://leetcode-cn.com/problems/length-of-last-word/description/\n#\n# algorithms\n# Easy (28.32%)\n# Total Accepted:    15.7K\n# Total Submissions: 55.4K\n# Testcase Example:  '\"Hello World\"'\n#\n# 给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n# \n# 如果不存在最后一个单词，请返回 0 。\n# \n# 说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n# \n# 示例:\n# \n# 输入: \"Hello World\"\n# 输出: 5\n# \n# \n#\nclass Solution:\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        r = s.split()\n        if not r:\n            return 0\n        return len(r[-1])\n        \n","Timestamp":"1549967397"},"15006815":{"ID":"15006815","StatusDisplay":"Accepted","Lang":"python3","Runtime":"36 ms","Memory":"13.2 MB","URL":"/submissions/detail/15006815/","Code":"#\n# @lc app=leetcode.cn id=58 lang=python3\n#\n# [58] 最后一个单词的长度\n#\n# https://leetcode-cn.com/problems/length-of-last-word/description/\n#\n# algorithms\n# Easy (28.32%)\n# Total Accepted:    15.7K\n# Total Submissions: 55.4K\n# Testcase Example:  '\"Hello World\"'\n#\n# 给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n# \n# 如果不存在最后一个单词，请返回 0 。\n# \n# 说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n# \n# 示例:\n# \n# 输入: \"Hello World\"\n# 输出: 5\n# \n# \n#\nclass Solution:\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        r = s.split()\n        if not r:\n            return 0\n        return len(r[-1])\n        \n\n","Timestamp":"1552926866"}}},{"questionId":"83","questionFrontendId":"83","Title":"Remove Duplicates from Sorted List","TitleSlug":"remove-duplicates-from-sorted-list","Content":"\u003cp\u003eGiven a sorted linked list, delete all duplicates such that each element appear only \u003cem\u003eonce\u003c/em\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1-\u0026gt;2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;3\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"删除排序链表中的重复元素","TranslatedContent":"\u003cp\u003e给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2\n\u003cstrong\u003e输出:\u003c/strong\u003e 1-\u0026gt;2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;3\n\u003cstrong\u003e输出:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;3\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006887":{"ID":"15006887","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006887/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        p = head\n        while p.next:\n            if p.val == p.next.val:\n                p.next = p.next.next\n            else:\n                p = p.next\n        return head\n\n\n","Timestamp":"1552927495"},"1729226":{"ID":"1729226","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/1729226/","Code":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteDuplicates(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        if head == None or head.next == None:\r\n            return head\r\n        p = head\r\n        while p.next:\r\n            if p.val == p.next.val:\r\n                p.next = p.next.next\r\n            else:\r\n                p = p.next\r\n        return head","Timestamp":"1470554054"},"1729473":{"ID":"1729473","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/1729473/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        p = head\n        while p.next:\n            if p.val == p.next.val:\n                p.next = p.next.next\n            else:\n                p = p.next\n        return head\n","Timestamp":"1519618183"},"7573012":{"ID":"7573012","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"N/A","URL":"/submissions/detail/7573012/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head == None or head.next == None:\n            return head\n        p = head\n        while p.next:\n            if p.val == p.next.val:\n                p.next = p.next.next\n            else:\n                p = p.next\n        return head\n\n","Timestamp":"1536219113"}}},{"questionId":"654","questionFrontendId":"654","Title":"Maximum Binary Tree","TitleSlug":"maximum-binary-tree","Content":"\u003cp\u003e\r\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\r\n\u003col\u003e\r\n\u003cli\u003eThe root is the maximum number in the array. \u003c/li\u003e\r\n\u003cli\u003eThe left subtree is the maximum tree constructed from left part subarray divided by the maximum number.\u003c/li\u003e\r\n\u003cli\u003eThe right subtree is the maximum tree constructed from right part subarray divided by the maximum number.\u003c/li\u003e \r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nConstruct the maximum tree by the given array and output the root node of this tree.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [3,2,1,6,0,5]\r\n\u003cb\u003eOutput:\u003c/b\u003e return the tree root node representing the following tree:\r\n\r\n      6\r\n    /   \\\r\n   3     5\r\n    \\    / \r\n     2  0   \r\n       \\\r\n        1\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe size of the given array will be in the range [1,1000].\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"最大二叉树","TranslatedContent":"\u003cp\u003e给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e二叉树的根是数组中的最大元素。\u003c/li\u003e\n\t\u003cli\u003e左子树是通过数组中最大值左边部分构造出的最大二叉树。\u003c/li\u003e\n\t\u003cli\u003e右子树是通过数组中最大值右边部分构造出的最大二叉树。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e通过给定的数组构建最大二叉树，并且输出这个树的根节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [3,2,1,6,0,5]\n\u003cstrong\u003e输入:\u003c/strong\u003e 返回下面这棵树的根节点：\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给定的数组的大小在 [1, 1000] 之间。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006832":{"ID":"15006832","StatusDisplay":"Accepted","Lang":"python","Runtime":"136 ms","Memory":"11.5 MB","URL":"/submissions/detail/15006832/","Code":"class Solution:\n    def constructMaximumBinaryTree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if nums:\n            max_num = max(nums)\n            i =  nums.index(max_num)\n            tree = TreeNode(max_num)\n            tree.left = self.constructMaximumBinaryTree(nums[:i])\n            if i +1 \u003c len(nums):\n                tree.right = self.constructMaximumBinaryTree(nums[i+1:])\n            return tree\n        \n\n","Timestamp":"1552927007"},"1729420":{"ID":"1729420","StatusDisplay":"Accepted","Lang":"python3","Runtime":"252 ms","Memory":"N/A","URL":"/submissions/detail/1729420/","Code":"class Solution:\n    def constructMaximumBinaryTree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if nums:\n            max_num = max(nums)\n            i =  nums.index(max_num)\n            tree = TreeNode(max_num)\n            tree.left = self.constructMaximumBinaryTree(nums[:i])\n            if i +1 \u003c len(nums):\n                tree.right = self.constructMaximumBinaryTree(nums[i+1:])\n            return tree\n        ","Timestamp":"1506441110"},"7572973":{"ID":"7572973","StatusDisplay":"Accepted","Lang":"python3","Runtime":"344 ms","Memory":"N/A","URL":"/submissions/detail/7572973/","Code":"class Solution:\n    def constructMaximumBinaryTree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        if nums:\n            max_num = max(nums)\n            i =  nums.index(max_num)\n            tree = TreeNode(max_num)\n            tree.left = self.constructMaximumBinaryTree(nums[:i])\n            if i +1 \u003c len(nums):\n                tree.right = self.constructMaximumBinaryTree(nums[i+1:])\n            return tree\n        \n","Timestamp":"1536219029"}}},{"questionId":"1081","questionFrontendId":"1024","Title":"Video Stitching","TitleSlug":"video-stitching","Content":"\u003cp\u003eYou are given a series of video clips from a sporting event that lasted \u003ccode\u003eT\u003c/code\u003e seconds.\u0026nbsp;\u0026nbsp;These video clips can be overlapping with each other and have varied lengths.\u003c/p\u003e\r\n\r\n\u003cp\u003eEach video clip \u003ccode\u003eclips[i]\u003c/code\u003e\u0026nbsp;is an interval: it starts at time \u003ccode\u003eclips[i][0]\u003c/code\u003e and ends at time \u003ccode\u003eclips[i][1]\u003c/code\u003e.\u0026nbsp; We can cut these clips into segments freely: for example, a clip \u003ccode\u003e[0, 7]\u003c/code\u003e can be cut into segments\u0026nbsp;\u003ccode\u003e[0, 1] +\u0026nbsp;[1, 3] + [3, 7]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (\u003ccode\u003e[0, T]\u003c/code\u003e).\u0026nbsp; If the task is impossible, return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eclips = \u003cspan id=\"example-input-1-1\"\u003e[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]\u003c/span\u003e, T = \u003cspan id=\"example-input-1-2\"\u003e10\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nWe take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\r\nThen, we can reconstruct the sporting event as follows:\r\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\r\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eclips = \u003cspan id=\"example-input-2-1\"\u003e[[0,1],[1,2]]\u003c/span\u003e, T = \u003cspan id=\"example-input-2-2\"\u003e5\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e-1\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nWe can\u0026#39;t cover [0,5] with only [0,1] and [0,2].\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eclips = \u003cspan id=\"example-input-3-1\"\u003e[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]]\u003c/span\u003e, T = \u003cspan id=\"example-input-3-2\"\u003e9\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nWe can take clips [0,4], [4,7], and [6,9].\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eclips = \u003cspan id=\"example-input-4-1\"\u003e[[0,4],[2,8]]\u003c/span\u003e, T = \u003cspan id=\"example-input-4-2\"\u003e5\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nNotice you can have extra video after the event ends.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= clips.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= clips[i][0], clips[i][1] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= T \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Medium","TranslatedTitle":"视频拼接","TranslatedContent":"\u003cp\u003e你将会获得一系列视频片段，这些片段来自于一项持续时长为\u0026nbsp;\u003ccode\u003eT\u003c/code\u003e\u0026nbsp;秒的体育赛事。这些片段可能有所重叠，也可能长度不一。\u003c/p\u003e\n\n\u003cp\u003e视频片段\u0026nbsp;\u003ccode\u003eclips[i]\u003c/code\u003e\u0026nbsp;都用区间进行表示：开始于\u0026nbsp;\u003ccode\u003eclips[i][0]\u003c/code\u003e\u0026nbsp;并于\u0026nbsp;\u003ccode\u003eclips[i][1]\u003c/code\u003e\u0026nbsp;结束。我们甚至可以对这些片段自由地再剪辑，例如片段\u0026nbsp;\u003ccode\u003e[0, 7]\u003c/code\u003e\u0026nbsp;可以剪切成\u0026nbsp;\u003ccode\u003e[0, 1] +\u0026nbsp;[1, 3] + [3, 7]\u003c/code\u003e\u0026nbsp;三部分。\u003c/p\u003e\n\n\u003cp\u003e我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（\u003ccode\u003e[0, T]\u003c/code\u003e）。返回所需片段的最小数目，如果无法完成该任务，则返回\u0026nbsp;\u003ccode\u003e-1\u003c/code\u003e 。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eclips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003e\n我们选中 [0,2], [8,10], [1,9] 这三个片段。\n然后，按下面的方案重制比赛片段：\n将 [1,9] 再剪辑为 [1,2] + [2,8] + [8,9] 。\n现在我们手上有 [0,2] + [2,8] + [8,10]，而这些涵盖了整场比赛 [0, 10]。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eclips = [[0,1],[1,2]], T = 5\n\u003cstrong\u003e输出：\u003c/strong\u003e-1\n\u003cstrong\u003e解释：\u003c/strong\u003e\n我们无法只用 [0,1] 和 [0,2] 覆盖 [0,5] 的整个过程。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eclips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释： \u003c/strong\u003e\n我们选取片段 [0,4], [4,7] 和 [6,9] 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eclips = [[0,4],[2,8]], T = 5\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e\n注意，你可能录制超过比赛结束时间的视频。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= clips.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= clips[i][0], clips[i][1] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= T \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16407345":{"ID":"16407345","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"13.2 MB","URL":"/submissions/detail/16407345/","Code":"class Solution:\n    def videoStitching(self, clips: List[List[int]], T: int) -\u003e int:\n        # r = [false for _ in range(T+1)]\n        t = 0\n        res = 0\n        \n        flag = True\n        while flag:\n            it = t\n            flag = False\n            for i in clips:\n                if i[0] \u003c= t and i[1] \u003e it:\n                    it = i[1]\n                    flag = True\n            if flag:\n                t = it\n                res += 1\n            if t \u003e= T:\n                break\n        \n        return res if t \u003e= T else -1\n                      \n        ","Timestamp":"1554608088"},"16670360":{"ID":"16670360","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13.3 MB","URL":"/submissions/detail/16670360/","Code":"class Solution:\n    def videoStitching(self, clips: List[List[int]], T: int) -\u003e int:\n        # r = [false for _ in range(T+1)]\n        t = 0\n        res = 0\n        \n        flag = True\n        while flag:\n            it = t\n            flag = False\n            for i in clips:\n                if i[0] \u003c= t and i[1] \u003e it:\n                    it = i[1]\n                    flag = True\n            if flag:\n                t = it\n                res += 1\n            if t \u003e= T:\n                break\n        \n        return res if t \u003e= T else -1\n                      \n        ","Timestamp":"1554608082"}}},{"questionId":"1007","questionFrontendId":"967","Title":"Numbers With Same Consecutive Differences","TitleSlug":"numbers-with-same-consecutive-differences","Content":"\u003cp\u003eReturn all \u003cstrong\u003enon-negative\u003c/strong\u003e integers of length \u003ccode\u003eN\u003c/code\u003e such that the absolute difference between every two consecutive digits is \u003ccode\u003eK\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that \u003cstrong\u003eevery\u003c/strong\u003e number in the answer \u003cstrong\u003emust not\u003c/strong\u003e have leading zeros \u003cstrong\u003eexcept\u003c/strong\u003e for the number \u003ccode\u003e0\u003c/code\u003e itself. For example, \u003ccode\u003e01\u003c/code\u003e has one leading zero and is invalid, but \u003ccode\u003e0\u003c/code\u003e is valid.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return the answer in any order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eN = \u003cspan id=\"example-input-1-1\"\u003e3\u003c/span\u003e, K = \u003cspan id=\"example-input-1-2\"\u003e7\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[181,292,707,818,929]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eNote that 070 is not a valid number, because it has leading zeroes.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eN = \u003cspan id=\"example-input-2-1\"\u003e2\u003c/span\u003e, K = \u003cspan id=\"example-input-2-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= N \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"连续差相同的数字","TranslatedContent":"\u003cp\u003e返回所有长度为 \u003ccode\u003eN\u003c/code\u003e 且满足其每两个连续位上的数字之间的差的绝对值为 \u003ccode\u003eK\u003c/code\u003e\u0026nbsp;的\u003cstrong\u003e非负整数\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e请注意，\u003cstrong\u003e除了\u003c/strong\u003e数字 \u003ccode\u003e0\u003c/code\u003e 本身之外，答案中的每个数字都\u003cstrong\u003e不能\u003c/strong\u003e有前导零。例如，\u003ccode\u003e01\u003c/code\u003e\u0026nbsp;因为有一个前导零，所以是无效的；但 \u003ccode\u003e0\u003c/code\u003e\u0026nbsp;是有效的。\u003c/p\u003e\n\n\u003cp\u003e你可以按任何顺序返回答案。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eN = 3, K = 7\n\u003cstrong\u003e输出：\u003c/strong\u003e[181,292,707,818,929]\n\u003cstrong\u003e解释：\u003c/strong\u003e注意，070 不是一个有效的数字，因为它有前导零。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eN = 2, K = 1\n\u003cstrong\u003e输出：\u003c/strong\u003e[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= N \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"11050449":{"ID":"11050449","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"6.9 MB","URL":"/submissions/detail/11050449/","Code":"class Solution:\n    def numsSameConsecDiff(self, N, K):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n        if N == 1:\n            return [0,1,2,3,4,5,6,7,8,9]\n        if N == 0:\n            return []\n       \n        res = []\n        def inner(num, N, K):\n            if N == 0:\n                res.append(num)\n                return\n            yushu = num % 10\n            if K != 0:\n                if yushu - K \u003e= 0:\n                    inner(num*10+yushu-K, N-1, K)\n                if yushu + K \u003c 10:\n                    inner(num*10+yushu+K, N-1, K)\n            else:\n                inner(num*10+yushu, N-1, K)\n        for n in range(1, 10):\n            inner(n, N-1, K)\n        return res     \n        ","Timestamp":"1546138673"},"15006938":{"ID":"15006938","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006938/","Code":"class Solution:\n    def numsSameConsecDiff(self, N, K):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n        if N == 1:\n            return [0,1,2,3,4,5,6,7,8,9]\n        if N == 0:\n            return []\n       \n        res = []\n        def inner(num, N, K):\n            if N == 0:\n                res.append(num)\n                return\n            yushu = num % 10\n            if K != 0:\n                if yushu - K \u003e= 0:\n                    inner(num*10+yushu-K, N-1, K)\n                if yushu + K \u003c 10:\n                    inner(num*10+yushu+K, N-1, K)\n            else:\n                inner(num*10+yushu, N-1, K)\n        for n in range(1, 10):\n            inner(n, N-1, K)\n        return res     \n        \n","Timestamp":"1552927891"}}},{"questionId":"463","questionFrontendId":"463","Title":"Island Perimeter","TitleSlug":"island-perimeter","Content":"\u003cp\u003eYou are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.\u003c/p\u003e\r\n\r\n\u003cp\u003eGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\u003c/p\u003e\r\n\r\n\u003cp\u003eThe island doesn\u0026#39;t have \u0026quot;lakes\u0026quot; (water inside that isn\u0026#39;t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don\u0026#39;t exceed 100. Determine the perimeter of the island.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n[[0,1,0,0],\r\n [1,1,1,0],\r\n [0,1,0,0],\r\n [1,1,0,0]]\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 16\r\n\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The perimeter is the 16 yellow stripes in the image below:\r\n\r\n\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/12/island.png\" style=\"width: 221px; height: 213px;\" /\u003e\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"岛屿的周长","TranslatedContent":"\u003cp\u003e给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地\u0026nbsp;0 表示水域。\u003c/p\u003e\n\n\u003cp\u003e网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。\u003c/p\u003e\n\n\u003cp\u003e岛屿中没有\u0026ldquo;湖\u0026rdquo;（\u0026ldquo;湖\u0026rdquo; 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 16\n\n\u003cstrong\u003e解释:\u003c/strong\u003e 它的周长是下面图片中的 16 个黄色的边：\n\n\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\"\u003e\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006791":{"ID":"15006791","StatusDisplay":"Accepted","Lang":"python","Runtime":"180 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006791/","Code":"class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        row = len(grid[0])\n        cos = len(grid)\n        s = 0\n        for r in range(row):\n            for c in range(cos):\n                if grid[c][r]:\n                    count = 0\n                    if r \u003e 0:\n                        if grid[c][r-1]:\n                            count += 1\n                    if r \u003c row - 1:\n                        if grid[c][r+1]:\n                            count += 1\n                    if c \u003e 0:\n                        if grid[c-1][r]:\n                            count += 1\n                    if c \u003c cos - 1:\n                        if grid[c+1][r]:\n                            count += 1\n                    s += 4 - count\n        return s\n        \n\n","Timestamp":"1552926417"},"1729250":{"ID":"1729250","StatusDisplay":"Accepted","Lang":"python","Runtime":"282 ms","Memory":"N/A","URL":"/submissions/detail/1729250/","Code":"class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        row = len(grid[0])\n        cos = len(grid)\n        s = 0\n        for r in range(row):\n            for c in range(cos):\n                if grid[c][r]:\n                    count = 0\n                    if r \u003e 0:\n                        if grid[c][r-1]:\n                            count += 1\n                    if r \u003c row - 1:\n                        if grid[c][r+1]:\n                            count += 1\n                    if c \u003e 0:\n                        if grid[c-1][r]:\n                            count += 1\n                    if c \u003c cos - 1:\n                        if grid[c+1][r]:\n                            count += 1\n                    s += 4 - count\n        return s\n        ","Timestamp":"1501340944"},"7572921":{"ID":"7572921","StatusDisplay":"Accepted","Lang":"python","Runtime":"204 ms","Memory":"N/A","URL":"/submissions/detail/7572921/","Code":"class Solution(object):\n    def islandPerimeter(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        row = len(grid[0])\n        cos = len(grid)\n        s = 0\n        for r in range(row):\n            for c in range(cos):\n                if grid[c][r]:\n                    count = 0\n                    if r \u003e 0:\n                        if grid[c][r-1]:\n                            count += 1\n                    if r \u003c row - 1:\n                        if grid[c][r+1]:\n                            count += 1\n                    if c \u003e 0:\n                        if grid[c-1][r]:\n                            count += 1\n                    if c \u003c cos - 1:\n                        if grid[c+1][r]:\n                            count += 1\n                    s += 4 - count\n        return s\n        \n","Timestamp":"1536218903"}}},{"questionId":"1013","questionFrontendId":"509","Title":"Fibonacci Number","TitleSlug":"fibonacci-number","Content":"\u003cp\u003eThe\u0026nbsp;\u003cb\u003eFibonacci numbers\u003c/b\u003e, commonly denoted\u0026nbsp;\u003ccode\u003eF(n)\u003c/code\u003e\u0026nbsp;form a sequence, called the\u0026nbsp;\u003cb\u003eFibonacci sequence\u003c/b\u003e, such that each number is the sum of the two preceding ones, starting from \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e. That is,\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nF(0) = 0,\u0026nbsp; \u0026nbsp;F(1)\u0026nbsp;= 1\r\nF(N) = F(N - 1) + F(N - 2), for N \u0026gt; 1.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eGiven \u003ccode\u003eN\u003c/code\u003e, calculate \u003ccode\u003eF(N)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e F(2) = F(1) + F(0) = 1 + 0 = 1.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e F(3) = F(2) + F(1) = 1 + 1 = 2.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 4\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e F(4) = F(3) + F(2) = 2 + 1 = 3.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e0 \u0026le; \u003ccode\u003eN\u003c/code\u003e \u0026le; 30.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"斐波那契数","TranslatedContent":"\u003cp\u003e\u003cstrong\u003e斐波那契数\u003c/strong\u003e，通常用\u0026nbsp;\u003ccode\u003eF(n)\u003c/code\u003e 表示，形成的序列称为\u003cstrong\u003e斐波那契数列\u003c/strong\u003e。该数列由\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e 和 \u003ccode\u003e1\u003c/code\u003e 开始，后面的每一项数字都是前面两项数字的和。也就是：\u003c/p\u003e\n\n\u003cpre\u003eF(0) = 0,\u0026nbsp; \u0026nbsp;F(1)\u0026nbsp;= 1\nF(N) = F(N - 1) + F(N - 2), 其中 N \u0026gt; 1.\n\u003c/pre\u003e\n\n\u003cp\u003e给定\u0026nbsp;\u003ccode\u003eN\u003c/code\u003e，计算\u0026nbsp;\u003ccode\u003eF(N)\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e2\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003eF(2) = F(1) + F(0) = 1 + 0 = 1.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e3\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003eF(3) = F(2) + F(1) = 1 + 1 = 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e4\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003eF(4) = F(3) + F(2) = 2 + 1 = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e0 \u0026le; \u003ccode\u003eN\u003c/code\u003e \u0026le; 30\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"11509184":{"ID":"11509184","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1496 ms","Memory":"6.5 MB","URL":"/submissions/detail/11509184/","Code":"class Solution:\n    def fib(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 1:\n            return 1\n        if N == 0:\n            return 0\n        return self.fib(N-1) + self.fib(N-2)\n        ","Timestamp":"1547173454"},"11509557":{"ID":"11509557","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11509557/","Code":"class Solution:\n    \n    \n    def fib(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 0\n        if N == 1:\n            return 1\n        a, b = 0, 1\n        for _ in range(N-1):\n            a, b = b, a+b\n        return b\n            \n        ","Timestamp":"1547173705"},"15006793":{"ID":"15006793","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006793/","Code":"class Solution:\n    \n    \n    def fib(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 0\n        if N == 1:\n            return 1\n        a, b = 0, 1\n        for _ in range(N-1):\n            a, b = b, a+b\n        return b\n            \n        \n","Timestamp":"1552926439"}}},{"questionId":"389","questionFrontendId":"389","Title":"Find the Difference","TitleSlug":"find-the-difference","Content":"\u003cp\u003e\r\nGiven two strings \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e and \u003cb\u003e\u003ci\u003et\u003c/i\u003e\u003c/b\u003e which consist of only lowercase letters.\u003c/p\u003e\r\n\r\n\u003cp\u003eString \u003cb\u003e\u003ci\u003et\u003c/i\u003e\u003c/b\u003e is generated by random shuffling string \u003cb\u003e\u003ci\u003es\u003c/i\u003e\u003c/b\u003e and then add one more letter at a random position.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind the letter that was added in \u003cb\u003e\u003ci\u003et\u003c/i\u003e\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"找不同","TranslatedContent":"\u003cp\u003e给定两个字符串 \u003cem\u003e\u003cstrong\u003es\u003c/strong\u003e\u003c/em\u003e 和 \u003cem\u003e\u003cstrong\u003et\u003c/strong\u003e\u003c/em\u003e，它们只包含小写字母。\u003c/p\u003e\n\n\u003cp\u003e字符串\u0026nbsp;\u003cstrong\u003e\u003cem\u003et\u003c/em\u003e\u003c/strong\u003e\u0026nbsp;由字符串\u0026nbsp;\u003cstrong\u003e\u003cem\u003es\u003c/em\u003e\u003c/strong\u003e\u0026nbsp;随机重排，然后在随机位置添加一个字母。\u003c/p\u003e\n\n\u003cp\u003e请找出在 \u003cem\u003e\u003cstrong\u003et\u003c/strong\u003e\u003c/em\u003e 中被添加的字母。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e输入：\ns = \u0026quot;abcd\u0026quot;\nt = \u0026quot;abcde\u0026quot;\n\n输出：\ne\n\n解释：\n\u0026#39;e\u0026#39; 是那个被添加的字母。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006765":{"ID":"15006765","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006765/","Code":"class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        letters={}\n        for l in t:\n            if l not in letters:\n                letters[l] = 1\n            else:\n                letters[l] += 1\n        for b in s:\n            letters[b] -= 1\n        for k,v in letters.items():\n            if v != 0:\n                return k\n        return\n\n","Timestamp":"1552925977"},"1729302":{"ID":"1729302","StatusDisplay":"Accepted","Lang":"python","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/1729302/","Code":"class Solution(object):\r\n    def findTheDifference(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        \"\"\"\r\n        letters={}\r\n        for l in t:\r\n            if l not in letters:\r\n                letters[l] = 1\r\n            else:\r\n                letters[l] += 1\r\n        for b in s:\r\n            letters[b] -= 1\r\n        for k,v in letters.items():\r\n            if v != 0:\r\n                return k\r\n        return","Timestamp":"1472521548"},"1729425":{"ID":"1729425","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/1729425/","Code":"class Solution(object):\r\n    def findTheDifference(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        \"\"\"\r\n        letters={}\r\n        for l in t:\r\n            if l not in letters:\r\n                letters[l] = 1\r\n            else:\r\n                letters[l] += 1\r\n        for b in s:\r\n            letters[b] -= 1\r\n        for k,v in letters.items():\r\n            if v != 0:\r\n                return k\r\n        return","Timestamp":"1472521576"},"7572877":{"ID":"7572877","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7572877/","Code":"class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        letters={}\n        for l in t:\n            if l not in letters:\n                letters[l] = 1\n            else:\n                letters[l] += 1\n        for b in s:\n            letters[b] -= 1\n        for k,v in letters.items():\n            if v != 0:\n                return k\n        return\n","Timestamp":"1536218836"}}},{"questionId":"7","questionFrontendId":"7","Title":"Reverse Integer","TitleSlug":"reverse-integer","Content":"\u003cp\u003eGiven a 32-bit signed integer, reverse digits of an integer.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 123\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 321\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e -123\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e -321\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 120\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 21\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cbr /\u003e\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u0026minus;2\u003csup\u003e31\u003c/sup\u003e,\u0026nbsp; 2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"整数反转","TranslatedContent":"\u003cp\u003e给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 123\n\u003cstrong\u003e输出:\u003c/strong\u003e 321\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u0026nbsp;示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e -123\n\u003cstrong\u003e输出:\u003c/strong\u003e -321\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 120\n\u003cstrong\u003e输出:\u003c/strong\u003e 21\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为\u0026nbsp;[\u0026minus;2\u003csup\u003e31\u003c/sup\u003e,\u0026nbsp; 2\u003csup\u003e31\u0026nbsp;\u003c/sup\u003e\u0026minus; 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006844":{"ID":"15006844","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006844/","Code":"class Solution:\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x \u003c 0:\n            x = -x\n            res = -int(str(x)[::-1])\n        else:\n            res = int(str(x)[::-1])\n        if res \u003c - 2**31:\n            return 0\n        elif res \u003e 2**31 -1:\n            return 0\n        else:\n            return res\n        \n\n","Timestamp":"1552927139"},"2277808":{"ID":"2277808","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/2277808/","Code":"class Solution:\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x \u003c 0:\n            x = -x\n            res = -int(str(x)[::-1])\n        else:\n            res = int(str(x)[::-1])\n        if res \u003c - 2**31:\n            return 0\n        elif res \u003e 2**31 -1:\n            return 0\n        else:\n            return res\n        ","Timestamp":"1526313978"},"7572986":{"ID":"7572986","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/7572986/","Code":"class Solution:\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x \u003c 0:\n            x = -x\n            res = -int(str(x)[::-1])\n        else:\n            res = int(str(x)[::-1])\n        if res \u003c - 2**31:\n            return 0\n        elif res \u003e 2**31 -1:\n            return 0\n        else:\n            return res\n        \n","Timestamp":"1536219075"}}},{"questionId":"919","questionFrontendId":"883","Title":"Projection Area of 3D Shapes","TitleSlug":"projection-area-of-3d-shapes","Content":"\u003cp\u003eOn a\u0026nbsp;\u003ccode\u003eN\u0026nbsp;*\u0026nbsp;N\u003c/code\u003e grid, we place some\u0026nbsp;\u003ccode\u003e1 * 1 * 1\u0026nbsp;\u003c/code\u003ecubes that are axis-aligned with the x, y, and z axes.\u003c/p\u003e\r\n\r\n\u003cp\u003eEach value\u0026nbsp;\u003ccode\u003ev = grid[i][j]\u003c/code\u003e\u0026nbsp;represents a tower of\u0026nbsp;\u003ccode\u003ev\u003c/code\u003e\u0026nbsp;cubes placed on top of grid cell \u003ccode\u003e(i, j)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow we view the\u0026nbsp;\u003cem\u003eprojection\u003c/em\u003e\u0026nbsp;of these cubes\u0026nbsp;onto the xy, yz, and zx planes.\u003c/p\u003e\r\n\r\n\u003cp\u003eA projection is like a shadow, that\u0026nbsp;maps our 3 dimensional figure to a 2 dimensional plane.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eHere, we are viewing the \u0026quot;shadow\u0026quot; when looking at the cubes from the top, the front, and the side.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the total area of all three projections.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[[2]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e5\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[[1,2],[3,4]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e17\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nHere are the three projections (\u0026quot;shadows\u0026quot;) of the shape made with each axis-aligned plane.\r\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 749px; height: 200px;\" /\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[[1,0],[0,2]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e8\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-4-1\"\u003e[[1,1,1],[1,0,1],[1,1,1]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e14\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-5-1\"\u003e[[2,2,2],[2,1,2],[2,2,2]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-5\"\u003e21\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= grid.length = grid[0].length\u0026nbsp;\u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= grid[i][j] \u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"三维形体投影面积","TranslatedContent":"\u003cp\u003e在\u0026nbsp;\u003ccode\u003eN\u0026nbsp;*\u0026nbsp;N\u003c/code\u003e\u0026nbsp;的网格中，我们放置了一些与 x，y，z 三轴对齐的\u0026nbsp;\u003ccode\u003e1 * 1 * 1\u003c/code\u003e\u0026nbsp;立方体。\u003c/p\u003e\n\n\u003cp\u003e每个值\u0026nbsp;\u003ccode\u003ev = grid[i][j]\u003c/code\u003e\u0026nbsp;表示 \u003ccode\u003ev\u003c/code\u003e\u0026nbsp;个正方体叠放在单元格\u0026nbsp;\u003ccode\u003e(i, j)\u003c/code\u003e\u0026nbsp;上。\u003c/p\u003e\n\n\u003cp\u003e现在，我们查看这些立方体在 xy、yz\u0026nbsp;和 zx\u0026nbsp;平面上的\u003cem\u003e投影\u003c/em\u003e。\u003c/p\u003e\n\n\u003cp\u003e投影就像影子，将三维形体映射到一个二维平面上。\u003c/p\u003e\n\n\u003cp\u003e在这里，从顶部、前面和侧面看立方体时，我们会看到\u0026ldquo;影子\u0026rdquo;。\u003c/p\u003e\n\n\u003cp\u003e返回所有三个投影的总面积。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[2]]\n\u003cstrong\u003e输出：\u003c/strong\u003e5\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,2],[3,4]]\n\u003cstrong\u003e输出：\u003c/strong\u003e17\n\u003cstrong\u003e解释：\u003c/strong\u003e\n这里有该形体在三个轴对齐平面上的三个投影(\u0026ldquo;阴影部分\u0026rdquo;)。\n\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"height: 200px; width: 749px;\"\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,0],[0,2]]\n\u003cstrong\u003e输出：\u003c/strong\u003e8\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,1,1],[1,0,1],[1,1,1]]\n\u003cstrong\u003e输出：\u003c/strong\u003e14\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 5：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[2,2,2],[2,1,2],[2,2,2]]\n\u003cstrong\u003e输出：\u003c/strong\u003e21\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= grid.length = grid[0].length\u0026nbsp;\u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= grid[i][j] \u0026lt;= 50\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006907":{"ID":"15006907","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006907/","Code":"class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        N = len(grid)\n        ans = 0\n\n        for i in xrange(N):\n            best_row = 0  # max of grid[i][j]\n            best_col = 0  # max of grid[j][i]\n            for j in xrange(N):\n                if grid[i][j]: ans += 1  # top shadow\n                best_row = max(best_row, grid[i][j])\n                best_col = max(best_col, grid[j][i])\n\n            ans += best_row + best_col\n\n        return ans\n        \n","Timestamp":"1552927642"},"7984213":{"ID":"7984213","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7984213/","Code":"class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        N = len(grid)\n        ans = 0\n\n        for i in xrange(N):\n            best_row = 0  # max of grid[i][j]\n            best_col = 0  # max of grid[j][i]\n            for j in xrange(N):\n                if grid[i][j]: ans += 1  # top shadow\n                best_row = max(best_row, grid[i][j])\n                best_col = max(best_col, grid[j][i])\n\n            ans += best_row + best_col\n\n        return ans\n        ","Timestamp":"1538986667"}}},{"questionId":"217","questionFrontendId":"217","Title":"Contains Duplicate","TitleSlug":"contains-duplicate","Content":"\u003cp\u003eGiven an array of integers, find if the array contains any duplicates.\u003c/p\u003e\r\n\r\n\u003cp\u003eYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,2,3,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[1,2,3,4]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[1,1,1,3,3,4,3,2,4,2]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"存在重复元素","TranslatedContent":"\u003cp\u003e给定一个整数数组，判断是否存在重复元素。\u003c/p\u003e\n\n\u003cp\u003e如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e[1,2,3,4]\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e[1,1,1,3,3,4,3,2,4,2]\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006703":{"ID":"15006703","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"14.7 MB","URL":"/submissions/detail/15006703/","Code":"class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(set(nums)) \u003c len(nums)\n        \n\n","Timestamp":"1552925491"},"1958377":{"ID":"1958377","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/1958377/","Code":"class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(set(nums)) \u003c len(nums)\n        ","Timestamp":"1525411321"},"7572765":{"ID":"7572765","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7572765/","Code":"class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(set(nums)) \u003c len(nums)\n        \n","Timestamp":"1536218629"}}},{"questionId":"647","questionFrontendId":"647","Title":"Palindromic Substrings","TitleSlug":"palindromic-substrings","Content":"\u003cp\u003eGiven a string, your task is to count how many palindromic substrings in this string.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u0026quot;abc\u0026quot;\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e Three palindromic strings: \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u0026quot;aaa\u0026quot;\r\n\u003cb\u003eOutput:\u003c/b\u003e 6\r\n\u003cb\u003eExplanation:\u003c/b\u003e Six palindromic strings: \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;aa\u0026quot;, \u0026quot;aa\u0026quot;, \u0026quot;aaa\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe input string length won\u0026#39;t exceed 1000.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"回文子串","TranslatedContent":"\u003cp\u003e给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。\u003c/p\u003e\n\n\u003cp\u003e具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;abc\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解释:\u003c/strong\u003e 三个回文子串: \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;aaa\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 6\n\u003cstrong\u003e说明:\u003c/strong\u003e 6个回文子串: \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;aa\u0026quot;, \u0026quot;aa\u0026quot;, \u0026quot;aaa\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e输入的字符串长度不会超过1000。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006831":{"ID":"15006831","StatusDisplay":"Accepted","Lang":"python","Runtime":"700 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006831/","Code":"class Solution(object):\n    def countSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for n in xrange(1, len(s)+1):\n            for x in xrange(len(s)-n+1):\n                if s[x:x+n] == s[x:x+n][::-1]:\n                    count += 1\n        return count\n        \n\n","Timestamp":"1552926992"},"1729357":{"ID":"1729357","StatusDisplay":"Accepted","Lang":"python","Runtime":"1202 ms","Memory":"N/A","URL":"/submissions/detail/1729357/","Code":"class Solution(object):\n    def countSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for n in xrange(1, len(s)+1):\n            for x in xrange(len(s)-n+1):\n                if s[x:x+n] == s[x:x+n][::-1]:\n                    count += 1\n        return count\n        ","Timestamp":"1501339312"},"7572963":{"ID":"7572963","StatusDisplay":"Accepted","Lang":"python","Runtime":"1308 ms","Memory":"N/A","URL":"/submissions/detail/7572963/","Code":"class Solution(object):\n    def countSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for n in xrange(1, len(s)+1):\n            for x in xrange(len(s)-n+1):\n                if s[x:x+n] == s[x:x+n][::-1]:\n                    count += 1\n        return count\n        \n","Timestamp":"1536219022"}}},{"questionId":"620","questionFrontendId":"620","Title":"Not Boring Movies","TitleSlug":"not-boring-movies","Content":"X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies\u0026rsquo; ratings and descriptions.\r\n\u003cp\u003ePlease write a SQL query to output movies with an odd numbered ID and a description that is not \u0026#39;boring\u0026#39;. Order the result by rating.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, table \u003ccode\u003ecinema\u003c/code\u003e:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   1     | War       |   great 3D   |   8.9     |\r\n|   2     | Science   |   fiction    |   8.5     |\r\n|   3     | irish     |   boring     |   6.2     |\r\n|   4     | Ice song  |   Fantacy    |   8.6     |\r\n|   5     | House card|   Interesting|   9.1     |\r\n+---------+-----------+--------------+-----------+\r\n\u003c/pre\u003e\r\nFor the example above, the output should be:\r\n\r\n\u003cpre\u003e\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   5     | House card|   Interesting|   9.1     |\r\n|   1     | War       |   great 3D   |   8.9     |\r\n+---------+-----------+--------------+-----------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"有趣的电影","TranslatedContent":"\u003cp\u003e某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。\u003c/p\u003e\n\n\u003cp\u003e作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为\u003cstrong\u003e非\u003c/strong\u003e\u0026nbsp;\u003ccode\u003eboring\u003c/code\u003e\u0026nbsp;(不无聊)\u0026nbsp;的并且\u003cstrong\u003e id 为奇数\u0026nbsp;\u003c/strong\u003e的影片，结果请按等级 \u003ccode\u003erating\u003c/code\u003e 排列。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e例如，下表 \u003ccode\u003ecinema\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n\u003c/pre\u003e\n\n\u003cp\u003e对于上面的例子，则正确的输出是为：\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"17546403":{"ID":"17546403","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"235 ms","Memory":"N/A","URL":"/submissions/detail/17546403/","Code":"# Write your MySQL query statement below\nselect id, movie, description, rating \nfrom cinema \nwhere id%2 = 1 and description != \"boring\"\norder by rating desc","Timestamp":"1555998361"}}},{"questionId":"21","questionFrontendId":"21","Title":"Merge Two Sorted Lists","TitleSlug":"merge-two-sorted-lists","Content":"\u003cp\u003eMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 1-\u003e2-\u003e4, 1-\u003e3-\u003e4\r\n\u003cb\u003eOutput:\u003c/b\u003e 1-\u003e1-\u003e2-\u003e3-\u003e4-\u003e4\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"合并两个有序链表","TranslatedContent":"\u003cp\u003e将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e1-\u0026gt;2-\u0026gt;4, 1-\u0026gt;3-\u0026gt;4\n\u003cstrong\u003e输出：\u003c/strong\u003e1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11174642":{"ID":"11174642","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"6.5 MB","URL":"/submissions/detail/11174642/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val \u003e l2.val:\n            l1, l2 = l2, l1\n        head = l1    \n        while l2:\n            if not l1.next:\n                l1.next = l2\n                break\n            if l1.next.val \u003e l2.val:\n                tmp = l2.next\n                l2.next = l1.next\n                l1.next = l2\n                l2 = tmp\n            t = head\n            l1 = l1.next \n                        \n        return head","Timestamp":"1546501846"},"15006699":{"ID":"15006699","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006699/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val \u003e l2.val:\n            l1, l2 = l2, l1\n        head = l1    \n        while l2:\n            if not l1.next:\n                l1.next = l2\n                break\n            if l1.next.val \u003e l2.val:\n                tmp = l2.next\n                l2.next = l1.next\n                l1.next = l2\n                l2 = tmp\n            t = head\n            l1 = l1.next \n                        \n        return head\n","Timestamp":"1552925456"},"7907644":{"ID":"7907644","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/7907644/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val \u003e l2.val:\n            l1, l2 = l2, l1\n        head = l1    \n        while l2:\n            if not l1.next:\n                l1.next = l2\n                break\n            if l1.next.val \u003e l2.val:\n                tmp = l2.next\n                l2.next = l1.next\n                l1.next = l2\n                l2 = tmp\n            t = head\n            l1 = l1.next \n                        \n        return head\n                \n        ","Timestamp":"1538801299"}}},{"questionId":"136","questionFrontendId":"136","Title":"Single Number","TitleSlug":"single-number","Content":"\u003cp\u003eGiven a \u003cstrong\u003enon-empty\u003c/strong\u003e\u0026nbsp;array of integers, every element appears \u003cem\u003etwice\u003c/em\u003e except for one. Find that single one.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [2,2,1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [4,1,2,1,2]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"只出现一次的数字","TranslatedContent":"\u003cp\u003e给定一个\u003cstrong\u003e非空\u003c/strong\u003e整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [2,2,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [4,1,2,1,2]\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006664":{"ID":"15006664","StatusDisplay":"Accepted","Lang":"golang","Runtime":"68 ms","Memory":"4.7 MB","URL":"/submissions/detail/15006664/","Code":"func singleNumber(nums []int) int {\n\tres := 0\n\tfor i, x := range nums {\n\t\tprint(i)\n\t\tres ^= x\n\t}\n\treturn res\n}\n\n\n","Timestamp":"1552925195"},"1729181":{"ID":"1729181","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/1729181/","Code":"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        if len(nums) == 1:\r\n            return nums[0]\r\n        sum = 0\r\n        for i in nums:\r\n            sum ^=i\r\n        return sum","Timestamp":"1472038938"},"1729301":{"ID":"1729301","StatusDisplay":"Accepted","Lang":"python","Runtime":"42 ms","Memory":"N/A","URL":"/submissions/detail/1729301/","Code":"class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        sum = 0\n        for i in nums:\n            sum ^=i\n        return sum\n","Timestamp":"1519618674"},"1729307":{"ID":"1729307","StatusDisplay":"Accepted","Lang":"golang","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/1729307/","Code":"func singleNumber(nums []int) int {\n\tres := 0\n\tfor i, x := range nums {\n\t\tprint(i)\n\t\tres ^= x\n\t}\n\treturn res\n}\n","Timestamp":"1519619090"},"1729442":{"ID":"1729442","StatusDisplay":"Accepted","Lang":"golang","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/1729442/","Code":"func singleNumber(nums []int) int {\n\tres := 0\n\tfor i, x := range nums {\n\t\tprint(i)\n\t\tres ^= x\n\t}\n\treturn res\n}\n","Timestamp":"1519619078"},"1729461":{"ID":"1729461","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729461/","Code":"class Solution:\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        sum = 0\n        for i in nums:\n            sum ^=i\n        return sum \n","Timestamp":"1519618899"},"7572742":{"ID":"7572742","StatusDisplay":"Accepted","Lang":"golang","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/7572742/","Code":"func singleNumber(nums []int) int {\n\tres := 0\n\tfor i, x := range nums {\n\t\tprint(i)\n\t\tres ^= x\n\t}\n\treturn res\n}\n\n","Timestamp":"1536218555"}}},{"questionId":"496","questionFrontendId":"496","Title":"Next Greater Element I","TitleSlug":"next-greater-element-i","Content":"\u003cp\u003e\r\nYou are given two arrays \u003cb\u003e(without duplicates)\u003c/b\u003e \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e where \u003ccode\u003enums1\u003c/code\u003e’s elements are subset of \u003ccode\u003enums2\u003c/code\u003e. Find all the next greater numbers for \u003ccode\u003enums1\u003c/code\u003e's elements in the corresponding places of \u003ccode\u003enums2\u003c/code\u003e. \r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nThe Next Greater Number of a number \u003cb\u003ex\u003c/b\u003e in \u003ccode\u003enums1\u003c/code\u003e is the first greater number to its right in \u003ccode\u003enums2\u003c/code\u003e. If it does not exist, output -1 for this number.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003cb\u003enums1\u003c/b\u003e = [4,1,2], \u003cb\u003enums2\u003c/b\u003e = [1,3,4,2].\r\n\u003cb\u003eOutput:\u003c/b\u003e [-1,3,-1]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u003cb\u003enums1\u003c/b\u003e = [2,4], \u003cb\u003enums2\u003c/b\u003e = [1,2,3,4].\r\n\u003cb\u003eOutput:\u003c/b\u003e [3,-1]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eAll elements in \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e are unique.\u003c/li\u003e\r\n\u003cli\u003eThe length of both \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e would not exceed 1000.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"下一个更大元素 I","TranslatedContent":"\u003cp\u003e给定两个\u003cstrong\u003e没有重复元素\u003c/strong\u003e的数组\u0026nbsp;\u003ccode\u003enums1\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003enums2\u003c/code\u003e\u0026nbsp;，其中\u003ccode\u003enums1\u003c/code\u003e\u0026nbsp;是\u0026nbsp;\u003ccode\u003enums2\u003c/code\u003e\u0026nbsp;的子集。找到\u0026nbsp;\u003ccode\u003enums1\u003c/code\u003e\u0026nbsp;中每个元素在\u0026nbsp;\u003ccode\u003enums2\u003c/code\u003e\u0026nbsp;中的下一个比其大的值。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enums1\u003c/code\u003e\u0026nbsp;中数字\u0026nbsp;\u003cstrong\u003ex\u003c/strong\u003e\u0026nbsp;的下一个更大元素是指\u0026nbsp;\u003cstrong\u003ex\u003c/strong\u003e\u0026nbsp;在\u0026nbsp;\u003ccode\u003enums2\u003c/code\u003e\u0026nbsp;中对应位置的右边的第一个比\u0026nbsp;\u003cstrong\u003ex\u0026nbsp;\u003c/strong\u003e大的元素。如果不存在，对应位置输出-1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u003cstrong\u003enums1\u003c/strong\u003e = [4,1,2], \u003cstrong\u003enums2\u003c/strong\u003e = [1,3,4,2].\n\u003cstrong\u003e输出:\u003c/strong\u003e [-1,3,-1]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。\n    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。\n    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \u003cstrong\u003enums1\u003c/strong\u003e = [2,4], \u003cstrong\u003enums2\u003c/strong\u003e = [1,2,3,4].\n\u003cstrong\u003e输出:\u003c/strong\u003e [3,-1]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n\u0026nbsp;   对于num1中的数字2，第二个数组中的下一个较大数字是3。\n    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003enums1\u003c/code\u003e和\u003ccode\u003enums2\u003c/code\u003e中所有元素是唯一的。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enums1\u003c/code\u003e和\u003ccode\u003enums2\u003c/code\u003e\u0026nbsp;的数组大小都不超过1000。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006790":{"ID":"15006790","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006790/","Code":"class Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        def b():\n            x = nums.index(n)\n            for c in range(x,len(nums)-1):\n                a = nums[c+1]\n                if a \u003e n:\n                    return a\n            else:\n                return -1\n        for n in findNums:\n            ans.append(b())\n            \n        return ans\n\n","Timestamp":"1552926409"},"1729290":{"ID":"1729290","StatusDisplay":"Accepted","Lang":"python","Runtime":"116 ms","Memory":"N/A","URL":"/submissions/detail/1729290/","Code":"class Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        def b():\n            x = nums.index(n)\n            for c in range(x,len(nums)-1):\n                a = nums[c+1]\n                if a \u003e n:\n                    return a\n            else:\n                return -1\n        for n in findNums:\n            ans.append(b())\n            \n        return ans","Timestamp":"1501348333"},"1729366":{"ID":"1729366","StatusDisplay":"Accepted","Lang":"python","Runtime":"122 ms","Memory":"N/A","URL":"/submissions/detail/1729366/","Code":"class Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        def b():\n            x = nums.index(n)\n            for c in range(x,len(nums)-1):\n                a = nums[c+1]\n                if a \u003e n:\n                    return a\n            else:\n                return -1\n        for n in findNums:\n            ans.append(b())\n            \n        return ans","Timestamp":"1501378250"},"1729394":{"ID":"1729394","StatusDisplay":"Accepted","Lang":"python","Runtime":"189 ms","Memory":"N/A","URL":"/submissions/detail/1729394/","Code":"class Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        def b():\n            x = nums.index(n)\n            for c in range(x,len(nums)-1):\n                print c\n                a = nums[c+1]\n                x+=1\n                if a \u003e n:\n                    return a\n            else:\n                return -1\n        for n in findNums:\n            ans.append(b())\n            \n        return ans","Timestamp":"1501348313"},"7572923":{"ID":"7572923","StatusDisplay":"Accepted","Lang":"python","Runtime":"100 ms","Memory":"N/A","URL":"/submissions/detail/7572923/","Code":"class Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        def b():\n            x = nums.index(n)\n            for c in range(x,len(nums)-1):\n                a = nums[c+1]\n                if a \u003e n:\n                    return a\n            else:\n                return -1\n        for n in findNums:\n            ans.append(b())\n            \n        return ans\n","Timestamp":"1536218914"}}},{"questionId":"387","questionFrontendId":"387","Title":"First Unique Character in a String","TitleSlug":"first-unique-character-in-a-string","Content":"\u003cp\u003e\r\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\r\n\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\r\n\u003cpre\u003e\r\ns = \"leetcode\"\r\nreturn 0.\r\n\r\ns = \"loveleetcode\",\r\nreturn 2.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\n\u003cb\u003eNote:\u003c/b\u003e You may assume the string contain only lowercase letters.\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"字符串中的第一个唯一字符","TranslatedContent":"\u003cp\u003e给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e案例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\ns = \u0026quot;leetcode\u0026quot;\n返回 0.\n\ns = \u0026quot;loveleetcode\u0026quot;,\n返回 2.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意事项：\u003c/strong\u003e您可以假定该字符串只包含小写字母。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006784":{"ID":"15006784","StatusDisplay":"Accepted","Lang":"python","Runtime":"288 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006784/","Code":"class Solution:\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        bucket = {chr(k):0 for k in range(97,123)}\n        for i, k in enumerate(s):\n            if bucket[k] == 0:\n                bucket[k] = i+1\n            elif bucket[k] \u003e 0:\n                bucket[k] = -1\n       \n        for i, k in enumerate(s):\n            if bucket[k] \u003e 0:\n                return i\n        else:\n            return -1\n\n","Timestamp":"1552926321"},"2034552":{"ID":"2034552","StatusDisplay":"Accepted","Lang":"python3","Runtime":"232 ms","Memory":"N/A","URL":"/submissions/detail/2034552/","Code":"class Solution:\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        bucket = {chr(k):0 for k in range(97,123)}\n        for i, k in enumerate(s):\n            if bucket[k] == 0:\n                bucket[k] = i+1\n            elif bucket[k] \u003e 0:\n                bucket[k] = -1\n       \n        for i, k in enumerate(s):\n            if bucket[k] \u003e 0:\n                return i\n        else:\n            return -1","Timestamp":"1525664137"},"7572869":{"ID":"7572869","StatusDisplay":"Accepted","Lang":"python3","Runtime":"312 ms","Memory":"N/A","URL":"/submissions/detail/7572869/","Code":"class Solution:\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        bucket = {chr(k):0 for k in range(97,123)}\n        for i, k in enumerate(s):\n            if bucket[k] == 0:\n                bucket[k] = i+1\n            elif bucket[k] \u003e 0:\n                bucket[k] = -1\n       \n        for i, k in enumerate(s):\n            if bucket[k] \u003e 0:\n                return i\n        else:\n            return -1\n","Timestamp":"1536218825"}}},{"questionId":"12","questionFrontendId":"12","Title":"Integer to Roman","TitleSlug":"integer-to-roman","Content":"\u003cp\u003eRoman numerals are represented by seven different symbols:\u0026nbsp;\u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e and \u003ccode\u003eM\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eSymbol\u003c/strong\u003e       \u003cstrong\u003eValue\u003c/strong\u003e\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example,\u0026nbsp;two is written as \u003ccode\u003eII\u003c/code\u003e\u0026nbsp;in Roman numeral, just two one\u0026#39;s added together. Twelve is written as, \u003ccode\u003eXII\u003c/code\u003e, which is simply \u003ccode\u003eX\u003c/code\u003e + \u003ccode\u003eII\u003c/code\u003e. The number twenty seven is written as \u003ccode\u003eXXVII\u003c/code\u003e, which is \u003ccode\u003eXX\u003c/code\u003e + \u003ccode\u003eV\u003c/code\u003e + \u003ccode\u003eII\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \u003ccode\u003eIIII\u003c/code\u003e. Instead, the number four is written as \u003ccode\u003eIV\u003c/code\u003e. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \u003ccode\u003eIX\u003c/code\u003e. There are six instances where subtraction is used:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e can be placed before \u003ccode\u003eV\u003c/code\u003e (5) and \u003ccode\u003eX\u003c/code\u003e (10) to make 4 and 9.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e can be placed before \u003ccode\u003eL\u003c/code\u003e (50) and \u003ccode\u003eC\u003c/code\u003e (100) to make 40 and 90.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e can be placed before \u003ccode\u003eD\u003c/code\u003e (500) and \u003ccode\u003eM\u003c/code\u003e (1000) to make 400 and 900.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;III\u0026quot;\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;4\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;IV\u0026quot;\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;9\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;IX\u0026quot;\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;58\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;LVIII\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e L = 50, V = 5, III = 3.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;1994\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;MCMXCIV\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e M = 1000, CM = 900, XC = 90 and IV = 4.\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"整数转罗马数字","TranslatedContent":"\u003cp\u003e罗马数字包含以下七种字符：\u0026nbsp;\u003ccode\u003eI\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eL\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e，\u003ccode\u003eD\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eM\u003c/code\u003e。\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e字符\u003c/strong\u003e          \u003cstrong\u003e数值\u003c/strong\u003e\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\u003c/pre\u003e\n\n\u003cp\u003e例如， 罗马数字 2 写做\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;，即为两个并列的 1。12 写做\u0026nbsp;\u003ccode\u003eXII\u003c/code\u003e\u0026nbsp;，即为\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;。 27 写做\u0026nbsp;\u0026nbsp;\u003ccode\u003eXXVII\u003c/code\u003e, 即为\u0026nbsp;\u003ccode\u003eXX\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做\u0026nbsp;\u003ccode\u003eIIII\u003c/code\u003e，而是\u0026nbsp;\u003ccode\u003eIV\u003c/code\u003e。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为\u0026nbsp;\u003ccode\u003eIX\u003c/code\u003e。这个特殊的规则只适用于以下六种情况：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e\u0026nbsp;(5) 和\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;(10) 的左边，来表示 4 和 9。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eL\u003c/code\u003e\u0026nbsp;(50) 和\u0026nbsp;\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;(100) 的左边，来表示 40 和\u0026nbsp;90。\u0026nbsp;\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eD\u003c/code\u003e\u0026nbsp;(500) 和\u0026nbsp;\u003ccode\u003eM\u003c/code\u003e\u0026nbsp;(1000) 的左边，来表示\u0026nbsp;400 和\u0026nbsp;900。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e给定一个整数，将其转为罗马数字。输入确保在 1\u0026nbsp;到 3999 的范围内。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;3\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;III\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;4\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;IV\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;9\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;IX\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;58\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;LVIII\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e L = 50, V = 5, III = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;1994\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;MCMXCIV\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e M = 1000, CM = 900, XC = 90, IV = 4.\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006655":{"ID":"15006655","StatusDisplay":"Accepted","Lang":"python","Runtime":"80 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006655/","Code":"class Solution:\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        res += (num // 1000)*'M'\n        num %= 1000\n        res += (num // 900) * 'CM'\n        num %= 900\n        res += (num // 500) * 'D'\n        num %= 500\n        res += (num // 400) * 'CD'\n        num %= 400\n        res += (num // 100) * 'C'\n        num %= 100\n        res += (num // 90) * 'XC'\n        num %= 90\n        res += (num // 50) * 'L'\n        num %= 50\n        res += (num // 40) * 'XL'\n        num %= 40\n        res += (num // 10) * 'X'\n        num %= 10\n        res += (num // 9) * 'IX'\n        num %= 9\n        res += (num // 5) * 'V'\n        num %= 5\n        res += (num // 4) * 'IV'\n        num %= 4\n        res += (num // 1) * 'I'\n        return res\n","Timestamp":"1552925098"},"8474519":{"ID":"8474519","StatusDisplay":"Accepted","Lang":"python3","Runtime":"192 ms","Memory":"N/A","URL":"/submissions/detail/8474519/","Code":"class Solution:\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        res = ''\n        res += (num // 1000)*'M'\n        num %= 1000\n        res += (num // 900) * 'CM'\n        num %= 900\n        res += (num // 500) * 'D'\n        num %= 500\n        res += (num // 400) * 'CD'\n        num %= 400\n        res += (num // 100) * 'C'\n        num %= 100\n        res += (num // 90) * 'XC'\n        num %= 90\n        res += (num // 50) * 'L'\n        num %= 50\n        res += (num // 40) * 'XL'\n        num %= 40\n        res += (num // 10) * 'X'\n        num %= 10\n        res += (num // 9) * 'IX'\n        num %= 9\n        res += (num // 5) * 'V'\n        num %= 5\n        res += (num // 4) * 'IV'\n        num %= 4\n        res += (num // 1) * 'I'\n        return res","Timestamp":"1540005185"}}},{"questionId":"75","questionFrontendId":"75","Title":"Sort Colors","TitleSlug":"sort-colors","Content":"\u003cp\u003eGiven an array with \u003cem\u003en\u003c/em\u003e objects colored red, white or blue, sort them \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003ein-place\u003c/a\u003e\u0026nbsp;\u003c/strong\u003eso that objects of the same color are adjacent, with the colors in the order red, white and blue.\u003c/p\u003e\r\n\r\n\u003cp\u003eHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;You are not suppose to use the library\u0026#39;s sort function for this problem.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [2,0,2,1,1,0]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [0,0,1,1,2,2]\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eA rather straight forward solution is a two-pass algorithm using counting sort.\u003cbr /\u003e\r\n\tFirst, iterate the array counting number of 0\u0026#39;s, 1\u0026#39;s, and 2\u0026#39;s, then overwrite array with total number of 0\u0026#39;s, then 1\u0026#39;s and followed by 2\u0026#39;s.\u003c/li\u003e\r\n\t\u003cli\u003eCould you come up with a\u0026nbsp;one-pass algorithm using only constant space?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"颜色分类","TranslatedContent":"\u003cp\u003e给定一个包含红色、白色和蓝色，一共\u0026nbsp;\u003cem\u003en \u003c/em\u003e个元素的数组，\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e\u003c/strong\u003e对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\u003c/p\u003e\n\n\u003cp\u003e此题中，我们使用整数 0、\u0026nbsp;1 和 2 分别表示红色、白色和蓝色。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003cbr\u003e\n不能使用代码库中的排序函数来解决这道题。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [2,0,2,1,1,0]\n\u003cstrong\u003e输出:\u003c/strong\u003e [0,0,1,1,2,2]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e一个直观的解决方案是使用计数排序的两趟扫描算法。\u003cbr\u003e\n\t首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。\u003c/li\u003e\n\t\u003cli\u003e你能想出一个仅使用常数空间的一趟扫描算法吗？\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"11343173":{"ID":"11343173","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.4 MB","URL":"/submissions/detail/11343173/","Code":"class Solution:\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        r = 0\n        w = 0\n        b = 0\n        for x in nums:\n            if x == 0:\n                r += 1\n            elif x == 1:\n                w += 1\n            elif x == 2:\n                b += 1\n        for x in range(len(nums)):\n            if x \u003c r:\n                nums[x] = 0\n            elif x \u003c w+r:\n                nums[x] = 1\n            elif x \u003c w+r+b:\n                nums[x] = 2","Timestamp":"1546853203"},"11343259":{"ID":"11343259","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.4 MB","URL":"/submissions/detail/11343259/","Code":"class Solution:\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        r = 0\n        w = 0\n        b = 0\n        for x in nums:\n            if x == 0:\n                r += 1\n            elif x == 1:\n                w += 1\n            elif x == 2:\n                b += 1\n        for x in range(len(nums)):\n            if x \u003c r:\n                nums[x] = 0\n            elif x \u003c w+r:\n                nums[x] = 1\n            elif x \u003c w+r+b:\n                nums[x] = 2","Timestamp":"1546853272"},"11343618":{"ID":"11343618","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"6.4 MB","URL":"/submissions/detail/11343618/","Code":"class Solution:\n    def sortColors(self, nums):\n        n = len(nums)\n\n        lt = -1\n        gt = n\n        i = 0\n\n        while i \u003c gt:\n            if nums[i] == 0:\n                lt += 1\n                nums[lt], nums[i] = nums[i], nums[lt]\n                i += 1\n            elif nums[i] == 2:\n                gt -= 1\n                nums[gt], nums[i] = nums[i], nums[gt]\n            else:\n                i += 1","Timestamp":"1546853675"},"11343627":{"ID":"11343627","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.5 MB","URL":"/submissions/detail/11343627/","Code":"class Solution:\n    def sortColors(self, nums):\n        n = len(nums)\n\n        lt = -1\n        gt = n\n        i = 0\n\n        while i \u003c gt:\n            if nums[i] == 0:\n                lt += 1\n                nums[lt], nums[i] = nums[i], nums[lt]\n                i += 1\n            elif nums[i] == 2:\n                gt -= 1\n                nums[gt], nums[i] = nums[i], nums[gt]\n            else:\n                i += 1","Timestamp":"1546853684"},"11343637":{"ID":"11343637","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11343637/","Code":"class Solution:\n    def sortColors(self, nums):\n        n = len(nums)\n\n        lt = -1\n        gt = n\n        i = 0\n\n        while i \u003c gt:\n            if nums[i] == 0:\n                lt += 1\n                nums[lt], nums[i] = nums[i], nums[lt]\n                i += 1\n            elif nums[i] == 2:\n                gt -= 1\n                nums[gt], nums[i] = nums[i], nums[gt]\n            else:\n                i += 1","Timestamp":"1546853693"},"15006857":{"ID":"15006857","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006857/","Code":"class Solution:\n    def sortColors(self, nums):\n        n = len(nums)\n\n        lt = -1\n        gt = n\n        i = 0\n\n        while i \u003c gt:\n            if nums[i] == 0:\n                lt += 1\n                nums[lt], nums[i] = nums[i], nums[lt]\n                i += 1\n            elif nums[i] == 2:\n                gt -= 1\n                nums[gt], nums[i] = nums[i], nums[gt]\n            else:\n                i += 1\n","Timestamp":"1552927237"}}},{"questionId":"234","questionFrontendId":"234","Title":"Palindrome Linked List","TitleSlug":"palindrome-linked-list","Content":"\u003cp\u003eGiven a singly linked list, determine if it is a palindrome.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1-\u0026gt;2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;2-\u0026gt;1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr /\u003e\r\nCould you do it in O(n) time and O(1) space?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"回文链表","TranslatedContent":"\u003cp\u003e请判断一个链表是否为回文链表。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1-\u0026gt;2\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;2-\u0026gt;1\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003cbr\u003e\n你能否用\u0026nbsp;O(n) 时间复杂度和 O(1) 空间复杂度解决此题？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11337739":{"ID":"11337739","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"18.2 MB","URL":"/submissions/detail/11337739/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        res = []\n        while head:\n            res.append(head.val)\n            head = head.next\n        if res == res[::-1]:\n            return True\n        return False","Timestamp":"1546849268"},"15006712":{"ID":"15006712","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"30.2 MB","URL":"/submissions/detail/15006712/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        res = []\n        while head:\n            res.append(head.val)\n            head = head.next\n        if res == res[::-1]:\n            return True\n        return False\n","Timestamp":"1552925559"}}},{"questionId":"1014","questionFrontendId":"973","Title":"K Closest Points to Origin","TitleSlug":"k-closest-points-to-origin","Content":"\u003cp\u003eWe have a list of \u003ccode\u003epoints\u003c/code\u003e\u0026nbsp;on the plane.\u0026nbsp; Find the \u003ccode\u003eK\u003c/code\u003e closest points to the origin \u003ccode\u003e(0, 0)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e(Here, the distance between two points on a plane is the Euclidean distance.)\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return the answer in any order.\u0026nbsp; The\u0026nbsp;answer is guaranteed to be unique (except for the order that it is in.)\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003epoints = \u003cspan id=\"example-input-1-1\"\u003e[[1,3],[-2,2]]\u003c/span\u003e, K = \u003cspan id=\"example-input-1-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[[-2,2]]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThe distance between (1, 3) and the origin is sqrt(10).\r\nThe distance between (-2, 2) and the origin is sqrt(8).\r\nSince sqrt(8) \u0026lt; sqrt(10), (-2, 2) is closer to the origin.\r\nWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003epoints = \u003cspan id=\"example-input-2-1\"\u003e[[3,3],[5,-1],[-2,4]]\u003c/span\u003e, K = \u003cspan id=\"example-input-2-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[[3,3],[-2,4]]\u003c/span\u003e\r\n(The answer [[-2,4],[3,3]] would also be accepted.)\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= K \u0026lt;= points.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt; points[i][0] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt; points[i][1] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Medium","TranslatedTitle":"最接近原点的 K 个点","TranslatedContent":"\u003cp\u003e我们有一个由平面上的点组成的列表 \u003ccode\u003epoints\u003c/code\u003e。需要从中找出 \u003ccode\u003eK\u003c/code\u003e 个距离原点 \u003ccode\u003e(0, 0)\u003c/code\u003e 最近的点。\u003c/p\u003e\n\n\u003cp\u003e（这里，平面上两点之间的距离是欧几里德距离。）\u003c/p\u003e\n\n\u003cp\u003e你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003epoints = [[1,3],[-2,2]], K = 1\n\u003cstrong\u003e输出：\u003c/strong\u003e[[-2,2]]\n\u003cstrong\u003e解释： \u003c/strong\u003e\n(1, 3) 和原点之间的距离为 sqrt(10)，\n(-2, 2) 和原点之间的距离为 sqrt(8)，\n由于 sqrt(8) \u0026lt; sqrt(10)，(-2, 2) 离原点更近。\n我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003epoints = [[3,3],[5,-1],[-2,4]], K = 2\n\u003cstrong\u003e输出：\u003c/strong\u003e[[3,3],[-2,4]]\n（答案 [[-2,4],[3,3]] 也会被接受。）\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= K \u0026lt;= points.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt; points[i][0] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-10000 \u0026lt; points[i][1] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12610996":{"ID":"12610996","StatusDisplay":"Accepted","Lang":"python3","Runtime":"428 ms","Memory":"11.4 MB","URL":"/submissions/detail/12610996/","Code":"#\n# @lc app=leetcode.cn id=973 lang=python3\n#\n# [973] 戳印序列\n#\n# https://leetcode-cn.com/problems/k-closest-points-to-origin/description/\n#\n# algorithms\n# Easy (65.68%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.3K\n# Testcase Example:  '[[1,3],[-2,2]]\\n1'\n#\n# 我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。\n# \n# （这里，平面上两点之间的距离是欧几里德距离。）\n# \n# 你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。\n# \n# \n# \n# 示例 1：\n# \n# 输入：points = [[1,3],[-2,2]], K = 1\n# 输出：[[-2,2]]\n# 解释： \n# (1, 3) 和原点之间的距离为 sqrt(10)，\n# (-2, 2) 和原点之间的距离为 sqrt(8)，\n# 由于 sqrt(8) \u003c sqrt(10)，(-2, 2) 离原点更近。\n# 我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n# \n# \n# 示例 2：\n# \n# 输入：points = [[3,3],[5,-1],[-2,4]], K = 2\n# 输出：[[3,3],[-2,4]]\n# （答案 [[-2,4],[3,3]] 也会被接受。）\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= K \u003c= points.length \u003c= 10000\n# -10000 \u003c points[i][0] \u003c 10000\n# -10000 \u003c points[i][1] \u003c 10000\n# \n# \n#\n\nfrom heapq import *\n\nclass Solution:\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n        h = []\n        for p in points:\n            heappush(h, (p[0]*p[0]+p[1]*p[1], p))\n        return [heappop(h)[1] for _ in range(K)]\n        \n","Timestamp":"1549956563"},"12611059":{"ID":"12611059","StatusDisplay":"Accepted","Lang":"python3","Runtime":"928 ms","Memory":"11.4 MB","URL":"/submissions/detail/12611059/","Code":"#\n# @lc app=leetcode.cn id=973 lang=python3\n#\n# [973] 戳印序列\n#\n# https://leetcode-cn.com/problems/k-closest-points-to-origin/description/\n#\n# algorithms\n# Easy (65.68%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.3K\n# Testcase Example:  '[[1,3],[-2,2]]\\n1'\n#\n# 我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。\n# \n# （这里，平面上两点之间的距离是欧几里德距离。）\n# \n# 你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。\n# \n# \n# \n# 示例 1：\n# \n# 输入：points = [[1,3],[-2,2]], K = 1\n# 输出：[[-2,2]]\n# 解释： \n# (1, 3) 和原点之间的距离为 sqrt(10)，\n# (-2, 2) 和原点之间的距离为 sqrt(8)，\n# 由于 sqrt(8) \u003c sqrt(10)，(-2, 2) 离原点更近。\n# 我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n# \n# \n# 示例 2：\n# \n# 输入：points = [[3,3],[5,-1],[-2,4]], K = 2\n# 输出：[[3,3],[-2,4]]\n# （答案 [[-2,4],[3,3]] 也会被接受。）\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= K \u003c= points.length \u003c= 10000\n# -10000 \u003c points[i][0] \u003c 10000\n# -10000 \u003c points[i][1] \u003c 10000\n# \n# \n#\n\nfrom heapq import *\n\nclass Solution:\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n        h = []\n        for p in points:\n            heappush(h, (p[0]**2+p[1]**2, p))\n        return [heappop(h)[1] for _ in range(K)]\n        \n","Timestamp":"1549956609"},"12611091":{"ID":"12611091","StatusDisplay":"Accepted","Lang":"python3","Runtime":"644 ms","Memory":"11.4 MB","URL":"/submissions/detail/12611091/","Code":"#\n# @lc app=leetcode.cn id=973 lang=python3\n#\n# [973] 戳印序列\n#\n# https://leetcode-cn.com/problems/k-closest-points-to-origin/description/\n#\n# algorithms\n# Easy (65.68%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.3K\n# Testcase Example:  '[[1,3],[-2,2]]\\n1'\n#\n# 我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。\n# \n# （这里，平面上两点之间的距离是欧几里德距离。）\n# \n# 你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。\n# \n# \n# \n# 示例 1：\n# \n# 输入：points = [[1,3],[-2,2]], K = 1\n# 输出：[[-2,2]]\n# 解释： \n# (1, 3) 和原点之间的距离为 sqrt(10)，\n# (-2, 2) 和原点之间的距离为 sqrt(8)，\n# 由于 sqrt(8) \u003c sqrt(10)，(-2, 2) 离原点更近。\n# 我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n# \n# \n# 示例 2：\n# \n# 输入：points = [[3,3],[5,-1],[-2,4]], K = 2\n# 输出：[[3,3],[-2,4]]\n# （答案 [[-2,4],[3,3]] 也会被接受。）\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= K \u003c= points.length \u003c= 10000\n# -10000 \u003c points[i][0] \u003c 10000\n# -10000 \u003c points[i][1] \u003c 10000\n# \n# \n#\n\nfrom heapq import *\n\nclass Solution:\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n        h = []\n        for p in points:\n            heappush(h, (p[0]*p[0]+p[1]*p[1], p))\n        return [heappop(h)[1] for _ in range(K)]\n        \n","Timestamp":"1549956635"},"15006950":{"ID":"15006950","StatusDisplay":"Accepted","Lang":"python3","Runtime":"396 ms","Memory":"17.4 MB","URL":"/submissions/detail/15006950/","Code":"#\n# @lc app=leetcode.cn id=973 lang=python3\n#\n# [973] 戳印序列\n#\n# https://leetcode-cn.com/problems/k-closest-points-to-origin/description/\n#\n# algorithms\n# Easy (65.68%)\n# Total Accepted:    1.5K\n# Total Submissions: 2.3K\n# Testcase Example:  '[[1,3],[-2,2]]\\n1'\n#\n# 我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。\n# \n# （这里，平面上两点之间的距离是欧几里德距离。）\n# \n# 你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。\n# \n# \n# \n# 示例 1：\n# \n# 输入：points = [[1,3],[-2,2]], K = 1\n# 输出：[[-2,2]]\n# 解释： \n# (1, 3) 和原点之间的距离为 sqrt(10)，\n# (-2, 2) 和原点之间的距离为 sqrt(8)，\n# 由于 sqrt(8) \u003c sqrt(10)，(-2, 2) 离原点更近。\n# 我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。\n# \n# \n# 示例 2：\n# \n# 输入：points = [[3,3],[5,-1],[-2,4]], K = 2\n# 输出：[[3,3],[-2,4]]\n# （答案 [[-2,4],[3,3]] 也会被接受。）\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= K \u003c= points.length \u003c= 10000\n# -10000 \u003c points[i][0] \u003c 10000\n# -10000 \u003c points[i][1] \u003c 10000\n# \n# \n#\n\nfrom heapq import *\n\nclass Solution:\n    def kClosest(self, points, K):\n        \"\"\"\n        :type points: List[List[int]]\n        :type K: int\n        :rtype: List[List[int]]\n        \"\"\"\n        h = []\n        for p in points:\n            heappush(h, (p[0]*p[0]+p[1]*p[1], p))\n        return [heappop(h)[1] for _ in range(K)]\n        \n\n","Timestamp":"1552928094"}}},{"questionId":"891","questionFrontendId":"861","Title":"Score After Flipping Matrix","TitleSlug":"score-after-flipping-matrix","Content":"\u003cp\u003eWe have a two dimensional matrix\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e where each value is \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eA move consists of choosing any row or column, and toggling each value in that row or column: changing all \u003ccode\u003e0\u003c/code\u003es to \u003ccode\u003e1\u003c/code\u003es, and all \u003ccode\u003e1\u003c/code\u003es to \u003ccode\u003e0\u003c/code\u003es.\u003c/p\u003e\r\n\r\n\u003cp\u003eAfter making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the highest possible\u0026nbsp;score.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e39\u003c/span\u003e\r\n\u003cstrong\u003eExplanation:\r\n\u003c/strong\u003eToggled to \u003cspan id=\"example-input-1-1\"\u003e[[1,1,1,1],[1,0,0,1],[1,1,1,1]].\r\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA[i][j]\u003c/code\u003e\u0026nbsp;is \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"翻转矩阵后的得分","TranslatedContent":"\u003cp\u003e有一个二维矩阵\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e 其中每个元素的值为\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;或\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 \u003ccode\u003e0\u003c/code\u003e 都更改为 \u003ccode\u003e1\u003c/code\u003e，将所有 \u003ccode\u003e1\u003c/code\u003e 都更改为 \u003ccode\u003e0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。\u003c/p\u003e\n\n\u003cp\u003e返回尽可能高的分数。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n\u003cstrong\u003e输出：\u003c/strong\u003e39\n\u003cstrong\u003e解释：\n\u003c/strong\u003e转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA[i][j]\u003c/code\u003e\u0026nbsp;是\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e 或\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006895":{"ID":"15006895","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006895/","Code":"class Solution:\n    def matrixScore(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # 按行翻转保证第一列的值都为正\n        # 第二列往后和小于 1/2 行数是翻转列\n        if not A:\n            return 0\n        \n        # 翻转行\n        for x in range(len(A)):\n            if A[x][0] == 0:  \n                for y in range(len(A[x])):\n                    if A[x][y] == 0:\n                        A[x][y] = 1\n                    else:\n                        A[x][y] = 0\n        s = 0\n        # 算和\n        for y in range(len(A[0])):\n            line_s = sum([A[x][y] for x in range(len(A))])\n            s += max(len(A) - line_s, line_s) * (2**(len(A[0])-y-1))\n        return s\n            \n","Timestamp":"1552927563"},"7885561":{"ID":"7885561","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/7885561/","Code":"class Solution:\n    def matrixScore(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # 按行翻转保证第一列的值都为正\n        # 第二列往后和小于 1/2 行数是翻转列\n        if not A:\n            return 0\n        \n        # 翻转行\n        for x in range(len(A)):\n            if A[x][0] == 0:  \n                for y in range(len(A[x])):\n                    if A[x][y] == 0:\n                        A[x][y] = 1\n                    else:\n                        A[x][y] = 0\n        s = 0\n        # 算和\n        for y in range(len(A[0])):\n            line_s = sum([A[x][y] for x in range(len(A))])\n            s += max(len(A) - line_s, line_s) * (2**(len(A[0])-y-1))\n        return s\n            ","Timestamp":"1538214520"}}},{"questionId":"596","questionFrontendId":"596","Title":"Classes More Than 5 Students","TitleSlug":"classes-more-than-5-students","Content":"\u003cp\u003eThere is a table \u003ccode\u003ecourses\u003c/code\u003e with columns: \u003cb\u003estudent\u003c/b\u003e and \u003cb\u003eclass\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003ePlease list out all classes which have more than or equal to 5 students.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, the table:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+------------+\r\n| student | class      |\r\n+---------+------------+\r\n| A       | Math       |\r\n| B       | English    |\r\n| C       | Math       |\r\n| D       | Biology    |\r\n| E       | Math       |\r\n| F       | Computer   |\r\n| G       | Math       |\r\n| H       | Math       |\r\n| I       | Math       |\r\n+---------+------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eShould output:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+\r\n| class   |\r\n+---------+\r\n| Math    |\r\n+---------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nThe students should not be counted duplicate in each course.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"超过5名学生的课","TranslatedContent":"\u003cp\u003e有一个\u003ccode\u003ecourses\u003c/code\u003e 表 ，有: \u003cstrong\u003estudent\u0026nbsp;(学生) \u003c/strong\u003e和 \u003cstrong\u003eclass (课程)\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e请列出所有超过或等于5名学生的课。\u003c/p\u003e\n\n\u003cp\u003e例如,表:\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n\u003c/pre\u003e\n\n\u003cp\u003e应该输出:\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cbr /\u003e\n学生在每个课中不应被重复计算。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006821":{"ID":"15006821","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"224 ms","Memory":"N/A","URL":"/submissions/detail/15006821/","Code":"# Write your MySQL query statement below\n\nselect class from (select count(distinct(student)) as t, class from courses group by class order by t desc) as a where a.t \u003e=5;\n","Timestamp":"1552926931"},"2289495":{"ID":"2289495","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"2377 ms","Memory":"N/A","URL":"/submissions/detail/2289495/","Code":"# Write your MySQL query statement below\n\nselect class from (select count(distinct(student)) as t, class from courses group by class order by t desc) as a where a.t \u003e=5;","Timestamp":"1526359290"}}},{"questionId":"566","questionFrontendId":"566","Title":"Reshape the Matrix","TitleSlug":"reshape-the-matrix","Content":"\u003cp\u003eIn MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nYou're given a matrix represented by a two-dimensional array, and two \u003cb\u003epositive\u003c/b\u003e integers \u003cb\u003er\u003c/b\u003e and \u003cb\u003ec\u003c/b\u003e representing the \u003cb\u003erow\u003c/b\u003e number and \u003cb\u003ecolumn\u003c/b\u003e number of the wanted reshaped matrix, respectively.\u003c/p\u003e\r\n\r\n \u003cp\u003eThe reshaped matrix need to be filled with all the elements of the original matrix in the same \u003cb\u003erow-traversing\u003c/b\u003e order as they were.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 1, c = 4\r\n\u003cb\u003eOutput:\u003c/b\u003e \r\n[[1,2,3,4]]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\u003cbr\u003eThe \u003cb\u003erow-traversing\u003c/b\u003e of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 2, c = 4\r\n\u003cb\u003eOutput:\u003c/b\u003e \r\n[[1,2],\r\n [3,4]]\r\n\u003cb\u003eExplanation:\u003c/b\u003e\u003cbr\u003eThere is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe height and width of the given matrix is in range [1, 100].\u003c/li\u003e\r\n\u003cli\u003eThe given r and c are all positive.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"重塑矩阵","TranslatedContent":"\u003cp\u003e在MATLAB中，有一个非常有用的函数 \u003ccode\u003ereshape\u003c/code\u003e，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。\u003c/p\u003e\n\n\u003cp\u003e给出一个由二维数组表示的矩阵，以及两个正整数\u003ccode\u003er\u003c/code\u003e和\u003ccode\u003ec\u003c/code\u003e，分别表示想要的重构的矩阵的行数和列数。\u003c/p\u003e\n\n\u003cp\u003e重构后的矩阵需要将原始矩阵的所有元素以相同的\u003cstrong\u003e行遍历顺序\u003c/strong\u003e填充。\u003c/p\u003e\n\n\u003cp\u003e如果具有给定参数的\u003ccode\u003ereshape\u003c/code\u003e操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n\u003cstrong\u003e输出:\u003c/strong\u003e \n[[1,2,3,4]]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n\u003cstrong\u003e输出:\u003c/strong\u003e \n[[1,2],\n [3,4]]\n\u003cstrong\u003e解释:\u003c/strong\u003e\n没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给定矩阵的宽和高范围在 [1, 100]。\u003c/li\u003e\n\t\u003cli\u003e给定的 r 和 c 都是正数。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006812":{"ID":"15006812","StatusDisplay":"Accepted","Lang":"python","Runtime":"108 ms","Memory":"12.1 MB","URL":"/submissions/detail/15006812/","Code":"class Solution(object):\n    def matrixReshape(self, nums, r, c):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        t = [ n for num in nums for n in num] \n        if r*c != len(t): return nums\n        return [[t.pop(0) for _ in range(c)] for __ in range(r)]\n\n        \n        \n        \n        \n\n","Timestamp":"1552926845"},"1729195":{"ID":"1729195","StatusDisplay":"Accepted","Lang":"python","Runtime":"169 ms","Memory":"N/A","URL":"/submissions/detail/1729195/","Code":"class Solution(object):\n    def matrixReshape(self, nums, r, c):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        t = [ n for num in nums for n in num] \n        if r*c != len(t): return nums\n        return [[t.pop(0) for _ in range(c)] for __ in range(r)]\n\n        \n        \n        \n        ","Timestamp":"1501258181"},"7572948":{"ID":"7572948","StatusDisplay":"Accepted","Lang":"python","Runtime":"96 ms","Memory":"N/A","URL":"/submissions/detail/7572948/","Code":"class Solution(object):\n    def matrixReshape(self, nums, r, c):\n        \"\"\"\n        :type nums: List[List[int]]\n        :type r: int\n        :type c: int\n        :rtype: List[List[int]]\n        \"\"\"\n        t = [ n for num in nums for n in num] \n        if r*c != len(t): return nums\n        return [[t.pop(0) for _ in range(c)] for __ in range(r)]\n\n        \n        \n        \n        \n","Timestamp":"1536218965"}}},{"questionId":"101","questionFrontendId":"101","Title":"Symmetric Tree","TitleSlug":"symmetric-tree","Content":"\u003cp\u003eGiven a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor example, this binary tree \u003ccode\u003e[1,2,2,3,4,4,3]\u003c/code\u003e is symmetric:\r\n\u003cpre\u003e\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\nBut the following \u003ccode\u003e[1,2,2,null,3,null,3]\u003c/code\u003e  is not:\u003cbr /\u003e\r\n\u003cpre\u003e\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\n\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nBonus points if you could solve it both recursively and iteratively.\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"对称二叉树","TranslatedContent":"\u003cp\u003e给定一个二叉树，检查它是否是镜像对称的。\u003c/p\u003e\n\n\u003cp\u003e例如，二叉树\u0026nbsp;\u003ccode\u003e[1,2,2,3,4,4,3]\u003c/code\u003e 是对称的。\u003c/p\u003e\n\n\u003cpre\u003e    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\u003c/pre\u003e\n\n\u003cp\u003e但是下面这个\u0026nbsp;\u003ccode\u003e[1,2,2,null,3,null,3]\u003c/code\u003e 则不是镜像对称的:\u003c/p\u003e\n\n\u003cpre\u003e    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果你可以运用递归和迭代两种方法解决这个问题，会很加分。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15004376":{"ID":"15004376","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"11.1 MB","URL":"/submissions/detail/15004376/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        def inner(l,r):\n            if l and r and l.val == r.val:\n                return inner(l.right,r.left) and inner(l.left, r.right)\n            elif not l and not r:\n                return True\n            else:\n                return False\n      \n        return inner(root.left, root.right)\n","Timestamp":"1552924578"},"15006635":{"ID":"15006635","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"11 MB","URL":"/submissions/detail/15006635/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        def inner(l,r):\n            if l and r and l.val == r.val:\n                return inner(l.right,r.left) and inner(l.left, r.right)\n            elif not l and not r:\n                return True\n            else:\n                return False\n      \n        return inner(root.left, root.right)\n","Timestamp":"1552924914"},"7905919":{"ID":"7905919","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7905919/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        def inner(l,r):\n            if l and r and l.val == r.val:\n                return inner(l.right,r.left) and inner(l.left, r.right)\n            elif not l and not r:\n                return True\n            else:\n                return False\n      \n        return inner(root.left, root.right)","Timestamp":"1538797841"}}},{"questionId":"805","questionFrontendId":"789","Title":"Escape The Ghosts","TitleSlug":"escape-the-ghosts","Content":"\u003cp\u003eYou are playing a simplified Pacman game. You\u0026nbsp;start at the point \u003ccode\u003e(0, 0)\u003c/code\u003e, and your destination is\u003ccode\u003e (target[0], target[1])\u003c/code\u003e. There are several ghosts on the map, the i-th ghost starts at\u003ccode\u003e (ghosts[i][0], ghosts[i][1])\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eEach turn, you and all ghosts simultaneously *may* move in one of 4 cardinal directions: north, east, west, or south, going from the previous point to a new point 1 unit of distance away.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou escape if and only if you can reach the target before any ghost reaches you (for any given moves the ghosts may take.)\u0026nbsp; If you reach any square (including the target) at the same time as a ghost, it doesn\u0026#39;t count as an escape.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn True if and only if it is possible to escape.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 1:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nghosts = [[1, 0], [0, 3]]\r\ntarget = [0, 1]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nYou can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you.\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 2:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nghosts = [[1, 0]]\r\ntarget = [2, 0]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nYou need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample 3:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nghosts = [[2, 0]]\r\ntarget = [1, 0]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nThe ghost can reach the target at the same time as you.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eAll points have coordinates with absolute value \u0026lt;= \u003ccode\u003e10000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe number of ghosts will not exceed \u003ccode\u003e100\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"逃脱阻碍者","TranslatedContent":"\u003cp\u003e你在进行一个简化版的吃豆人游戏。你从\u0026nbsp;\u003ccode\u003e(0, 0)\u003c/code\u003e\u0026nbsp;点开始出发，你的目的地是\u0026nbsp;\u003ccode\u003e(target[0], target[1])\u003c/code\u003e\u0026nbsp;。地图上有一些阻碍者，第 i 个阻碍者从\u0026nbsp;\u003ccode\u003e(ghosts[i][0], ghosts[i][1])\u003c/code\u003e\u0026nbsp;出发。\u003c/p\u003e\n\n\u003cp\u003e每一回合，你和阻碍者们*可以*同时向东，西，南，北四个方向移动，每次可以移动到距离原位置1个单位的新位置。\u003c/p\u003e\n\n\u003cp\u003e如果你可以在任何阻碍者抓住你之前到达目的地（阻碍者可以采取任意行动方式），则被视为逃脱成功。如果你和阻碍者同时到达了一个位置（包括目的地）都不算是逃脱成功。\u003c/p\u003e\n\n\u003cp\u003e当且仅当你有可能成功逃脱时，输出 True。\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\n\u003cstrong\u003e输入：\u003c/strong\u003e \nghosts = [[1, 0], [0, 3]]\ntarget = [0, 1]\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\n\u003c/strong\u003e你可以直接一步到达目的地(0,1)，在(1, 0)或者(0, 3)位置的阻碍者都不可能抓住你。 \n\u003c/pre\u003e\n\n\u003cpre\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\n\u003cstrong\u003e输入：\u003c/strong\u003e \nghosts = [[1, 0]]\ntarget = [2, 0]\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\u003c/strong\u003e\n你需要走到位于(2, 0)的目的地，但是在(1, 0)的阻碍者位于你和目的地之间。 \n\u003c/pre\u003e\n\n\u003cpre\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\n\u003cstrong\u003e输入：\u003c/strong\u003e \nghosts = [[2, 0]]\ntarget = [1, 0]\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\n\u003c/strong\u003e阻碍者可以和你同时达到目的地。 \n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e所有的点的坐标值的绝对值 \u0026lt;=\u0026nbsp;\u003ccode\u003e10000\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e阻碍者的数量不会超过\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006869":{"ID":"15006869","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006869/","Code":"class Solution:\n    def escapeGhosts(self, ghosts, target):\n        \"\"\"\n        :type ghosts: List[List[int]]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        l = abs(target[0]) + abs(target[1])\n        for x in ghosts:\n            if abs(x[0]-target[0]) + abs(x[1]-target[1]) \u003c= l:\n                return False\n        return True\n","Timestamp":"1552927350"},"8449127":{"ID":"8449127","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/8449127/","Code":"class Solution:\n    def escapeGhosts(self, ghosts, target):\n        \"\"\"\n        :type ghosts: List[List[int]]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        l = abs(target[0]) + abs(target[1])\n        for x in ghosts:\n            if abs(x[0]-target[0]) + abs(x[1]-target[1]) \u003c= l:\n                return False\n        return True","Timestamp":"1539935767"},"8449153":{"ID":"8449153","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/8449153/","Code":"class Solution:\n    def escapeGhosts(self, ghosts, target):\n        \"\"\"\n        :type ghosts: List[List[int]]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        l = abs(target[0]) + abs(target[1])\n        for x in ghosts:\n            if abs(x[0]-target[0]) + abs(x[1]-target[1]) \u003c= l:\n                return False\n        return True","Timestamp":"1539935794"},"8449162":{"ID":"8449162","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/8449162/","Code":"class Solution:\n    def escapeGhosts(self, ghosts, target):\n        \"\"\"\n        :type ghosts: List[List[int]]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n        l = abs(target[0]) + abs(target[1])\n        for x in ghosts:\n            if abs(x[0]-target[0]) + abs(x[1]-target[1]) \u003c= l:\n                return False\n        return True","Timestamp":"1539935803"}}},{"questionId":"1080","questionFrontendId":"1023","Title":"Camelcase Matching","TitleSlug":"camelcase-matching","Content":"\u003cp\u003eA query word matches a given \u003ccode\u003epattern\u003c/code\u003e if we can insert \u003cstrong\u003elowercase\u003c/strong\u003e letters to the pattern word so that it equals the \u003ccode\u003equery\u003c/code\u003e. (We may insert each character at any position, and may insert 0 characters.)\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a list of \u003ccode\u003equeries\u003c/code\u003e, and a \u003ccode\u003epattern\u003c/code\u003e, return an \u003ccode\u003eanswer\u003c/code\u003e list of booleans, where \u003ccode\u003eanswer[i]\u003c/code\u003e is true if and only if \u003ccode\u003equeries[i]\u003c/code\u003e matches the \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003equeries = \u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;]\u003c/span\u003e, pattern = \u003cspan id=\"example-input-1-2\"\u003e\u0026quot;FB\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[true,false,true,true,false]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n\u0026quot;FooBar\u0026quot; can be generated like this \u0026quot;F\u0026quot; + \u0026quot;oo\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;ar\u0026quot;.\r\n\u0026quot;FootBall\u0026quot; can be generated like this \u0026quot;F\u0026quot; + \u0026quot;oot\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;all\u0026quot;.\r\n\u0026quot;FrameBuffer\u0026quot; can be generated like this \u0026quot;F\u0026quot; + \u0026quot;rame\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;uffer\u0026quot;.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003equeries = \u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;]\u003c/span\u003e, pattern = \u003cspan id=\"example-input-2-2\"\u003e\u0026quot;FoBa\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[true,false,true,false,false]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n\u0026quot;FooBar\u0026quot; can be generated like this \u0026quot;Fo\u0026quot; + \u0026quot;o\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;r\u0026quot;.\r\n\u0026quot;FootBall\u0026quot; can be generated like this \u0026quot;Fo\u0026quot; + \u0026quot;ot\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;ll\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003equeries = \u003cspan id=\"example-input-3-1\"\u003e[\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;]\u003c/span\u003e, pattern = \u003cspan id=\"example-input-3-2\"\u003e\u0026quot;FoBaT\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e[false,true,false,false,false]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n\u0026quot;FooBarTest\u0026quot; can be generated like this \u0026quot;Fo\u0026quot; + \u0026quot;o\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;r\u0026quot; + \u0026quot;T\u0026quot; + \u0026quot;est\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries[i].length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pattern.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eAll strings consists only of lower and upper case English letters.\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Medium","TranslatedTitle":"驼峰式匹配","TranslatedContent":"\u003cp\u003e如果我们可以将\u003cstrong\u003e小写字母\u003c/strong\u003e插入模式串\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e\u0026nbsp;得到待查询项\u0026nbsp;\u003ccode\u003equery\u003c/code\u003e，那么待查询项与给定模式串匹配。（我们可以在任何位置插入每个字符，也可以插入 0 个字符。）\u003c/p\u003e\n\n\u003cp\u003e给定待查询列表\u0026nbsp;\u003ccode\u003equeries\u003c/code\u003e，和模式串\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e，返回由布尔值组成的答案列表\u0026nbsp;\u003ccode\u003eanswer\u003c/code\u003e。只有在待查项\u0026nbsp;\u003ccode\u003equeries[i]\u003c/code\u003e 与模式串\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e 匹配时，\u0026nbsp;\u003ccode\u003eanswer[i]\u003c/code\u003e\u0026nbsp;才为 \u003ccode\u003etrue\u003c/code\u003e，否则为 \u003ccode\u003efalse\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003equeries = [\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;], pattern = \u0026quot;FB\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e[true,false,true,true,false]\n\u003cstrong\u003e示例：\u003c/strong\u003e\n\u0026quot;FooBar\u0026quot; 可以这样生成：\u0026quot;F\u0026quot; + \u0026quot;oo\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;ar\u0026quot;。\n\u0026quot;FootBall\u0026quot; 可以这样生成：\u0026quot;F\u0026quot; + \u0026quot;oot\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;all\u0026quot;.\n\u0026quot;FrameBuffer\u0026quot; 可以这样生成：\u0026quot;F\u0026quot; + \u0026quot;rame\u0026quot; + \u0026quot;B\u0026quot; + \u0026quot;uffer\u0026quot;.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003equeries = [\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;], pattern = \u0026quot;FoBa\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e[true,false,true,false,false]\n\u003cstrong\u003e解释：\u003c/strong\u003e\n\u0026quot;FooBar\u0026quot; 可以这样生成：\u0026quot;Fo\u0026quot; + \u0026quot;o\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;r\u0026quot;.\n\u0026quot;FootBall\u0026quot; 可以这样生成：\u0026quot;Fo\u0026quot; + \u0026quot;ot\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;ll\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输出：\u003c/strong\u003equeries = [\u0026quot;FooBar\u0026quot;,\u0026quot;FooBarTest\u0026quot;,\u0026quot;FootBall\u0026quot;,\u0026quot;FrameBuffer\u0026quot;,\u0026quot;ForceFeedBack\u0026quot;], pattern = \u0026quot;FoBaT\u0026quot;\n\u003cstrong\u003e输入：\u003c/strong\u003e[false,true,false,false,false]\n\u003cstrong\u003e解释： \u003c/strong\u003e\n\u0026quot;FooBarTest\u0026quot; 可以这样生成：\u0026quot;Fo\u0026quot; + \u0026quot;o\u0026quot; + \u0026quot;Ba\u0026quot; + \u0026quot;r\u0026quot; + \u0026quot;T\u0026quot; + \u0026quot;est\u0026quot;.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= queries[i].length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= pattern.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e所有字符串都仅由大写和小写英文字母组成。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16405699":{"ID":"16405699","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"13.3 MB","URL":"/submissions/detail/16405699/","Code":"import re\n\nt = re.compile('[A-Z][a-z]{0,}')\n\nclass Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -\u003e List[bool]:\n        res = []\n        p =[re.compile('[a-z]{0,}'.join(list(x))+'[a-z]{0,}') for x in t.findall(pattern)]\n        print(p)\n            \n        def check(q):\n            qs = t.findall(q)\n            if len(qs) != len(p):\n                return False\n            for a, b in zip(p, qs):\n                if not a.fullmatch(b):\n                    return False\n            return True\n        \n        for q in queries:\n            res.append(check(q))\n        return res\n            ","Timestamp":"1554607069"},"16670344":{"ID":"16670344","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"13.5 MB","URL":"/submissions/detail/16670344/","Code":"import re\n\nt = re.compile('[A-Z][a-z]{0,}')\n\nclass Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -\u003e List[bool]:\n        res = []\n        p =[re.compile('[a-z]{0,}'.join(list(x))+'[a-z]{0,}') for x in t.findall(pattern)]\n        print(p)\n            \n        def check(q):\n            qs = t.findall(q)\n            if len(qs) != len(p):\n                return False\n            for a, b in zip(p, qs):\n                if not a.fullmatch(b):\n                    return False\n            return True\n        \n        for q in queries:\n            res.append(check(q))\n        return res\n            ","Timestamp":"1554607100"}}},{"questionId":"169","questionFrontendId":"169","Title":"Majority Element","TitleSlug":"majority-element","Content":"\u003cp\u003eGiven an array of size \u003ci\u003en\u003c/i\u003e, find the majority element. The majority element is the element that appears \u003cb\u003emore than\u003c/b\u003e \u003ccode\u003e\u0026lfloor; n/2 \u0026rfloor;\u003c/code\u003e times.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume that the array is non-empty and the majority element always exist in the array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [3,2,3]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [2,2,1,1,1,2,2]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"求众数","TranslatedContent":"\u003cp\u003e给定一个大小为 \u003cem\u003en \u003c/em\u003e的数组，找到其中的众数。众数是指在数组中出现次数\u003cstrong\u003e大于\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e\u0026lfloor; n/2 \u0026rfloor;\u003c/code\u003e\u0026nbsp;的元素。\u003c/p\u003e\n\n\u003cp\u003e你可以假设数组是非空的，并且给定的数组总是存在众数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [3,2,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [2,2,1,1,1,2,2]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006680":{"ID":"15006680","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.9 MB","URL":"/submissions/detail/15006680/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        majority = nums[0]\n        count = 1\n        for x in nums[1:]:\n            if x == majority:\n                count += 1\n            else:\n                count -= 1\n                if count \u003c 0:\n                    majority = x\n                    count = 0\n        return majority\n\n\n","Timestamp":"1552925315"},"15774336":{"ID":"15774336","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"14.3 MB","URL":"/submissions/detail/15774336/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        majority = nums[0]\n        count = 1\n        for x in nums[1:]:\n            if x == majority:\n                count += 1\n            else:\n                count -= 1\n                if count \u003c 0:\n                    majority = x\n                    count = 0\n        return majority\n\n","Timestamp":"1553774634"},"15775003":{"ID":"15775003","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"14.5 MB","URL":"/submissions/detail/15775003/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        value = 0\n        times = 0\n        for x in nums:\n            if times \u003c= 0:\n                value = x\n                times += 1\n            else:\n                times = times - 1 if value != x else times + 1\n        return value","Timestamp":"1553775023"},"15797565":{"ID":"15797565","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"14.5 MB","URL":"/submissions/detail/15797565/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        value = 0\n        times = 0\n        for x in nums:\n            if times \u003c= 0:\n                value = x\n                times += 1\n            else:\n                times = times - 1 if value != x else times + 1\n        return value","Timestamp":"1553791270"},"1729273":{"ID":"1729273","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729273/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        majority = nums[0]\n        count = 1\n        for x in nums[1:]:\n            if x == majority:\n                count += 1\n            else:\n                count -= 1\n                if count \u003c 0:\n                    majority = x\n                    count = 0\n        return majority\n","Timestamp":"1524193958"},"7572755":{"ID":"7572755","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7572755/","Code":"class Solution:\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        majority = nums[0]\n        count = 1\n        for x in nums[1:]:\n            if x == majority:\n                count += 1\n            else:\n                count -= 1\n                if count \u003c 0:\n                    majority = x\n                    count = 0\n        return majority\n\n","Timestamp":"1536218583"}}},{"questionId":"595","questionFrontendId":"595","Title":"Big Countries","TitleSlug":"big-countries","Content":"\u003cp\u003eThere is a table \u003ccode\u003eWorld\u003c/code\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+-----------------+------------+------------+--------------+---------------+\r\n| name            | continent  | area       | population   | gdp           |\r\n+-----------------+------------+------------+--------------+---------------+\r\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\r\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\r\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\r\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\r\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\r\n+-----------------+------------+------------+--------------+---------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\u003c/p\u003e\r\n\r\n\u003cp\u003eWrite a SQL solution to output big countries\u0026#39; name, population and area.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, according to the above table, we should output:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+--------------+-------------+--------------+\r\n| name         | population  | area         |\r\n+--------------+-------------+--------------+\r\n| Afghanistan  | 25500100    | 652230       |\r\n| Algeria      | 37100000    | 2381741      |\r\n+--------------+-------------+--------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"大的国家","TranslatedContent":"\u003cp\u003e这里有张\u0026nbsp;\u003ccode\u003eWorld\u003c/code\u003e 表\u003c/p\u003e\n\n\u003cpre\u003e+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n\u003c/pre\u003e\n\n\u003cp\u003e如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。\u003c/p\u003e\n\n\u003cp\u003e编写一个SQL查询，输出表中所有大国家的名称、人口和面积。\u003c/p\u003e\n\n\u003cp\u003e例如，根据上表，我们应该输出:\u003c/p\u003e\n\n\u003cpre\u003e+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17546309":{"ID":"17546309","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"339 ms","Memory":"N/A","URL":"/submissions/detail/17546309/","Code":"# Write your MySQL query statement below\nselect name, population, area from world where area \u003e 3000000 or population \u003e 25000000;","Timestamp":"1555998198"}}},{"questionId":"59","questionFrontendId":"59","Title":"Spiral Matrix II","TitleSlug":"spiral-matrix-ii","Content":"\u003cp\u003eGiven a positive integer \u003cem\u003en\u003c/em\u003e, generate a square matrix filled with elements from 1 to \u003cem\u003en\u003c/em\u003e\u003csup\u003e2\u003c/sup\u003e in spiral order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n [ 1, 2, 3 ],\r\n [ 8, 9, 4 ],\r\n [ 7, 6, 5 ]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"螺旋矩阵 II","TranslatedContent":"\u003cp\u003e给定一个正整数\u0026nbsp;\u003cem\u003en\u003c/em\u003e，生成一个包含 1 到\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 3\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006818":{"ID":"15006818","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006818/","Code":"class Solution:\n    def generateMatrix(self, n):\n        A = [[0] * n for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(n*n):\n            A[i][j] = k + 1\n            if A[(i+di)%n][(j+dj)%n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return A\n        \n","Timestamp":"1552926898"},"7916534":{"ID":"7916534","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7916534/","Code":"class Solution:\n    def generateMatrix(self, n):\n        A = [[0] * n for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(n*n):\n            A[i][j] = k + 1\n            if A[(i+di)%n][(j+dj)%n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return A\n        ","Timestamp":"1538817593"}}},{"questionId":"129","questionFrontendId":"129","Title":"Sum Root to Leaf Numbers","TitleSlug":"sum-root-to-leaf-numbers","Content":"\u003cp\u003eGiven a binary tree containing digits from \u003ccode\u003e0-9\u003c/code\u003e only, each root-to-leaf path could represent a number.\u003c/p\u003e\r\n\r\n\u003cp\u003eAn example is the root-to-leaf path \u003ccode\u003e1-\u0026gt;2-\u0026gt;3\u003c/code\u003e which represents the number \u003ccode\u003e123\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind the total sum of all root-to-leaf numbers.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;A leaf is a node with no children.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,2,3]\r\n    1\r\n   / \\\r\n  2   3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 25\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nThe root-to-leaf path \u003ccode\u003e1-\u0026gt;2\u003c/code\u003e represents the number \u003ccode\u003e12\u003c/code\u003e.\r\nThe root-to-leaf path \u003ccode\u003e1-\u0026gt;3\u003c/code\u003e represents the number \u003ccode\u003e13\u003c/code\u003e.\r\nTherefore, sum = 12 + 13 = \u003ccode\u003e25\u003c/code\u003e.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [4,9,0,5,1]\r\n    4\r\n   / \\\r\n  9   0\r\n\u0026nbsp;/ \\\r\n5   1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1026\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nThe root-to-leaf path \u003ccode\u003e4-\u0026gt;9-\u0026gt;5\u003c/code\u003e represents the number 495.\r\nThe root-to-leaf path \u003ccode\u003e4-\u0026gt;9-\u0026gt;1\u003c/code\u003e represents the number 491.\r\nThe root-to-leaf path \u003ccode\u003e4-\u0026gt;0\u003c/code\u003e represents the number 40.\r\nTherefore, sum = 495 + 491 + 40 = \u003ccode\u003e1026\u003c/code\u003e.\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"求根到叶子节点数字之和","TranslatedContent":"\u003cp\u003e给定一个二叉树，它的每个结点都存放一个\u0026nbsp;\u003ccode\u003e0-9\u003c/code\u003e\u0026nbsp;的数字，每条从根到叶子节点的路径都代表一个数字。\u003c/p\u003e\n\n\u003cp\u003e例如，从根到叶子节点路径 \u003ccode\u003e1-\u0026gt;2-\u0026gt;3\u003c/code\u003e 代表数字 \u003ccode\u003e123\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e计算从根到叶子节点生成的所有数字之和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u0026nbsp;叶子节点是指没有子节点的节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3]\n    1\n   / \\\n  2   3\n\u003cstrong\u003e输出:\u003c/strong\u003e 25\n\u003cstrong\u003e解释:\u003c/strong\u003e\n从根到叶子节点路径 \u003ccode\u003e1-\u0026gt;2\u003c/code\u003e 代表数字 \u003ccode\u003e12\u003c/code\u003e.\n从根到叶子节点路径 \u003ccode\u003e1-\u0026gt;3\u003c/code\u003e 代表数字 \u003ccode\u003e13\u003c/code\u003e.\n因此，数字总和 = 12 + 13 = \u003ccode\u003e25\u003c/code\u003e.\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [4,9,0,5,1]\n    4\n   / \\\n  9   0\n\u0026nbsp;/ \\\n5   1\n\u003cstrong\u003e输出:\u003c/strong\u003e 1026\n\u003cstrong\u003e解释:\u003c/strong\u003e\n从根到叶子节点路径 \u003ccode\u003e4-\u0026gt;9-\u0026gt;5\u003c/code\u003e 代表数字 495.\n从根到叶子节点路径 \u003ccode\u003e4-\u0026gt;9-\u0026gt;1\u003c/code\u003e 代表数字 491.\n从根到叶子节点路径 \u003ccode\u003e4-\u0026gt;0\u003c/code\u003e 代表数字 40.\n因此，数字总和 = 495 + 491 + 40 = \u003ccode\u003e1026\u003c/code\u003e.\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11142110":{"ID":"11142110","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"6.7 MB","URL":"/submissions/detail/11142110/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        res = []\n        def inner(x, node):\n            x = x * 10 + node.val\n            if node.left:\n                inner(x, node.left)\n            if node.right:\n                inner(x, node.right)\n            if not node.left and not node.right:\n                res.append(x)\n       \n        inner(0, root)\n        return sum(res)","Timestamp":"1546425212"},"15006660":{"ID":"15006660","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11 MB","URL":"/submissions/detail/15006660/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        res = []\n        def inner(x, node):\n            x = x * 10 + node.val\n            if node.left:\n                inner(x, node.left)\n            if node.right:\n                inner(x, node.right)\n            if not node.left and not node.right:\n                res.append(x)\n       \n        inner(0, root)\n        return sum(res)\n","Timestamp":"1552925156"}}},{"questionId":"1010","questionFrontendId":"970","Title":"Powerful Integers","TitleSlug":"powerful-integers","Content":"\u003cp\u003eGiven two positive integers \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e, an integer is \u003cem\u003epowerful\u003c/em\u003e\u0026nbsp;if it is equal to \u003ccode\u003ex^i + y^j\u003c/code\u003e\u0026nbsp;for\u0026nbsp;some integers \u003ccode\u003ei \u0026gt;= 0\u003c/code\u003e and \u003ccode\u003ej \u0026gt;= 0\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn a list of all \u003cem\u003epowerful\u003c/em\u003e integers that have value less than or equal to \u003ccode\u003ebound\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return the answer in any order.\u0026nbsp; In your answer, each value should occur at most once.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ex = \u003cspan id=\"example-input-1-1\"\u003e2\u003c/span\u003e, y = \u003cspan id=\"example-input-1-2\"\u003e3\u003c/span\u003e, bound = \u003cspan id=\"example-input-1-3\"\u003e10\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[2,3,4,5,7,9,10]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n2 = 2^0 + 3^0\r\n3 = 2^1 + 3^0\r\n4 = 2^0 + 3^1\r\n5 = 2^1 + 3^1\r\n7 = 2^2 + 3^1\r\n9 = 2^3 + 3^0\r\n10 = 2^0 + 3^2\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ex = \u003cspan id=\"example-input-2-1\"\u003e3\u003c/span\u003e, y = \u003cspan id=\"example-input-2-2\"\u003e5\u003c/span\u003e, bound = \u003cspan id=\"example-input-2-3\"\u003e15\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[2,4,6,8,10,14]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= x \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= y\u0026nbsp;\u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= bound\u0026nbsp;\u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","Difficulty":"Easy","TranslatedTitle":"强整数","TranslatedContent":"\u003cp\u003e给定两个正整数 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e，如果某一整数等于 \u003ccode\u003ex^i + y^j\u003c/code\u003e，其中整数\u0026nbsp;\u003ccode\u003ei \u0026gt;= 0\u003c/code\u003e 且\u0026nbsp;\u003ccode\u003ej \u0026gt;= 0\u003c/code\u003e，那么我们认为该整数是一个\u003cem\u003e强整数\u003c/em\u003e。\u003c/p\u003e\n\n\u003cp\u003e返回值小于或等于\u0026nbsp;\u003ccode\u003ebound\u003c/code\u003e\u0026nbsp;的所有\u003cem\u003e强整数\u003c/em\u003e组成的列表。\u003c/p\u003e\n\n\u003cp\u003e你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ex = 2, y = 3, bound = 10\n\u003cstrong\u003e输出：\u003c/strong\u003e[2,3,4,5,7,9,10]\n\u003cstrong\u003e解释： \u003c/strong\u003e\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ex = 3, y = 5, bound = 15\n\u003cstrong\u003e输出：\u003c/strong\u003e[2,4,6,8,10,14]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= x \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= y\u0026nbsp;\u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= bound\u0026nbsp;\u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"12612239":{"ID":"12612239","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/12612239/","Code":"#\n# @lc app=leetcode.cn id=970 lang=python3\n#\n# [970] Powerful Integers\n#\n# https://leetcode-cn.com/problems/powerful-integers/description/\n#\n# algorithms\n# Easy (38.29%)\n# Total Accepted:    918\n# Total Submissions: 2.4K\n# Testcase Example:  '2\\n3\\n10'\n#\n# 给定两个非负整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i \u003e= 0 且 j \u003e= 0，那么我们认为该整数是一个强整数。\n# \n# 返回值小于或等于 bound 的所有强整数组成的列表。\n# \n# 你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。\n# \n# \n# \n# 示例 1：\n# \n# 输入：x = 2, y = 3, bound = 10\n# 输出：[2,3,4,5,7,9,10]\n# 解释： \n# 2 = 2^0 + 3^0\n# 3 = 2^1 + 3^0\n# 4 = 2^0 + 3^1\n# 5 = 2^1 + 3^1\n# 7 = 2^2 + 3^1\n# 9 = 2^3 + 3^0\n# 10 = 2^0 + 3^2\n# \n# \n# 示例 2：\n# \n# 输入：x = 3, y = 5, bound = 15\n# 输出：[2,4,6,8,10,14]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= x \u003c= 100\n# 1 \u003c= y \u003c= 100\n# 0 \u003c= bound \u003c= 10^6\n# \n# \n#\nimport math\n\nclass Solution:\n    def powerfulIntegers(self, x, y, bound):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type bound: int\n        :rtype: List[int]\n        \"\"\"\n        if bound == 0:\n            return []\n        res = set()\n        \n        for i in range(int(math.log(bound, x)+1) if x != 1 else 1):\n            for j in range(int(math.log(bound, y)+1) if y != 1 else 1):\n                r = x**i + y ** j\n                if r \u003e bound:\n                    break\n                res.add(r) \n        return list(res)\n","Timestamp":"1549957532"},"15006941":{"ID":"15006941","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13 MB","URL":"/submissions/detail/15006941/","Code":"#\n# @lc app=leetcode.cn id=970 lang=python3\n#\n# [970] Powerful Integers\n#\n# https://leetcode-cn.com/problems/powerful-integers/description/\n#\n# algorithms\n# Easy (38.29%)\n# Total Accepted:    918\n# Total Submissions: 2.4K\n# Testcase Example:  '2\\n3\\n10'\n#\n# 给定两个非负整数 x 和 y，如果某一整数等于 x^i + y^j，其中整数 i \u003e= 0 且 j \u003e= 0，那么我们认为该整数是一个强整数。\n# \n# 返回值小于或等于 bound 的所有强整数组成的列表。\n# \n# 你可以按任何顺序返回答案。在你的回答中，每个值最多出现一次。\n# \n# \n# \n# 示例 1：\n# \n# 输入：x = 2, y = 3, bound = 10\n# 输出：[2,3,4,5,7,9,10]\n# 解释： \n# 2 = 2^0 + 3^0\n# 3 = 2^1 + 3^0\n# 4 = 2^0 + 3^1\n# 5 = 2^1 + 3^1\n# 7 = 2^2 + 3^1\n# 9 = 2^3 + 3^0\n# 10 = 2^0 + 3^2\n# \n# \n# 示例 2：\n# \n# 输入：x = 3, y = 5, bound = 15\n# 输出：[2,4,6,8,10,14]\n# \n# \n# \n# \n# 提示：\n# \n# \n# 1 \u003c= x \u003c= 100\n# 1 \u003c= y \u003c= 100\n# 0 \u003c= bound \u003c= 10^6\n# \n# \n#\nimport math\n\nclass Solution:\n    def powerfulIntegers(self, x, y, bound):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type bound: int\n        :rtype: List[int]\n        \"\"\"\n        if bound == 0:\n            return []\n        res = set()\n        \n        for i in range(int(math.log(bound, x)+1) if x != 1 else 1):\n            for j in range(int(math.log(bound, y)+1) if y != 1 else 1):\n                r = x**i + y ** j\n                if r \u003e bound:\n                    break\n                res.add(r) \n        return list(res)\n\n","Timestamp":"1552927913"}}},{"questionId":"986","questionFrontendId":"949","Title":"Largest Time for Given Digits","TitleSlug":"largest-time-for-given-digits","Content":"\u003cp\u003eGiven an array of 4 digits, return the largest 24 hour time that can be made.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe smallest 24 hour time is 00:00, and the largest is 23:59.\u0026nbsp; Starting from 00:00, a time is larger if more time has elapsed since midnight.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the answer as a string of length 5.\u0026nbsp; If no valid time can be made, return an empty string.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[1,2,3,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e\u0026quot;23:41\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[5,5,5,5]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan\u003eNote:\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA.length == 4\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"给定数字能组成的最大时间","TranslatedContent":"\u003cp\u003e给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。\u003c/p\u003e\n\n\u003cp\u003e最小的 24 小时制时间是\u0026nbsp;00:00，而最大的是\u0026nbsp;23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。\u003c/p\u003e\n\n\u003cp\u003e以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,2,3,4]\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;23:41\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[5,5,5,5]\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003eA.length == 4\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 9\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"12613630":{"ID":"12613630","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"6.9 MB","URL":"/submissions/detail/12613630/","Code":"#\n# @lc app=leetcode.cn id=949 lang=python3\n#\n# [949] 猫和老鼠\n#\n# https://leetcode-cn.com/problems/largest-time-for-given-digits/description/\n#\n# algorithms\n# Easy (27.98%)\n# Total Accepted:    780\n# Total Submissions: 2.8K\n# Testcase Example:  '[1,2,3,4]'\n#\n# 给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。\n# \n# 最小的 24 小时制时间是 00:00，而最大的是 23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。\n# \n# 以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[1,2,3,4]\n# 输出：\"23:41\"\n# \n# \n# 示例 2：\n# \n# 输入：[5,5,5,5]\n# 输出：\"\"\n# \n# \n# \n# \n# 提示：\n# \n# \n# A.length == 4\n# 0 \u003c= A[i] \u003c= 9\n# \n# \n#\nclass Solution:\n    def largestTimeFromDigits(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: str\n        \"\"\"\n        A.sort()\n        for x in range(23, -1, -1):\n            x = str(x)\n            if len(x) == 1:\n                x = '0' + x\n            print(x)\n            if int(x[0]) != int(x[1]):\n                if int(x[0]) not in A or int(x[1]) not in A:\n                    continue\n            else:\n                if A.count(int(x[0])) \u003c 2:\n                    continue\n            for y in range(59, -1, -1):\n                y = str(y)\n                if len(y) == 1:\n                    y = '0' + y\n                r = [int(c) for c in x + y]\n                r.sort()\n                if all([r[x] == A[x] for x in range(4)]):\n                    return x + ':' + y \n        return ''\n","Timestamp":"1549958742"},"15006931":{"ID":"15006931","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"13.6 MB","URL":"/submissions/detail/15006931/","Code":"#\n# @lc app=leetcode.cn id=949 lang=python3\n#\n# [949] 猫和老鼠\n#\n# https://leetcode-cn.com/problems/largest-time-for-given-digits/description/\n#\n# algorithms\n# Easy (27.98%)\n# Total Accepted:    780\n# Total Submissions: 2.8K\n# Testcase Example:  '[1,2,3,4]'\n#\n# 给定一个由 4 位数字组成的数组，返回可以设置的符合 24 小时制的最大时间。\n# \n# 最小的 24 小时制时间是 00:00，而最大的是 23:59。从 00:00 （午夜）开始算起，过得越久，时间越大。\n# \n# 以长度为 5 的字符串返回答案。如果不能确定有效时间，则返回空字符串。\n# \n# \n# \n# 示例 1：\n# \n# 输入：[1,2,3,4]\n# 输出：\"23:41\"\n# \n# \n# 示例 2：\n# \n# 输入：[5,5,5,5]\n# 输出：\"\"\n# \n# \n# \n# \n# 提示：\n# \n# \n# A.length == 4\n# 0 \u003c= A[i] \u003c= 9\n# \n# \n#\nclass Solution:\n    def largestTimeFromDigits(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: str\n        \"\"\"\n        A.sort()\n        for x in range(23, -1, -1):\n            x = str(x)\n            if len(x) == 1:\n                x = '0' + x\n            print(x)\n            if int(x[0]) != int(x[1]):\n                if int(x[0]) not in A or int(x[1]) not in A:\n                    continue\n            else:\n                if A.count(int(x[0])) \u003c 2:\n                    continue\n            for y in range(59, -1, -1):\n                y = str(y)\n                if len(y) == 1:\n                    y = '0' + y\n                r = [int(c) for c in x + y]\n                r.sort()\n                if all([r[x] == A[x] for x in range(4)]):\n                    return x + ':' + y \n        return ''\n\n","Timestamp":"1552927825"}}},{"questionId":"326","questionFrontendId":"326","Title":"Power of Three","TitleSlug":"power-of-three","Content":"\u003cp\u003eGiven an integer, write a function to determine if it is a power of three.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 27\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 0\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 3:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 9\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 4:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 45\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003cbr /\u003e\r\nCould you do it without using any loop / recursion?\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"3的幂","TranslatedContent":"\u003cp\u003e给定一个整数，写一个函数来判断它是否是 3\u0026nbsp;的幂次方。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 27\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 0\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 9\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 45\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003cbr\u003e\n你能不使用循环或者递归来完成本题吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006743":{"ID":"15006743","StatusDisplay":"Accepted","Lang":"python","Runtime":"240 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006743/","Code":"class Solution:\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n \u003c= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        if n == 1:\n            return True\n        else:\n            return False\n","Timestamp":"1552925778"},"7888325":{"ID":"7888325","StatusDisplay":"Accepted","Lang":"python3","Runtime":"692 ms","Memory":"N/A","URL":"/submissions/detail/7888325/","Code":"class Solution:\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n \u003c= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        if n == 1:\n            return True\n        else:\n            return False","Timestamp":"1538729759"}}},{"questionId":"782","questionFrontendId":"771","Title":"Jewels and Stones","TitleSlug":"jewels-and-stones","Content":"\u003cp\u003eYou\u0026#39;re given strings \u003ccode\u003eJ\u003c/code\u003e representing the types of stones that are jewels, and \u003ccode\u003eS\u003c/code\u003e representing the stones you have.\u0026nbsp; Each character in \u003ccode\u003eS\u003c/code\u003e is a type of stone you have.\u0026nbsp; You want to know how many of the stones you have are also jewels.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe letters in \u003ccode\u003eJ\u003c/code\u003e are guaranteed distinct, and all characters in \u003ccode\u003eJ\u003c/code\u003e and \u003ccode\u003eS\u003c/code\u003e are letters. Letters are case sensitive, so \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e is considered a different type of stone from \u003ccode\u003e\u0026quot;A\u0026quot;\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e J = \u0026quot;aA\u0026quot;, S = \u0026quot;aAAbbbb\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e J = \u0026quot;z\u0026quot;, S = \u0026quot;ZZ\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 0\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003eJ\u003c/code\u003e will consist of letters and have length at most 50.\u003c/li\u003e\r\n\t\u003cli\u003eThe characters in \u003ccode\u003eJ\u003c/code\u003e are distinct.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"宝石与石头","TranslatedContent":"\u003cp\u003e\u0026nbsp;给定字符串\u003ccode\u003eJ\u003c/code\u003e\u0026nbsp;代表石头中宝石的类型，和字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e代表你拥有的石头。\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eJ\u003c/code\u003e\u0026nbsp;中的字母不重复，\u003ccode\u003eJ\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e中的所有字符都是字母。字母区分大小写，因此\u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e和\u003ccode\u003e\u0026quot;A\u0026quot;\u003c/code\u003e是不同类型的石头。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e J = \u0026quot;aA\u0026quot;, S = \u0026quot;aAAbbbb\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e J = \u0026quot;z\u0026quot;, S = \u0026quot;ZZ\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eJ\u003c/code\u003e\u0026nbsp;最多含有50个字母。\u003c/li\u003e\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003eJ\u003c/code\u003e\u0026nbsp;中的字符不重复。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006629":{"ID":"15006629","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"6.5 MB","URL":"/submissions/detail/15006629/","Code":"class Solution:\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        return sum([S.count(j) for j in J])\n            \n        ","Timestamp":"1545662388"},"15006865":{"ID":"15006865","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006865/","Code":"class Solution:\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        return sum([S.count(x) for x in J])\n            \n        \n","Timestamp":"1552927312"},"7573049":{"ID":"7573049","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7573049/","Code":"class Solution:\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        return sum([S.count(x) for x in J])\n            \n        ","Timestamp":"1536389991"}}},{"questionId":"825","questionFrontendId":"807","Title":"Max Increase to Keep City Skyline","TitleSlug":"max-increase-to-keep-city-skyline","Content":"\u003cp\u003eIn a 2 dimensional array \u003ccode\u003egrid\u003c/code\u003e, each value \u003ccode\u003egrid[i][j]\u003c/code\u003e represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts\u0026nbsp;can be different for different buildings). Height\u0026nbsp;0 is considered to be a\u0026nbsp;building\u0026nbsp;as well.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eAt the end, the \u0026quot;skyline\u0026quot; when viewed from all four directions\u0026nbsp;of the grid, i.e.\u0026nbsp;top, bottom, left, and right,\u0026nbsp;must be the same as the\u0026nbsp;skyline of the original grid. A city\u0026#39;s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See\u0026nbsp;the following example.\u003c/p\u003e\r\n\r\n\u003cp\u003eWhat is the maximum total sum that the height of the buildings can be increased?\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 35\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nThe grid is:\r\n[ [3, 0, 8, 4], \r\n  [2, 4, 5, 7],\r\n  [9, 2, 6, 3],\r\n  [0, 3, 1, 0] ]\r\n\r\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\r\nThe skyline viewed from left or right is: [8, 7, 9, 3]\r\n\r\nThe grid after increasing the height of buildings without affecting skylines is:\r\n\r\ngridNew = [ [8, 4, 8, 7],\r\n            [7, 4, 7, 7],\r\n            [9, 4, 8, 7],\r\n            [3, 3, 3, 3] ]\r\n\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNotes: \u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt; grid.length = grid[0].length \u0026lt;= 50\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eAll heights \u003ccode\u003egrid[i][j]\u003c/code\u003e are in the range \u003ccode\u003e[0, 100]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eAll buildings in \u003ccode\u003egrid[i][j]\u003c/code\u003e occupy the entire grid cell: that is, they are a \u003ccode\u003e1 x 1 x grid[i][j]\u003c/code\u003e rectangular prism.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"保持城市天际线","TranslatedContent":"\u003cp\u003e在二维数组\u003ccode\u003egrid\u003c/code\u003e中，\u003ccode\u003egrid[i][j]\u003c/code\u003e代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。\u003c/p\u003e\n\n\u003cp\u003e最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的\u0026ldquo;天际线\u0026rdquo;必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。\u003c/p\u003e\n\n\u003cp\u003e建筑物高度可以增加的最大总和是多少？\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e例子：\u003c/strong\u003e\n\u003cstrong\u003e输入：\u003c/strong\u003e grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n\u003cstrong\u003e输出：\u003c/strong\u003e 35\n\u003cstrong\u003e解释：\u003c/strong\u003e \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n从数组竖直方向（即顶部，底部）看\u0026ldquo;天际线\u0026rdquo;是：[9, 4, 8, 7]\n从水平水平方向（即左侧，右侧）看\u0026ldquo;天际线\u0026rdquo;是：[8, 7, 9, 3]\n\n在不影响天际线的情况下对建筑物进行增高后，新数组如下：\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt; grid.length = grid[0].length \u0026lt;= 50\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003egrid[i][j]\u003c/code\u003e 的高度范围是： \u003ccode\u003e[0, 100]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e一座建筑物占据一个\u003ccode\u003egrid[i][j]\u003c/code\u003e：换言之，它们是 \u003ccode\u003e1 x 1 x grid[i][j]\u003c/code\u003e 的长方体。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006878":{"ID":"15006878","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006878/","Code":"class Solution:\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        bottom = [0 for _ in range(len(grid[0]))]\n        right = [max(x) for x in grid]\n        for line in grid:\n            for i,x in enumerate(line):\n                if bottom[i] \u003c x:\n                    bottom[i] = x\n        s = 0\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                s += min(bottom[x], right[y]) - grid[x][y]\n        return s\n                \n            \n            \n        \n","Timestamp":"1552927428"},"7885554":{"ID":"7885554","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7885554/","Code":"class Solution:\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        bottom = [0 for _ in range(len(grid[0]))]\n        right = [max(x) for x in grid]\n        for line in grid:\n            for i,x in enumerate(line):\n                if bottom[i] \u003c x:\n                    bottom[i] = x\n        s = 0\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                s += min(bottom[x], right[y]) - grid[x][y]\n        return s\n                \n            \n            \n        ","Timestamp":"1537931021"},"7885684":{"ID":"7885684","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/7885684/","Code":"class Solution:\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        bottom = [0 for _ in range(len(grid[0]))]\n        right = [max(x) for x in grid]\n        for line in grid:\n            for i,x in enumerate(line):\n                if bottom[i] \u003c x:\n                    bottom[i] = x\n        s = 0\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                s += min(bottom[x], right[y]) - grid[x][y]\n        return s\n                \n            \n            \n        ","Timestamp":"1538727064"}}},{"questionId":"807","questionFrontendId":"791","Title":"Custom Sort String","TitleSlug":"custom-sort-string","Content":"\u003cp\u003e\u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003eT\u003c/code\u003e are strings composed of lowercase letters. In \u003ccode\u003eS\u003c/code\u003e, no letter occurs more than once.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003ccode\u003eS\u003c/code\u003e was sorted in some custom order previously. We want to permute the characters of \u003ccode\u003eT\u003c/code\u003e so that they match the order that \u003ccode\u003eS\u003c/code\u003e was sorted. More specifically, if \u003ccode\u003ex\u003c/code\u003e occurs before \u003ccode\u003ey\u003c/code\u003e in \u003ccode\u003eS\u003c/code\u003e, then \u003ccode\u003ex\u003c/code\u003e should occur before \u003ccode\u003ey\u003c/code\u003e in the returned string.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn any permutation of \u003ccode\u003eT\u003c/code\u003e (as a string) that satisfies this property.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample :\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \r\nS = \u0026quot;cba\u0026quot;\r\nT = \u0026quot;abcd\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;cbad\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\n\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot; appear in S, so the order of \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot; should be \u0026quot;c\u0026quot;, \u0026quot;b\u0026quot;, and \u0026quot;a\u0026quot;. \r\nSince \u0026quot;d\u0026quot; does not appear in S, it can be at any position in T. \u0026quot;dcba\u0026quot;, \u0026quot;cdba\u0026quot;, \u0026quot;cbda\u0026quot; are also valid outputs.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e has length at most \u003ccode\u003e26\u003c/code\u003e, and no character is repeated in \u003ccode\u003eS\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eT\u003c/code\u003e has length at most \u003ccode\u003e200\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003eT\u003c/code\u003e consist of lowercase letters only.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"自定义字符串排序","TranslatedContent":"\u003cp\u003e字符串\u003ccode\u003eS\u003c/code\u003e和 \u003ccode\u003eT\u003c/code\u003e 只包含小写字符。在\u003ccode\u003eS\u003c/code\u003e中，所有字符只会出现一次。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eS\u003c/code\u003e 已经根据某种规则进行了排序。我们要根据\u003ccode\u003eS\u003c/code\u003e中的字符顺序对\u003ccode\u003eT\u003c/code\u003e进行排序。更具体地说，如果\u003ccode\u003eS\u003c/code\u003e中\u003ccode\u003ex\u003c/code\u003e在\u003ccode\u003ey\u003c/code\u003e之前出现，那么返回的字符串中\u003ccode\u003ex\u003c/code\u003e也应出现在\u003ccode\u003ey\u003c/code\u003e之前。\u003c/p\u003e\n\n\u003cp\u003e返回任意一种符合条件的字符串\u003ccode\u003eT\u003c/code\u003e。\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e\nS = \u0026quot;cba\u0026quot;\nT = \u0026quot;abcd\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;cbad\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e \nS中出现了字符 \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;, 所以 \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot; 的顺序应该是 \u0026quot;c\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;a\u0026quot;. \n由于 \u0026quot;d\u0026quot; 没有在S中出现, 它可以放在T的任意位置. \u0026quot;dcba\u0026quot;, \u0026quot;cdba\u0026quot;, \u0026quot;cbda\u0026quot; 都是合法的输出。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e的最大长度为\u003ccode\u003e26\u003c/code\u003e，其中没有重复的字符。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eT\u003c/code\u003e的最大长度为\u003ccode\u003e200\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e和\u003ccode\u003eT\u003c/code\u003e只包含小写字符。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006870":{"ID":"15006870","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006870/","Code":"class Solution:\n    def customSortString(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: str\n        \"\"\"\n        data = [0 for _ in range(len(S))]\n        for i,k in enumerate(list(S)):\n            data[i]=T.count(k)\n            T = T.replace(k, '')\n        return ''.join([S[i]*k for i, k in enumerate(data)]) + T\n","Timestamp":"1552927361"},"8473891":{"ID":"8473891","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/8473891/","Code":"class Solution:\n    def customSortString(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: str\n        \"\"\"\n        data = [0 for _ in range(len(S))]\n        for i,k in enumerate(list(S)):\n            data[i]=T.count(k)\n            T = T.replace(k, '')\n        return ''.join([S[i]*k for i, k in enumerate(data)]) + T","Timestamp":"1540004072"}}},{"questionId":"784","questionFrontendId":"701","Title":"Insert into a Binary Search Tree","TitleSlug":"insert-into-a-binary-search-tree","Content":"\u003cp\u003eGiven the root node of a binary search tree (BST) and a value to be inserted into the tree,\u0026nbsp;insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that there may exist\u0026nbsp;multiple valid ways for the\u0026nbsp;insertion, as long as the tree remains a BST after insertion. You can return any of them.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example,\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\nAnd the value to insert: 5\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eYou can return this binary search tree:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n         4\r\n       /   \\\r\n      2     7\r\n     / \\   /\r\n    1   3 5\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eThis tree is also valid:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n         5\r\n       /   \\\r\n      2     7\r\n     / \\   \r\n    1   3\r\n         \\\r\n          4\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"二叉搜索树中的插入操作","TranslatedContent":"\u003cp\u003e给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。\u003c/p\u003e\n\n\u003cp\u003e注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。\u003c/p\u003e\n\n\u003cp\u003e例如,\u0026nbsp;\u003c/p\u003e\n\n\u003cpre\u003e\n给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和 插入的值: 5\n\u003c/pre\u003e\n\n\u003cp\u003e你可以返回这个二叉搜索树:\u003c/p\u003e\n\n\u003cpre\u003e\n         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 5\n\u003c/pre\u003e\n\n\u003cp\u003e或者这个树也是有效的:\u003c/p\u003e\n\n\u003cpre\u003e\n         5\n       /   \\\n      2     7\n     / \\   \n    1   3\n         \\\n          4\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"10980599":{"ID":"10980599","StatusDisplay":"Accepted","Lang":"python3","Runtime":"152 ms","Memory":"10 MB","URL":"/submissions/detail/10980599/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def insertIntoBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        tmp = root\n        flag = False\n        while not flag:\n            if tmp.val \u003c val:\n                if tmp.right:\n                    tmp = tmp.right\n                else:\n                    tmp.right = TreeNode(val)\n                    flag = True\n            else:\n                if tmp.left:\n                    tmp = tmp.left\n                else:\n                    tmp.left =  TreeNode(val)\n                    flag = True\n        return root\n        ","Timestamp":"1545970186"},"15006850":{"ID":"15006850","StatusDisplay":"Accepted","Lang":"python","Runtime":"100 ms","Memory":"15.1 MB","URL":"/submissions/detail/15006850/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def insertIntoBST(self, root, val):\n        \"\"\"\n        :type root: TreeNode\n        :type val: int\n        :rtype: TreeNode\n        \"\"\"\n        tmp = root\n        flag = False\n        while not flag:\n            if tmp.val \u003c val:\n                if tmp.right:\n                    tmp = tmp.right\n                else:\n                    tmp.right = TreeNode(val)\n                    flag = True\n            else:\n                if tmp.left:\n                    tmp = tmp.left\n                else:\n                    tmp.left =  TreeNode(val)\n                    flag = True\n        return root\n        \n","Timestamp":"1552927173"}}},{"questionId":"78","questionFrontendId":"78","Title":"Subsets","TitleSlug":"subsets","Content":"\u003cp\u003eGiven a set of \u003cstrong\u003edistinct\u003c/strong\u003e integers, \u003cem\u003enums\u003c/em\u003e, return all possible subsets (the power set).\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The solution set must not contain duplicate subsets.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,2,3]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n  [3],\r\n\u0026nbsp; [1],\r\n\u0026nbsp; [2],\r\n\u0026nbsp; [1,2,3],\r\n\u0026nbsp; [1,3],\r\n\u0026nbsp; [2,3],\r\n\u0026nbsp; [1,2],\r\n\u0026nbsp; []\r\n]\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"子集","TranslatedContent":"\u003cp\u003e给定一组\u003cstrong\u003e不含重复元素\u003c/strong\u003e的整数数组\u0026nbsp;\u003cem\u003enums\u003c/em\u003e，返回该数组所有可能的子集（幂集）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e解集不能包含重复的子集。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e nums = [1,2,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n  [3],\n\u0026nbsp; [1],\n\u0026nbsp; [2],\n\u0026nbsp; [1,2,3],\n\u0026nbsp; [1,3],\n\u0026nbsp; [2,3],\n\u0026nbsp; [1,2],\n\u0026nbsp; []\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006867":{"ID":"15006867","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006867/","Code":"class Solution:\n    # Iteratively\n    def subsets(self, nums):\n        res = [[]]\n        for num in sorted(nums):\n            res += [item+[num] for item in res]\n        return res\n\n","Timestamp":"1552927326"},"15006954":{"ID":"15006954","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11 MB","URL":"/submissions/detail/15006954/","Code":"class Solution:\n    # Iteratively\n    def subsets(self, nums):\n        res = [[]]\n        for num in sorted(nums):\n            res += [item+[num] for item in res]\n        return res\n\n","Timestamp":"1552928172"},"7916693":{"ID":"7916693","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7916693/","Code":"class Solution:\n    # Iteratively\n    def subsets(self, nums):\n        res = [[]]\n        for num in sorted(nums):\n            res += [item+[num] for item in res]\n        return res\n","Timestamp":"1538817963"}}},{"questionId":"112","questionFrontendId":"112","Title":"Path Sum","TitleSlug":"path-sum","Content":"\u003cp\u003eGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;A leaf is a node with no children.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven the below binary tree and \u003ccode\u003esum = 22\u003c/code\u003e,\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n      \u003cstrong\u003e5\u003c/strong\u003e\r\n     \u003cstrong\u003e/\u003c/strong\u003e \\\r\n    \u003cstrong\u003e4\u003c/strong\u003e   8\r\n   \u003cstrong\u003e/\u003c/strong\u003e   / \\\r\n  \u003cstrong\u003e11\u003c/strong\u003e  13  4\r\n /  \u003cstrong\u003e\\\u003c/strong\u003e      \\\r\n7    \u003cstrong\u003e2\u003c/strong\u003e      1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003ereturn true, as there exist a root-to-leaf path \u003ccode\u003e5-\u0026gt;4-\u0026gt;11-\u0026gt;2\u003c/code\u003e which sum is 22.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"路径总和","TranslatedContent":"\u003cp\u003e给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u0026nbsp;叶子节点是指没有子节点的节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u0026nbsp;\u003cbr\u003e\n给定如下二叉树，以及目标和 \u003ccode\u003esum = 22\u003c/code\u003e，\u003c/p\u003e\n\n\u003cpre\u003e              \u003cstrong\u003e5\u003c/strong\u003e\n             / \\\n            \u003cstrong\u003e4 \u003c/strong\u003e  8\n           /   / \\\n          \u003cstrong\u003e11 \u003c/strong\u003e 13  4\n         /  \\      \\\n        7    \u003cstrong\u003e2\u003c/strong\u003e      1\n\u003c/pre\u003e\n\n\u003cp\u003e返回 \u003ccode\u003etrue\u003c/code\u003e, 因为存在目标和为 22 的根节点到叶子节点的路径 \u003ccode\u003e5-\u0026gt;4-\u0026gt;11-\u0026gt;2\u003c/code\u003e。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"12914265":{"ID":"12914265","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"8.7 MB","URL":"/submissions/detail/12914265/","Code":"#\n# @lc app=leetcode.cn id=112 lang=python3\n#\n# [112] 路径总和\n#\n# https://leetcode-cn.com/problems/path-sum/description/\n#\n# algorithms\n# Easy (44.03%)\n# Total Accepted:    10.4K\n# Total Submissions: 23.4K\n# Testcase Example:  '[5,4,8,11,null,13,4,7,2,null,null,null,1]\\n22'\n#\n# 给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\n#\n# 说明: 叶子节点是指没有子节点的节点。\n#\n# 示例: \n# 给定如下二叉树，以及目标和 sum = 22，\n#\n# ⁠             5\n# ⁠            / \\\n# ⁠           4   8\n# ⁠          /   / \\\n# ⁠         11  13  4\n# ⁠        /  \\      \\\n# ⁠       7    2      1\n#\n#\n# 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-\u003e4-\u003e11-\u003e2。\n#\n#\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def hasPathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if sum-root.val == 0:\n            if not root.right and not root.left:\n                return True\n\n        if self.hasPathSum(root.left, sum-root.val) or self.hasPathSum(root.right, sum-root.val):\n            return True\n        else:\n            return False\n","Timestamp":"1550477391"},"15006649":{"ID":"15006649","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"15.1 MB","URL":"/submissions/detail/15006649/","Code":"#\n# @lc app=leetcode.cn id=112 lang=python3\n#\n# [112] 路径总和\n#\n# https://leetcode-cn.com/problems/path-sum/description/\n#\n# algorithms\n# Easy (44.03%)\n# Total Accepted:    10.4K\n# Total Submissions: 23.4K\n# Testcase Example:  '[5,4,8,11,null,13,4,7,2,null,null,null,1]\\n22'\n#\n# 给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\n#\n# 说明: 叶子节点是指没有子节点的节点。\n#\n# 示例: \n# 给定如下二叉树，以及目标和 sum = 22，\n#\n# ⁠             5\n# ⁠            / \\\n# ⁠           4   8\n# ⁠          /   / \\\n# ⁠         11  13  4\n# ⁠        /  \\      \\\n# ⁠       7    2      1\n#\n#\n# 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-\u003e4-\u003e11-\u003e2。\n#\n#\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def hasPathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if sum-root.val == 0:\n            if not root.right and not root.left:\n                return True\n\n        if self.hasPathSum(root.left, sum-root.val) or self.hasPathSum(root.right, sum-root.val):\n            return True\n        else:\n            return False\n\n","Timestamp":"1552925060"}}},{"questionId":"693","questionFrontendId":"693","Title":"Binary Number with Alternating Bits","TitleSlug":"binary-number-with-alternating-bits","Content":"\u003cp\u003eGiven a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 5\r\n\u003cb\u003eOutput:\u003c/b\u003e True\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe binary representation of 5 is: 101\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 7\r\n\u003cb\u003eOutput:\u003c/b\u003e False\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe binary representation of 7 is: 111.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 3:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 11\r\n\u003cb\u003eOutput:\u003c/b\u003e False\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe binary representation of 11 is: 1011.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 4:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 10\r\n\u003cb\u003eOutput:\u003c/b\u003e True\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\nThe binary representation of 10 is: 1010.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"交替位二进制数","TranslatedContent":"\u003cp\u003e给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 5\n\u003cstrong\u003e输出:\u003c/strong\u003e True\n\u003cstrong\u003e解释:\u003c/strong\u003e\n5的二进制数是: 101\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 7\n\u003cstrong\u003e输出:\u003c/strong\u003e False\n\u003cstrong\u003e解释:\u003c/strong\u003e\n7的二进制数是: 111\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 11\n\u003cstrong\u003e输出:\u003c/strong\u003e False\n\u003cstrong\u003e解释:\u003c/strong\u003e\n11的二进制数是: 1011\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u0026nbsp;示例 4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 10\n\u003cstrong\u003e输出:\u003c/strong\u003e True\n\u003cstrong\u003e解释:\u003c/strong\u003e\n10的二进制数是: 1010\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006842":{"ID":"15006842","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006842/","Code":"class Solution(object):\n    def hasAlternatingBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        s = str(bin(n))[2:]\n        for x in range(len(s)-1):\n            if s[x] == s[x+1]:\n                return False\n        return True\n","Timestamp":"1552927113"},"7981572":{"ID":"7981572","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7981572/","Code":"class Solution(object):\n    def hasAlternatingBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        s = str(bin(n))[2:]\n        for x in range(len(s)-1):\n            if s[x] == s[x+1]:\n                return False\n        return True","Timestamp":"1538984406"}}},{"questionId":"142","questionFrontendId":"142","Title":"Linked List Cycle II","TitleSlug":"linked-list-cycle-ii","Content":"\u003cp\u003eGiven a linked list, return the node where the cycle begins. If there is no cycle, return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eTo represent a cycle in the given linked list, we use an integer \u003ccode\u003epos\u003c/code\u003e which represents the position (0-indexed)\u0026nbsp;in the linked list where tail connects to. If \u003ccode\u003epos\u003c/code\u003e is \u003ccode\u003e-1\u003c/code\u003e, then there is no cycle in the linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e Do not modify the linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = [3,2,0,-4], pos = 1\r\n\u003cstrong\u003eOutput: \u003c/strong\u003etail connects to node index 1\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is a cycle in the linked list, where tail connects to the second node.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = [1,2], pos = 0\r\n\u003cstrong\u003eOutput: \u003c/strong\u003etail connects to node index 0\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is a cycle in the linked list, where tail connects to the first node.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ehead = [1], pos = -1\r\n\u003cstrong\u003eOutput: \u003c/strong\u003eno cycle\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no cycle in the linked list.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up\u003c/b\u003e:\u003cbr /\u003e\r\nCan you solve it without using extra space?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"环形链表 II","TranslatedContent":"\u003cp\u003e给定一个链表，返回链表开始入环的第一个节点。\u0026nbsp;如果链表无环，则返回\u0026nbsp;\u003ccode\u003enull\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e为了表示给定链表中的环，我们使用整数 \u003ccode\u003epos\u003c/code\u003e 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 \u003ccode\u003epos\u003c/code\u003e 是 \u003ccode\u003e-1\u003c/code\u003e，则在该链表中没有环。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e不允许修改给定的链表。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [3,2,0,-4], pos = 1\n\u003cstrong\u003e输出：\u003c/strong\u003etail connects to node index 1\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中有一个环，其尾部连接到第二个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [1,2], pos = 0\n\u003cstrong\u003e输出：\u003c/strong\u003etail connects to node index 0\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中有一个环，其尾部连接到第一个节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ehead = [1], pos = -1\n\u003cstrong\u003e输出：\u003c/strong\u003eno cycle\n\u003cstrong\u003e解释：\u003c/strong\u003e链表中没有环。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶：\u003c/strong\u003e\u003cbr\u003e\n你是否可以不用额外空间解决此题？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11182971":{"ID":"11182971","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"18.4 MB","URL":"/submissions/detail/11182971/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        s = set()\n        while head:\n            if head in s:\n                return head\n            s.add(head)\n            head = head.next\n        return","Timestamp":"1546508350"},"11183760":{"ID":"11183760","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"16.2 MB","URL":"/submissions/detail/11183760/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        fast = head\n        slow = head\n        while fast and slow:\n            if slow.next and fast.next and fast.next.next:\n                slow = slow.next\n                fast = fast.next.next\n                if fast == slow:\n                    break\n            else:\n                return\n        p = head\n        while p and slow:\n            if p == slow:\n                return p\n            p = p.next\n            slow = slow.next\n        return p\n            \n            ","Timestamp":"1546509114"},"15004214":{"ID":"15004214","StatusDisplay":"Accepted","Lang":"python","Runtime":"88 ms","Memory":"17 MB","URL":"/submissions/detail/15004214/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        fast = head\n        slow = head\n        while fast and slow:\n            if slow.next and fast.next and fast.next.next:\n                slow = slow.next\n                fast = fast.next.next\n                if fast == slow:\n                    break\n            else:\n                return\n        p = head\n        while p and slow:\n            if p == slow:\n                return p\n            p = p.next\n            slow = slow.next\n        return p\n            \n            \n","Timestamp":"1552924423"},"15006668":{"ID":"15006668","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"17 MB","URL":"/submissions/detail/15006668/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        fast = head\n        slow = head\n        while fast and slow:\n            if slow.next and fast.next and fast.next.next:\n                slow = slow.next\n                fast = fast.next.next\n                if fast == slow:\n                    break\n            else:\n                return\n        p = head\n        while p and slow:\n            if p == slow:\n                return p\n            p = p.next\n            slow = slow.next\n        return p\n            \n            \n","Timestamp":"1552925234"}}},{"questionId":"958","questionFrontendId":"922","Title":"Sort Array By Parity II","TitleSlug":"sort-array-by-parity-ii","Content":"\u003cp\u003eGiven an array \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;of non-negative integers, half of the integers in A are odd, and half of the integers are even.\u003c/p\u003e\r\n\r\n\u003cp\u003eSort the array so that whenever \u003ccode\u003eA[i]\u003c/code\u003e is odd, \u003ccode\u003ei\u003c/code\u003e is odd; and whenever \u003ccode\u003eA[i]\u003c/code\u003e is even, \u003ccode\u003ei\u003c/code\u003e is even.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return any answer array that satisfies this condition.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[4,2,5,7]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[4,5,2,7]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= A.length \u0026lt;= 20000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA.length % 2 == 0\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"按奇偶排序数组 II","TranslatedContent":"\u003cp\u003e给定一个非负整数数组\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e， A 中一半整数是奇数，一半整数是偶数。\u003c/p\u003e\n\n\u003cp\u003e对数组进行排序，以便当\u0026nbsp;\u003ccode\u003eA[i]\u003c/code\u003e 为奇数时，\u003ccode\u003ei\u003c/code\u003e\u0026nbsp;也是奇数；当\u0026nbsp;\u003ccode\u003eA[i]\u003c/code\u003e\u0026nbsp;为偶数时， \u003ccode\u003ei\u003c/code\u003e 也是偶数。\u003c/p\u003e\n\n\u003cp\u003e你可以返回任何满足上述条件的数组作为答案。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[4,2,5,7]\n\u003cstrong\u003e输出：\u003c/strong\u003e[4,5,2,7]\n\u003cstrong\u003e解释：\u003c/strong\u003e[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= A.length \u0026lt;= 20000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA.length % 2 == 0\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006921":{"ID":"15006921","StatusDisplay":"Accepted","Lang":"python","Runtime":"180 ms","Memory":"12.8 MB","URL":"/submissions/detail/15006921/","Code":"class Solution:\n    def sortArrayByParityII(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not A:\n            return A\n        a, b = 0, 1\n        while a \u003c len(A) and b \u003c len(A):\n            if A[a] % 2 == 0:\n                a += 2\n            else:\n                if A[b] % 2 == 1:\n                    b += 2\n                else:\n                    A[a], A[b] = A[b], A[a]\n        return A    \n        \n","Timestamp":"1552927732"},"8444934":{"ID":"8444934","StatusDisplay":"Accepted","Lang":"python3","Runtime":"276 ms","Memory":"N/A","URL":"/submissions/detail/8444934/","Code":"class Solution:\n    def sortArrayByParityII(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not A:\n            return A\n        a, b = 0, 1\n        while a \u003c len(A) and b \u003c len(A):\n            if A[a] % 2 == 0:\n                a += 2\n            else:\n                if A[b] % 2 == 1:\n                    b += 2\n                else:\n                    A[a], A[b] = A[b], A[a]\n        return A    \n        ","Timestamp":"1539931466"}}},{"questionId":"371","questionFrontendId":"371","Title":"Sum of Two Integers","TitleSlug":"sum-of-two-integers","Content":"\u003cp\u003eCalculate the sum of two integers \u003ci\u003ea\u003c/i\u003e and \u003ci\u003eb\u003c/i\u003e, but you are \u003cb\u003enot allowed\u003c/b\u003e to use the operator \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ea = \u003cspan id=\"example-input-1-1\"\u003e1\u003c/span\u003e, b = \u003cspan id=\"example-input-1-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e3\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ea = -\u003cspan id=\"example-input-2-1\"\u003e2\u003c/span\u003e, b = \u003cspan id=\"example-input-2-2\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e1\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两整数之和","TranslatedContent":"\u003cp\u003e\u003cstrong\u003e不使用\u003c/strong\u003e运算符\u0026nbsp;\u003ccode\u003e+\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003e-\u003c/code\u003e\u0026nbsp;​​​​​​​，计算两整数\u0026nbsp;​​​​​​​\u003ccode\u003ea\u003c/code\u003e\u0026nbsp;、\u003ccode\u003eb\u003c/code\u003e\u0026nbsp;​​​​​​​之和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003ea = 1, b = 2\n\u003cstrong\u003e输出: \u003c/strong\u003e3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003ea = -2, b = 3\n\u003cstrong\u003e输出: \u003c/strong\u003e1\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006754":{"ID":"15006754","StatusDisplay":"Accepted","Lang":"java","Runtime":"0 ms","Memory":"31.8 MB","URL":"/submissions/detail/15006754/","Code":"public class Solution {\n    public int getSum(int a, int b) {\n        return a+b;\n    }\n}\n","Timestamp":"1552925891"},"1729295":{"ID":"1729295","StatusDisplay":"Accepted","Lang":"java","Runtime":"0 ms","Memory":"N/A","URL":"/submissions/detail/1729295/","Code":"public class Solution {\r\n    public int getSum(int a, int b) {\r\n        return a+b;\r\n    }\r\n}","Timestamp":"1467638156"},"1729458":{"ID":"1729458","StatusDisplay":"Accepted","Lang":"java","Runtime":"0 ms","Memory":"N/A","URL":"/submissions/detail/1729458/","Code":"public class Solution {\r\n    public int getSum(int a, int b) {\r\n        return a+b;\r\n    }\r\n}","Timestamp":"1467638171"}}},{"questionId":"677","questionFrontendId":"677","Title":"Map Sum Pairs","TitleSlug":"map-sum-pairs","Content":"\u003cp\u003e\r\nImplement a MapSum class with \u003ccode\u003einsert\u003c/code\u003e, and \u003ccode\u003esum\u003c/code\u003e methods.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor the method \u003ccode\u003einsert\u003c/code\u003e, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\nFor the method \u003ccode\u003esum\u003c/code\u003e, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"键值映射","TranslatedContent":"\u003cp\u003e实现一个 MapSum 类里的两个方法，\u003ccode\u003einsert\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003esum\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e对于方法\u0026nbsp;\u003ccode\u003einsert\u003c/code\u003e，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。\u003c/p\u003e\n\n\u003cp\u003e对于方法 \u003ccode\u003esum\u003c/code\u003e，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e输入: insert(\u0026quot;apple\u0026quot;, 3), 输出: Null\n输入: sum(\u0026quot;ap\u0026quot;), 输出: 3\n输入: insert(\u0026quot;app\u0026quot;, 2), 输出: Null\n输入: sum(\u0026quot;ap\u0026quot;), 输出: 5\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11138798":{"ID":"11138798","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"6.5 MB","URL":"/submissions/detail/11138798/","Code":"class MapSum:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.data = {}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n        self.data[key] = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for key, value in self.data.items():\n            if key.startswith(prefix):\n                res += value\n        return res\n        \n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)","Timestamp":"1546420458"},"11138850":{"ID":"11138850","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"6.5 MB","URL":"/submissions/detail/11138850/","Code":"class MapSum:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.data = {}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n        self.data[key] = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        return sum([value for key, value in self.data.items() if key.startswith(prefix)])\n        \n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)","Timestamp":"1546420517"},"15006840":{"ID":"15006840","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006840/","Code":"class MapSum:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.data = {}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n        self.data[key] = val\n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        return sum([value for key, value in self.data.items() if key.startswith(prefix)])\n        \n\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)\n","Timestamp":"1552927080"}}},{"questionId":"412","questionFrontendId":"412","Title":"Fizz Buzz","TitleSlug":"fizz-buzz","Content":"\u003cp\u003eWrite a program that outputs the string representation of numbers from 1 to \u003ci\u003en\u003c/i\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eBut for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\nn = 15,\r\n\r\nReturn:\r\n[\r\n    \"1\",\r\n    \"2\",\r\n    \"Fizz\",\r\n    \"4\",\r\n    \"Buzz\",\r\n    \"Fizz\",\r\n    \"7\",\r\n    \"8\",\r\n    \"Fizz\",\r\n    \"Buzz\",\r\n    \"11\",\r\n    \"Fizz\",\r\n    \"13\",\r\n    \"14\",\r\n    \"FizzBuzz\"\r\n]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"Fizz Buzz","TranslatedContent":"\u003cp\u003e写一个程序，输出从 1 到 \u003cem\u003en\u003c/em\u003e 数字的字符串表示。\u003c/p\u003e\n\n\u003cp\u003e1. 如果\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e是3的倍数，输出\u0026ldquo;Fizz\u0026rdquo;；\u003c/p\u003e\n\n\u003cp\u003e2. 如果\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e是5的倍数，输出\u0026ldquo;Buzz\u0026rdquo;；\u003c/p\u003e\n\n\u003cp\u003e3.如果\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e同时是3和5的倍数，输出 \u0026ldquo;FizzBuzz\u0026rdquo;。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003en = 15,\n\n返回:\n[\n    \u0026quot;1\u0026quot;,\n    \u0026quot;2\u0026quot;,\n    \u0026quot;Fizz\u0026quot;,\n    \u0026quot;4\u0026quot;,\n    \u0026quot;Buzz\u0026quot;,\n    \u0026quot;Fizz\u0026quot;,\n    \u0026quot;7\u0026quot;,\n    \u0026quot;8\u0026quot;,\n    \u0026quot;Fizz\u0026quot;,\n    \u0026quot;Buzz\u0026quot;,\n    \u0026quot;11\u0026quot;,\n    \u0026quot;Fizz\u0026quot;,\n    \u0026quot;13\u0026quot;,\n    \u0026quot;14\u0026quot;,\n    \u0026quot;FizzBuzz\u0026quot;\n]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006769":{"ID":"15006769","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"11.8 MB","URL":"/submissions/detail/15006769/","Code":"class Solution:\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for x in range(1, n+1):\n            if x % 15 == 0:\n                res.append(\"FizzBuzz\")\n            elif x % 5 == 0:\n                res.append(\"Buzz\")\n            elif x % 3 == 0:\n                res.append(\"Fizz\")\n            else:\n                res.append(str(x))\n            \n            \n        return res\n\n","Timestamp":"1552926015"},"1729292":{"ID":"1729292","StatusDisplay":"Accepted","Lang":"python","Runtime":"86 ms","Memory":"N/A","URL":"/submissions/detail/1729292/","Code":"class Solution(object):\r\n    def fizzBuzz(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        l = []\r\n        for i in range(1,n+1):\r\n            if i % 3 == 0 and i% 5 == 0:\r\n                l.append('FizzBuzz')\r\n            elif i % 3 == 0:\r\n                l.append('Fizz')\r\n            elif i % 5 == 0:\r\n                l.append('Buzz')\r\n            else:\r\n                l.append(str(i))\r\n        return l\r\n                \r\n                \r\n            ","Timestamp":"1488193478"},"1729317":{"ID":"1729317","StatusDisplay":"Accepted","Lang":"python","Runtime":"79 ms","Memory":"N/A","URL":"/submissions/detail/1729317/","Code":"class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        ans = []\n        for x in xrange(1,n+1):\n            a = ''\n            if not x % 3:\n                a += 'Fizz'\n            if not x % 5:\n                a += 'Buzz'\n            if not a:\n                a = str(x)\n            ans.append(a)\n        return ans\n        ","Timestamp":"1501327305"},"1729423":{"ID":"1729423","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/1729423/","Code":"class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in xrange(1, n+1)]\n        ans = []\n        for x in xrange(1,n+1):\n            a = ''\n            if not x % 3:\n                a += 'Fizz'\n            if not x % 5:\n                a += 'Buzz'\n            if not a:\n                a = str(x)\n            ans.append(a)\n        return ans\n        ","Timestamp":"1501327503"},"4959311":{"ID":"4959311","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/4959311/","Code":"class Solution:\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for x in range(1, n+1):\n            if x % 15 == 0:\n                res.append(\"FizzBuzz\")\n            elif x % 5 == 0:\n                res.append(\"Buzz\")\n            elif x % 3 == 0:\n                res.append(\"Fizz\")\n            else:\n                res.append(str(x))\n            \n            \n        return res","Timestamp":"1533118664"},"7572885":{"ID":"7572885","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7572885/","Code":"class Solution:\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        for x in range(1, n+1):\n            if x % 15 == 0:\n                res.append(\"FizzBuzz\")\n            elif x % 5 == 0:\n                res.append(\"Buzz\")\n            elif x % 3 == 0:\n                res.append(\"Fizz\")\n            else:\n                res.append(str(x))\n            \n            \n        return res\n","Timestamp":"1536218857"}}},{"questionId":"485","questionFrontendId":"485","Title":"Max Consecutive Ones","TitleSlug":"max-consecutive-ones","Content":"\u003cp\u003eGiven a binary array, find the maximum number of consecutive 1s in this array.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,1,0,1,1,1]\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e The first two digits or the last three digits are consecutive 1s.\r\n    The maximum number of consecutive 1s is 3.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe input array will only contain \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eThe length of input array is a positive integer and will not exceed 10,000\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"最大连续1的个数","TranslatedContent":"\u003cp\u003e给定一个二进制数组， 计算其中最大连续1的个数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,1,0,1,1,1]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解释:\u003c/strong\u003e 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e输入的数组只包含\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e 和\u003ccode\u003e1\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e输入数组的长度是正整数，且不超过 10,000。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006788":{"ID":"15006788","StatusDisplay":"Accepted","Lang":"golang","Runtime":"36 ms","Memory":"6.3 MB","URL":"/submissions/detail/15006788/","Code":"func findMaxConsecutiveOnes(nums []int) int {\n\tmax := 0\n\tcount := 0\n\tflag := false\n\n\tfor _, v := range nums {\n\t\tif v == 0 {\n\t\t\tflag = false\n\t\t} else {\n\t\t\tif !flag {\n\t\t\t\tflag = true\n\t\t\t\tcount = 0\n\t\t\t}\n\t\t\tcount += 1\n\t\t\tif count \u003e max {\n\t\t\t\tmax = count\n\t\t\t}\n\t\t}\n\t}\n\n\treturn max\n}\n\n","Timestamp":"1552926396"},"1729205":{"ID":"1729205","StatusDisplay":"Accepted","Lang":"golang","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/1729205/","Code":"func findMaxConsecutiveOnes(nums []int) int {\n\tmax := 0\n\tcount := 0\n\tflag := false\n\n\tfor _, v := range nums {\n\t\tif v == 0 {\n\t\t\tflag = false\n\t\t} else {\n\t\t\tif !flag {\n\t\t\t\tflag = true\n\t\t\t\tcount = 0\n\t\t\t}\n\t\t\tcount += 1\n\t\t\tif count \u003e max {\n\t\t\t\tmax = count\n\t\t\t}\n\t\t}\n\t}\n\n\treturn max\n}\n","Timestamp":"1519627907"},"1729353":{"ID":"1729353","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/1729353/","Code":"class Solution:\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_value = 0\n        count = 0\n        flag = True\n        for x in nums:\n            if x == 0:\n                flag = False\n            else:\n                if not flag:\n                    count = 0\n                count += 1\n                flag = True\n                if count \u003e max_value:\n                    max_value = count\n        return max_value\n","Timestamp":"1519627546"},"1729445":{"ID":"1729445","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/1729445/","Code":"class Solution:\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_value = 0\n        count = 0\n        flag = True\n        for x in nums:\n            if x == 0:\n                flag = False\n            else:\n                if not flag:\n                    count = 0\n                count += 1\n                flag = True\n                if count \u003e max_value:\n                    max_value = count\n        return max_value\n","Timestamp":"1519627528"}}},{"questionId":"442","questionFrontendId":"442","Title":"Find All Duplicates in an Array","TitleSlug":"find-all-duplicates-in-an-array","Content":"\u003cp\u003eGiven an array of integers, 1 \u0026le; a[i] \u0026le; \u003ci\u003en\u003c/i\u003e (\u003ci\u003en\u003c/i\u003e = size of array), some elements appear \u003cb\u003etwice\u003c/b\u003e and others appear \u003cb\u003eonce\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind all the elements that appear \u003cb\u003etwice\u003c/b\u003e in this array.\u003c/p\u003e\r\n\r\n\u003cp\u003eCould you do it without extra space and in O(\u003ci\u003en\u003c/i\u003e) runtime?\u003c/p\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr/\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e\r\n[4,3,2,7,8,2,3,1]\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e\r\n[2,3]\r\n\u003c/pre\u003e","Difficulty":"Medium","TranslatedTitle":"数组中重复的数据","TranslatedContent":"\u003cp\u003e给定一个整数数组 a，其中1 \u0026le; a[i] \u0026le; \u003cem\u003en\u003c/em\u003e （\u003cem\u003en\u003c/em\u003e为数组长度）, 其中有些元素出现\u003cstrong\u003e两次\u003c/strong\u003e而其他元素出现\u003cstrong\u003e一次\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e找到所有出现\u003cstrong\u003e两次\u003c/strong\u003e的元素。\u003c/p\u003e\n\n\u003cp\u003e你可以不用到任何额外空间并在O(\u003cem\u003en\u003c/em\u003e)时间复杂度内解决这个问题吗？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e\n[4,3,2,7,8,2,3,1]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[2,3]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006775":{"ID":"15006775","StatusDisplay":"Accepted","Lang":"python","Runtime":"168 ms","Memory":"16.2 MB","URL":"/submissions/detail/15006775/","Code":"class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 因为 数组中的数字都是正整数\n        # 使用类似于基数排序的方式，通过修改源数据的正负号来进行 Flag 的标识，如果源数据对应的坑已小于零，就说明数据已存在。\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] \u003c 0:\n                res.append(abs(x))\n            else:\n                nums[abs(x)-1] *= -1\n        return res\n\n","Timestamp":"1552926057"},"1729324":{"ID":"1729324","StatusDisplay":"Accepted","Lang":"python","Runtime":"389 ms","Memory":"N/A","URL":"/submissions/detail/1729324/","Code":"class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 因为 数组中的数字都是正整数\n        # 让我们可以使用类似于基数排序的方式，将元数据散列到新的空间上，如果重复出现的值，就添加到结果中 。\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] \u003c 0:\n                res.append(abs(x))\n            else:\n                nums[abs(x)-1] *= -1\n        return res","Timestamp":"1506597094"},"1729337":{"ID":"1729337","StatusDisplay":"Accepted","Lang":"python","Runtime":"275 ms","Memory":"N/A","URL":"/submissions/detail/1729337/","Code":"class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] \u003c 0:\n                res.append(abs(x))\n            else:\n                nums[abs(x)-1] *= -1\n        return res","Timestamp":"1506596758"},"1729387":{"ID":"1729387","StatusDisplay":"Accepted","Lang":"python","Runtime":"329 ms","Memory":"N/A","URL":"/submissions/detail/1729387/","Code":"class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 因为 数组中的数字都是正整数\n        # 使用类似于基数排序的方式，通过修改源数据的正负号来进行 Flag 的标识，如果源数据对应的坑已小于零，就说明数据已存在。\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] \u003c 0:\n                res.append(abs(x))\n            else:\n                nums[abs(x)-1] *= -1\n        return res","Timestamp":"1506597528"},"7572899":{"ID":"7572899","StatusDisplay":"Accepted","Lang":"python","Runtime":"176 ms","Memory":"N/A","URL":"/submissions/detail/7572899/","Code":"class Solution(object):\n    def findDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 因为 数组中的数字都是正整数\n        # 使用类似于基数排序的方式，通过修改源数据的正负号来进行 Flag 的标识，如果源数据对应的坑已小于零，就说明数据已存在。\n        res = []\n        for x in nums:\n            if nums[abs(x)-1] \u003c 0:\n                res.append(abs(x))\n            else:\n                nums[abs(x)-1] *= -1\n        return res\n","Timestamp":"1536218874"}}},{"questionId":"26","questionFrontendId":"26","Title":"Remove Duplicates from Sorted Array","TitleSlug":"remove-duplicates-from-sorted-array","Content":"\u003cp\u003eGiven a sorted array \u003cem\u003enums\u003c/em\u003e, remove the duplicates \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003e\u003cstrong\u003ein-place\u003c/strong\u003e\u003c/a\u003e such that each element appear only \u003cem\u003eonce\u003c/em\u003e and return the new length.\u003c/p\u003e\r\n\r\n\u003cp\u003eDo not allocate extra space for another array, you must do this by \u003cstrong\u003emodifying the input array \u003ca href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"\u003ein-place\u003c/a\u003e\u003c/strong\u003e with O(1) extra memory.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[1,1,2]\u003c/strong\u003e,\r\n\r\nYour function should return length = \u003cstrong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/strong\u003e, with the first two elements of \u003cem\u003e\u003ccode\u003enums\u003c/code\u003e\u003c/em\u003e being \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/strong\u003e respectively.\r\n\r\nIt doesn\u0026#39;t matter what you leave beyond the returned length.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[0,0,1,1,1,2,2,3,3,4]\u003c/strong\u003e,\r\n\r\nYour function should return length = \u003cstrong\u003e\u003ccode\u003e5\u003c/code\u003e\u003c/strong\u003e, with the first five elements of \u003cem\u003e\u003ccode\u003enums\u003c/code\u003e\u003c/em\u003e being modified to\u0026nbsp;\u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/strong\u003e, and\u0026nbsp;\u003cstrong\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/strong\u003e respectively.\r\n\r\nIt doesn\u0026#39;t matter what values are set beyond\u0026nbsp;the returned length.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eClarification:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eConfused why the returned value is an integer but your answer is an array?\u003c/p\u003e\r\n\r\n\u003cp\u003eNote that the input array is passed in by \u003cstrong\u003ereference\u003c/strong\u003e, which means modification to the input array will be known to the caller as well.\u003c/p\u003e\r\n\r\n\u003cp\u003eInternally you can think of this:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n// \u003cstrong\u003enums\u003c/strong\u003e is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to \u003cstrong\u003enums\u003c/strong\u003e in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first \u003cstrong\u003elen\u003c/strong\u003e elements.\r\nfor (int i = 0; i \u0026lt; len; i++) {\r\n\u0026nbsp; \u0026nbsp; print(nums[i]);\r\n}\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"删除排序数组中的重复项","TranslatedContent":"\u003cp\u003e给定一个排序数组，你需要在\u003cstrong\u003e\u003ca href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e\u003c/strong\u003e删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\u003c/p\u003e\n\n\u003cp\u003e不要使用额外的数组空间，你必须在\u003cstrong\u003e\u003ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\"\u003e原地\u003c/a\u003e修改输入数组\u003c/strong\u003e并在使用 O(1) 额外空间的条件下完成。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定数组 \u003cem\u003enums\u003c/em\u003e = \u003cstrong\u003e[1,1,2]\u003c/strong\u003e, \n\n函数应该返回新的长度 \u003cstrong\u003e2\u003c/strong\u003e, 并且原数组 \u003cem\u003enums \u003c/em\u003e的前两个元素被修改为 \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/strong\u003e。 \n\n你不需要考虑数组中超出新长度后面的元素。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定\u003cem\u003e nums \u003c/em\u003e= \u003cstrong\u003e[0,0,1,1,1,2,2,3,3,4]\u003c/strong\u003e,\n\n函数应该返回新的长度 \u003cstrong\u003e5\u003c/strong\u003e, 并且原数组 \u003cem\u003enums \u003c/em\u003e的前五个元素被修改为 \u003cstrong\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/strong\u003e。\n\n你不需要考虑数组中超出新长度后面的元素。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e为什么返回数值是整数，但输出的答案是数组呢?\u003c/p\u003e\n\n\u003cp\u003e请注意，输入数组是以\u003cstrong\u003e\u0026ldquo;引用\u0026rdquo;\u003c/strong\u003e方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\u003c/p\u003e\n\n\u003cp\u003e你可以想象内部操作如下:\u003c/p\u003e\n\n\u003cpre\u003e// \u003cstrong\u003enums\u003c/strong\u003e 是以\u0026ldquo;引用\u0026rdquo;方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中\u003cstrong\u003e该长度范围内\u003c/strong\u003e的所有元素。\nfor (int i = 0; i \u0026lt; len; i++) {\n\u0026nbsp; \u0026nbsp; print(nums[i]);\n}\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006783":{"ID":"15006783","StatusDisplay":"Accepted","Lang":"python","Runtime":"840 ms","Memory":"12.2 MB","URL":"/submissions/detail/15006783/","Code":"class Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        x = nums[0]\n        for n in nums[1:]:\n            if n == x:\n                nums.remove(n)\n            else:\n                x = n\n        return len(nums)\n\n","Timestamp":"1552926295"},"1730771":{"ID":"1730771","StatusDisplay":"Accepted","Lang":"python3","Runtime":"936 ms","Memory":"N/A","URL":"/submissions/detail/1730771/","Code":"class Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        x = nums[0]\n        for n in nums[1:]:\n            if n == x:\n                nums.remove(n)\n            else:\n                x = n\n        return len(nums)","Timestamp":"1524756027"},"7572804":{"ID":"7572804","StatusDisplay":"Accepted","Lang":"python3","Runtime":"832 ms","Memory":"N/A","URL":"/submissions/detail/7572804/","Code":"class Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        x = nums[0]\n        for n in nums[1:]:\n            if n == x:\n                nums.remove(n)\n            else:\n                x = n\n        return len(nums)\n","Timestamp":"1536218693"}}},{"questionId":"899","questionFrontendId":"868","Title":"Binary Gap","TitleSlug":"binary-gap","Content":"\u003cp\u003eGiven a positive\u0026nbsp;integer \u003ccode\u003eN\u003c/code\u003e, find and return the longest distance between two consecutive 1\u0026#39;s in the binary representation of \u003ccode\u003eN\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf there aren\u0026#39;t two consecutive 1\u0026#39;s, return \u003cfont face=\"monospace\"\u003e0\u003c/font\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e22\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e2\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n22 in binary is 0b10110.\r\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1\u0026#39;s.\r\nThe first consecutive pair of 1\u0026#39;s have distance 2.\r\nThe second consecutive pair of 1\u0026#39;s have distance 1.\r\nThe answer is the largest of these two distances, which is 2.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e5\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n5 in binary is 0b101.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e6\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n6 in binary is 0b110.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-4-1\"\u003e8\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\n8 in binary is 0b1000.\r\nThere aren\u0026#39;t any consecutive pairs of 1\u0026#39;s in the binary representation of 8, so we return 0.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= N \u0026lt;= 10^9\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"二进制间距","TranslatedContent":"\u003cp\u003e给定一个正整数\u0026nbsp;\u003ccode\u003eN\u003c/code\u003e，找到并返回 \u003ccode\u003eN\u003c/code\u003e\u0026nbsp;的二进制表示中两个连续的 1 之间的最长距离。\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e如果没有两个连续的 1，返回 \u003ccode\u003e0\u003c/code\u003e 。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cul\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e22\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e\n22 的二进制是 0b10110 。\n在 22 的二进制表示中，有三个 1，组成两对连续的 1 。\n第一对连续的 1 中，两个 1 之间的距离为 2 。\n第二对连续的 1 中，两个 1 之间的距离为 1 。\n答案取两个距离之中最大的，也就是 2 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e5\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e\n5 的二进制是 0b101 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e6\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003e\n6 的二进制是 0b110 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e8\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003cstrong\u003e解释：\u003c/strong\u003e\n8 的二进制是 0b1000 。\n在 8 的二进制表示中没有连续的 1，所以返回 0 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= N \u0026lt;= 10^9\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006898":{"ID":"15006898","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006898/","Code":"class Solution(object):\n    def binaryGap(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        flag = False\n        last_1 = 0\n        for i, x in enumerate(str(bin(N))):\n            if x == '1':\n                if flag:\n                    if i - last_1 \u003e res:\n                        res = i - last_1\n                last_1 = i\n                flag = True\n                \n        return res\n","Timestamp":"1552927585"},"7983034":{"ID":"7983034","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"N/A","URL":"/submissions/detail/7983034/","Code":"class Solution(object):\n    def binaryGap(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        flag = False\n        last_1 = 0\n        for i, x in enumerate(str(bin(N))):\n            if x == '1':\n                if flag:\n                    if i - last_1 \u003e res:\n                        res = i - last_1\n                last_1 = i\n                flag = True\n                \n        return res","Timestamp":"1538985637"}}},{"questionId":"292","questionFrontendId":"292","Title":"Nim Game","TitleSlug":"nim-game","Content":"\u003cp\u003eYou are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\u003c/p\u003e\r\n\r\n\u003cp\u003eBoth of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e4\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false \r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eIf there are 4 stones in the heap, then you will never win the game;\r\n\u0026nbsp;            No matter 1, 2, or 3 stones you remove, the last stone will always be \r\n\u0026nbsp;            removed by your friend.\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"Nim 游戏","TranslatedContent":"\u003cp\u003e你和你的朋友，两个人一起玩\u0026nbsp;\u003ca href=\"https://baike.baidu.com/item/Nim游戏/6737105\" target=\"_blank\"\u003eNim 游戏\u003c/a\u003e：桌子上有一堆石头，每次你们轮流拿掉\u0026nbsp;1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。\u003c/p\u003e\n\n\u003cp\u003e你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u003ccode\u003e4\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e false \n\u003cstrong\u003e解释: \u003c/strong\u003e如果堆中有 4 块石头，那么你永远不会赢得比赛；\n\u0026nbsp;    因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006738":{"ID":"15006738","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006738/","Code":"class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return bool(n\u00263)\n","Timestamp":"1552925761"},"1729341":{"ID":"1729341","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/1729341/","Code":"class Solution(object):\r\n    def canWinNim(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        return bool(n\u00263)","Timestamp":"1472038544"}}},{"questionId":"13","questionFrontendId":"13","Title":"Roman to Integer","TitleSlug":"roman-to-integer","Content":"\u003cp\u003eRoman numerals are represented by seven different symbols:\u0026nbsp;\u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e and \u003ccode\u003eM\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eSymbol\u003c/strong\u003e       \u003cstrong\u003eValue\u003c/strong\u003e\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example,\u0026nbsp;two is written as \u003ccode\u003eII\u003c/code\u003e\u0026nbsp;in Roman numeral, just two one\u0026#39;s added together. Twelve is written as, \u003ccode\u003eXII\u003c/code\u003e, which is simply \u003ccode\u003eX\u003c/code\u003e + \u003ccode\u003eII\u003c/code\u003e. The number twenty seven is written as \u003ccode\u003eXXVII\u003c/code\u003e, which is \u003ccode\u003eXX\u003c/code\u003e + \u003ccode\u003eV\u003c/code\u003e + \u003ccode\u003eII\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \u003ccode\u003eIIII\u003c/code\u003e. Instead, the number four is written as \u003ccode\u003eIV\u003c/code\u003e. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \u003ccode\u003eIX\u003c/code\u003e. There are six instances where subtraction is used:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e can be placed before \u003ccode\u003eV\u003c/code\u003e (5) and \u003ccode\u003eX\u003c/code\u003e (10) to make 4 and 9.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e can be placed before \u003ccode\u003eL\u003c/code\u003e (50) and \u003ccode\u003eC\u003c/code\u003e (100) to make 40 and 90.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e can be placed before \u003ccode\u003eD\u003c/code\u003e (500) and \u003ccode\u003eM\u003c/code\u003e (1000) to make 400 and 900.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eGiven a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;III\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;IV\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;IX\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 9\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;LVIII\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 58\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e L = 50, V= 5, III = 3.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 5:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;MCMXCIV\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1994\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e M = 1000, CM = 900, XC = 90 and IV = 4.\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"罗马数字转整数","TranslatedContent":"\u003cp\u003e罗马数字包含以下七种字符:\u0026nbsp;\u003ccode\u003eI\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e，\u0026nbsp;\u003ccode\u003eL\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e，\u003ccode\u003eD\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eM\u003c/code\u003e。\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e字符\u003c/strong\u003e          \u003cstrong\u003e数值\u003c/strong\u003e\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\u003c/pre\u003e\n\n\u003cp\u003e例如， 罗马数字 2 写做\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;，即为两个并列的 1。12 写做\u0026nbsp;\u003ccode\u003eXII\u003c/code\u003e\u0026nbsp;，即为\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;。 27 写做\u0026nbsp;\u0026nbsp;\u003ccode\u003eXXVII\u003c/code\u003e, 即为\u0026nbsp;\u003ccode\u003eXX\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\u003ccode\u003eII\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做\u0026nbsp;\u003ccode\u003eIIII\u003c/code\u003e，而是\u0026nbsp;\u003ccode\u003eIV\u003c/code\u003e。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为\u0026nbsp;\u003ccode\u003eIX\u003c/code\u003e。这个特殊的规则只适用于以下六种情况：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eV\u003c/code\u003e\u0026nbsp;(5) 和\u0026nbsp;\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;(10) 的左边，来表示 4 和 9。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eL\u003c/code\u003e\u0026nbsp;(50) 和\u0026nbsp;\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;(100) 的左边，来表示 40 和\u0026nbsp;90。\u0026nbsp;\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e\u0026nbsp;可以放在\u0026nbsp;\u003ccode\u003eD\u003c/code\u003e\u0026nbsp;(500) 和\u0026nbsp;\u003ccode\u003eM\u003c/code\u003e\u0026nbsp;(1000) 的左边，来表示\u0026nbsp;400 和\u0026nbsp;900。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e给定一个罗马数字，将其转换成整数。输入确保在 1\u0026nbsp;到 3999 的范围内。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;III\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;IV\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;IX\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 9\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;LVIII\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 58\n\u003cstrong\u003e解释:\u003c/strong\u003e L = 50, V= 5, III = 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;5:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;MCMXCIV\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 1994\n\u003cstrong\u003e解释:\u003c/strong\u003e M = 1000, CM = 900, XC = 90, IV = 4.\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006661":{"ID":"15006661","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006661/","Code":"class Solution:\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \"\"\"\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        \"\"\"\n        m = {\"IV\": 4, \"IX\":9, \"XL\":40 ,\"XC\": 90, \"CD\": 400, \"CM\":900}\n        t = {\"I\":1, \"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n        \n        res = 0\n        while s:\n            if s[:2] in m:\n                res += m[s[:2]]\n                s = s[2:]\n            else:\n                res += t[s[0]]\n                s = s[1:]\n        return res\n        \n","Timestamp":"1552925172"},"7888647":{"ID":"7888647","StatusDisplay":"Accepted","Lang":"python3","Runtime":"196 ms","Memory":"N/A","URL":"/submissions/detail/7888647/","Code":"class Solution:\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \"\"\"\n        I             1\n        V             5\n        X             10\n        L             50\n        C             100\n        D             500\n        M             1000\n        \"\"\"\n        m = {\"IV\": 4, \"IX\":9, \"XL\":40 ,\"XC\": 90, \"CD\": 400, \"CM\":900}\n        t = {\"I\":1, \"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n        \n        res = 0\n        while s:\n            if s[:2] in m:\n                res += m[s[:2]]\n                s = s[2:]\n            else:\n                res += t[s[0]]\n                s = s[1:]\n        return res\n        ","Timestamp":"1538730288"}}},{"questionId":"171","questionFrontendId":"171","Title":"Excel Sheet Column Number","TitleSlug":"excel-sheet-column-number","Content":"\u003cp\u003eGiven a column title as appear in an Excel sheet, return its corresponding column number.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    A -\u0026gt; 1\r\n    B -\u0026gt; 2\r\n    C -\u0026gt; 3\r\n    ...\r\n    Z -\u0026gt; 26\r\n    AA -\u0026gt; 27\r\n    AB -\u0026gt; 28 \r\n    ...\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;A\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u0026quot;AB\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 28\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u0026quot;ZY\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 701\r\n\u003c/pre\u003e","Difficulty":"Easy","TranslatedTitle":"Excel表列序号","TranslatedContent":"\u003cp\u003e给定一个Excel表格中的列名称，返回其相应的列序号。\u003c/p\u003e\n\n\u003cp\u003e例如，\u003c/p\u003e\n\n\u003cpre\u003e    A -\u0026gt; 1\n    B -\u0026gt; 2\n    C -\u0026gt; 3\n    ...\n    Z -\u0026gt; 26\n    AA -\u0026gt; 27\n    AB -\u0026gt; 28 \n    ...\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;A\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;AB\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 28\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;ZY\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 701\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e致谢：\u003c/strong\u003e\u003cbr\u003e\n特别感谢\u0026nbsp;\u003ca href=\"http://leetcode.com/discuss/user/ts\"\u003e@ts\u003c/a\u003e\u0026nbsp;添加此问题并创建所有测试用例。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006683":{"ID":"15006683","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006683/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        \n","Timestamp":"1552925331"},"15797854":{"ID":"15797854","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"13.2 MB","URL":"/submissions/detail/15797854/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        ","Timestamp":"1553792080"},"7970942":{"ID":"7970942","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/7970942/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i, x in enumerate(list(s)):\n            res += (ord(x)-(ord('A')-1))*(26**(len(s)-i-1))\n        return res\n        ","Timestamp":"1538969971"},"7970972":{"ID":"7970972","StatusDisplay":"Accepted","Lang":"python3","Runtime":"80 ms","Memory":"N/A","URL":"/submissions/detail/7970972/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        ","Timestamp":"1538970016"},"7970978":{"ID":"7970978","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/7970978/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        ","Timestamp":"1538970026"},"7970981":{"ID":"7970981","StatusDisplay":"Accepted","Lang":"python3","Runtime":"88 ms","Memory":"N/A","URL":"/submissions/detail/7970981/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        ","Timestamp":"1538970033"},"7970990":{"ID":"7970990","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/7970990/","Code":"class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return sum([(ord(x)-(ord('A')-1))*(26**(len(s)-i-1))  for i, x in enumerate(list(s))])\n        ","Timestamp":"1538970043"}}},{"questionId":"11","questionFrontendId":"11","Title":"Container With Most Water","TitleSlug":"container-with-most-water","Content":"\u003cp\u003eGiven \u003ci\u003en\u003c/i\u003e non-negative integers \u003ci\u003ea\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003ea\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, ..., \u003ci\u003ea\u003csub\u003en\u0026nbsp;\u003c/sub\u003e\u003c/i\u003e, where each represents a point at coordinate (\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e). \u003ci\u003en\u003c/i\u003e vertical lines are drawn such that the two endpoints of line \u003ci\u003ei\u003c/i\u003e is at (\u003ci\u003ei\u003c/i\u003e, \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e) and (\u003ci\u003ei\u003c/i\u003e, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u0026nbsp;\u003c/strong\u003eYou may not slant the container and \u003ci\u003en\u003c/i\u003e is at least 2.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003csmall\u003eThe above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain\u0026nbsp;is 49. \u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,8,6,2,5,4,8,3,7]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 49\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"盛最多水的容器","TranslatedContent":"\u003cp\u003e给定 \u003cem\u003en\u003c/em\u003e 个非负整数 \u003cem\u003ea\u003c/em\u003e\u003csub\u003e1\u003c/sub\u003e，\u003cem\u003ea\u003c/em\u003e\u003csub\u003e2，\u003c/sub\u003e...，\u003cem\u003ea\u003c/em\u003e\u003csub\u003en，\u003c/sub\u003e每个数代表坐标中的一个点\u0026nbsp;(\u003cem\u003ei\u003c/em\u003e,\u0026nbsp;\u003cem\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/em\u003e) 。在坐标内画 \u003cem\u003en\u003c/em\u003e 条垂直线，垂直线 \u003cem\u003ei\u003c/em\u003e\u0026nbsp;的两个端点分别为\u0026nbsp;(\u003cem\u003ei\u003c/em\u003e,\u0026nbsp;\u003cem\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/em\u003e) 和 (\u003cem\u003ei\u003c/em\u003e, 0)。找出其中的两条线，使得它们与\u0026nbsp;\u003cem\u003ex\u003c/em\u003e\u0026nbsp;轴共同构成的容器可以容纳最多的水。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e你不能倾斜容器，且\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;的值至少为 2。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"height: 287px; width: 600px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为\u0026nbsp;49。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,8,6,2,5,4,8,3,7]\n\u003cstrong\u003e输出:\u003c/strong\u003e 49\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11169171":{"ID":"11169171","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"8 MB","URL":"/submissions/detail/11169171/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            s = min(height[i], height[j]) * (j - i)\n            if s \u003e m:\n                m = s\n            if height[i] \u003e height[j]:\n                j -= 1\n            else:\n                i += 1\n        return m\n        ","Timestamp":"1546496634"},"11169184":{"ID":"11169184","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"8 MB","URL":"/submissions/detail/11169184/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            s = min(height[i], height[j]) * (j - i)\n            if s \u003e m:\n                m = s\n            if height[i] \u003e height[j]:\n                j -= 1\n            else:\n                i += 1\n        return m\n        ","Timestamp":"1546496646"},"11169189":{"ID":"11169189","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"8 MB","URL":"/submissions/detail/11169189/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            s = min(height[i], height[j]) * (j - i)\n            if s \u003e m:\n                m = s\n            if height[i] \u003e height[j]:\n                j -= 1\n            else:\n                i += 1\n        return m\n        ","Timestamp":"1546496655"},"11169333":{"ID":"11169333","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"7.9 MB","URL":"/submissions/detail/11169333/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            h = min(height[i], height[j])\n            s = h * (j - i)\n            if s \u003e m:\n                m = s\n            while height[i] \u003c= h and i \u003c j:\n                i += 1\n            while height[j] \u003c= h and i \u003c j:\n                j -= 1\n        return m\n        ","Timestamp":"1546496820"},"11169337":{"ID":"11169337","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"7.9 MB","URL":"/submissions/detail/11169337/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            h = min(height[i], height[j])\n            s = h * (j - i)\n            if s \u003e m:\n                m = s\n            while height[i] \u003c= h and i \u003c j:\n                i += 1\n            while height[j] \u003c= h and i \u003c j:\n                j -= 1\n        return m\n        ","Timestamp":"1546496825"},"11345683":{"ID":"11345683","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"7.9 MB","URL":"/submissions/detail/11345683/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            h = min(height[i], height[j])\n            s = h * (j - i)\n            if s \u003e m:\n                m = s\n            while height[i] \u003c= h and i \u003c j:\n                i += 1\n            while height[j] \u003c= h and i \u003c j:\n                j -= 1\n        return m\n        ","Timestamp":"1546856407"},"11345687":{"ID":"11345687","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"7.9 MB","URL":"/submissions/detail/11345687/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            h = min(height[i], height[j])\n            s = h * (j - i)\n            if s \u003e m:\n                m = s\n            while height[i] \u003c= h and i \u003c j:\n                i += 1\n            while height[j] \u003c= h and i \u003c j:\n                j -= 1\n        return m\n        ","Timestamp":"1546856413"},"15006646":{"ID":"15006646","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006646/","Code":"class Solution:\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        j = len(height) - 1\n        m = 0\n        while i \u003c j:\n            h = min(height[i], height[j])\n            s = h * (j - i)\n            if s \u003e m:\n                m = s\n            while height[i] \u003c= h and i \u003c j:\n                i += 1\n            while height[j] \u003c= h and i \u003c j:\n                j -= 1\n        return m\n        \n","Timestamp":"1552925024"}}},{"questionId":"513","questionFrontendId":"513","Title":"Find Bottom Left Tree Value","TitleSlug":"find-bottom-left-tree-value","Content":"\u003cp\u003e\r\nGiven a binary tree, find the leftmost value in the last row of the tree. \r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\nInput:\r\n\r\n    2\r\n   / \\\r\n  1   3\r\n\r\nOutput:\r\n1\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e \u003cb\u003e Example 2: \u003c/b\u003e\u003cbr\u003e\r\n\u003cpre\u003e\r\nInput:\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   5   6\r\n       /\r\n      7\r\n\r\nOutput:\r\n7\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\nYou may assume the tree (i.e., the given root node) is not \u003cb\u003eNULL\u003c/b\u003e.\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"找树左下角的值","TranslatedContent":"\u003cp\u003e给定一个二叉树，在树的最后一行找到最左边的值。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e\n\n    2\n   / \\\n  1   3\n\n\u003cstrong\u003e输出:\u003c/strong\u003e\n1\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n\u003cstrong\u003e输出:\u003c/strong\u003e\n7\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e 您可以假设树（即给定的根节点）不为 \u003cstrong\u003eNULL\u003c/strong\u003e。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006795":{"ID":"15006795","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"15.7 MB","URL":"/submissions/detail/15006795/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        queue = [root]\n        for node in queue:\n            queue += filter(None, (node.right, node.left))\n        return node.val\n        \n","Timestamp":"1552926453"},"1729230":{"ID":"1729230","StatusDisplay":"Accepted","Lang":"python","Runtime":"69 ms","Memory":"N/A","URL":"/submissions/detail/1729230/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        queue = [root]\n        for node in queue:\n            queue += filter(None, (node.right, node.left))\n        return node.val\n        ","Timestamp":"1501398190"},"1729257":{"ID":"1729257","StatusDisplay":"Accepted","Lang":"python","Runtime":"59 ms","Memory":"N/A","URL":"/submissions/detail/1729257/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        queue = [root]\n        for node in queue:\n            queue += filter(None, (node.right, node.left))\n        return node.val\n        ","Timestamp":"1501398210"},"1729304":{"ID":"1729304","StatusDisplay":"Accepted","Lang":"python","Runtime":"86 ms","Memory":"N/A","URL":"/submissions/detail/1729304/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        info = []\n        def dfs(node, depth=0):\n            if node is None:\n                return\n            if len(info) \u003c= depth:\n                info.append(None)\n            if info[depth] is None:\n                info[depth] = node.val\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n            \n        dfs(root)\n        print info\n        for x in info[::-1]:\n            if x is not None:\n                return x\n        ","Timestamp":"1501388792"},"1729481":{"ID":"1729481","StatusDisplay":"Accepted","Lang":"python","Runtime":"95 ms","Memory":"N/A","URL":"/submissions/detail/1729481/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        info = []\n        def dfs(node, depth=0):\n            if node is None:\n                return\n            if len(info) \u003c= depth:\n                info.append(None)\n            if info[depth] is None:\n                info[depth] = node.val\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n            \n        dfs(root)\n        for x in info[::-1]:\n            if x is not None:\n                return x\n        ","Timestamp":"1501388818"},"1729488":{"ID":"1729488","StatusDisplay":"Accepted","Lang":"python","Runtime":"82 ms","Memory":"N/A","URL":"/submissions/detail/1729488/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        info = []\n        def dfs(node, depth=0):\n            if node is None:\n                return\n            if len(info) \u003c= depth:\n                info.append(None)\n            if info[depth] is None:\n                info[depth] = node.val\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n            \n        dfs(root)\n        for x in info[::-1]:\n            if x is not None:\n                return x\n        ","Timestamp":"1501388839"}}},{"questionId":"178","questionFrontendId":"178","Title":"Rank Scores","TitleSlug":"rank-scores","Content":"\u003cp\u003eWrite a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no \u0026quot;holes\u0026quot; between ranks.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+-------+\r\n| Id | Score |\r\n+----+-------+\r\n| 1  | 3.50  |\r\n| 2  | 3.65  |\r\n| 3  | 4.00  |\r\n| 4  | 3.85  |\r\n| 5  | 4.00  |\r\n| 6  | 3.65  |\r\n+----+-------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, given the above \u003ccode\u003eScores\u003c/code\u003e table, your query should generate the following report (order by highest score):\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+-------+------+\r\n| Score | Rank |\r\n+-------+------+\r\n| 4.00  | 1    |\r\n| 4.00  | 1    |\r\n| 3.85  | 2    |\r\n|\u0026nbsp;3.65  | 3    |\r\n| 3.65  | 3    |\r\n| 3.50  | 4    |\r\n+-------+------+\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"分数排名","TranslatedContent":"\u003cp\u003e编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有\u0026ldquo;间隔\u0026rdquo;。\u003c/p\u003e\n\n\u003cpre\u003e+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n\u003c/pre\u003e\n\n\u003cp\u003e例如，根据上述给定的\u0026nbsp;\u003ccode\u003eScores\u003c/code\u003e 表，你的查询应该返回（按分数从高到低排列）：\u003c/p\u003e\n\n\u003cpre\u003e+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n|\u0026nbsp;3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17556058":{"ID":"17556058","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"284 ms","Memory":"N/A","URL":"/submissions/detail/17556058/","Code":"# Write your MySQL query statement below\n\nselect s.Score as Score, sr.rank as Rank \nfrom scores as s\nleft join\n(select score, (@row_number:=@row_number+1) as rank from (select distinct(score) as score\n     from scores order by score desc) as ss, (SELECT @row_number:=0) as t) as sr \non s.score = sr.score \norder by Rank\n","Timestamp":"1556005641"},"17842065":{"ID":"17842065","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"390 ms","Memory":"N/A","URL":"/submissions/detail/17842065/","Code":"# Write your MySQL query statement below\n\nselect s.Score as Score, sr.rank as Rank \nfrom scores as s\nleft join\n(select score, (@row_number:=@row_number+1) as rank from (select distinct(score) as score\n     from scores order by score desc) as ss, (SELECT @row_number:=0) as t) as sr \non s.score = sr.score \norder by Rank","Timestamp":"1556416790"},"17842251":{"ID":"17842251","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"355 ms","Memory":"N/A","URL":"/submissions/detail/17842251/","Code":"select s.Score as Score, sr.rank as `Rank`\nfrom Scores as s\n  left join\n  (\n    select score, (@`row_number`:=@`row_number`+1) as `rank`\n    from (select distinct(score) as score from Scores order by score desc) as ss,\n         (SELECT @row_number:=0) as t\n  ) as sr\non s.score = sr.score\norder by 2;","Timestamp":"1556417046"},"17842275":{"ID":"17842275","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"308 ms","Memory":"N/A","URL":"/submissions/detail/17842275/","Code":"# Write your MySQL query statement below\n\nselect s.Score as Score, sr.rank as Rank \nfrom scores as s\nleft join\n(select score, (@row_number:=@row_number+1) as rank from (select distinct(score) as score\n     from scores order by score desc) as ss, (SELECT @row_number:=0) as t) as sr \non s.score = sr.score \norder by Rank","Timestamp":"1556417069"}}},{"questionId":"669","questionFrontendId":"669","Title":"Trim a Binary Search Tree","TitleSlug":"trim-a-binary-search-tree","Content":"\u003cp\u003e\r\nGiven a binary search tree and the lowest and highest boundaries as \u003ccode\u003eL\u003c/code\u003e and \u003ccode\u003eR\u003c/code\u003e, trim the tree so that all its elements lies in \u003ccode\u003e[L, R]\u003c/code\u003e (R \u003e= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\n    1\r\n   / \\\r\n  0   2\r\n\r\n  L = 1\r\n  R = 2\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e \r\n    1\r\n      \\\r\n       2\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\n    3\r\n   / \\\r\n  0   4\r\n   \\\r\n    2\r\n   /\r\n  1\r\n\r\n  L = 1\r\n  R = 3\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e \r\n      3\r\n     / \r\n   2   \r\n  /\r\n 1\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"修剪二叉搜索树","TranslatedContent":"\u003cp\u003e给定一个二叉搜索树，同时给定最小边界\u003ccode\u003eL\u003c/code\u003e\u0026nbsp;和最大边界\u0026nbsp;\u003ccode\u003eR\u003c/code\u003e。通过修剪二叉搜索树，使得所有节点的值在\u003ccode\u003e[L, R]\u003c/code\u003e中 (R\u0026gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n    1\n   / \\\n  0   2\n\n  L = 1\n  R = 2\n\n\u003cstrong\u003e输出:\u003c/strong\u003e \n    1\n      \\\n       2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \n    3\n   / \\\n  0   4\n   \\\n    2\n   /\n  1\n\n  L = 1\n  R = 3\n\n\u003cstrong\u003e输出:\u003c/strong\u003e \n      3\n     / \n   2   \n  /\n 1\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006837":{"ID":"15006837","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"18.7 MB","URL":"/submissions/detail/15006837/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def trimBST(self, root, L, R):\n        \"\"\"\n        :type root: TreeNode\n        :type L: int\n        :type R: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return\n        if root.val \u003c L:\n            return self.trimBST(root.right,L,R)\n        elif root.val \u003e R:\n            return self.trimBST(root.left,L,R)\n        else:\n            root.right = self.trimBST(root.right,L,R)\n            root.left = self.trimBST(root.left,L,R)\n        return root\n","Timestamp":"1552927043"},"1729224":{"ID":"1729224","StatusDisplay":"Accepted","Lang":"python","Runtime":"99 ms","Memory":"N/A","URL":"/submissions/detail/1729224/","Code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def trimBST(self, root, L, R):\n        \"\"\"\n        :type root: TreeNode\n        :type L: int\n        :type R: int\n        :rtype: TreeNode\n        \"\"\"\n        if not root:\n            return\n        if root.val \u003c L:\n            return self.trimBST(root.right,L,R)\n        elif root.val \u003e R:\n            return self.trimBST(root.left,L,R)\n        else:\n            root.right = self.trimBST(root.right,L,R)\n            root.left = self.trimBST(root.left,L,R)\n        return root","Timestamp":"1506589555"}}},{"questionId":"94","questionFrontendId":"94","Title":"Binary Tree Inorder Traversal","TitleSlug":"binary-tree-inorder-traversal","Content":"\u003cp\u003eGiven a binary tree, return the \u003cem\u003einorder\u003c/em\u003e traversal of its nodes\u0026#39; values.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,null,2,3]\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [1,3,2]\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Recursive solution is trivial, could you do it iteratively?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"二叉树的中序遍历","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回它的\u003cem\u003e中序\u0026nbsp;\u003c/em\u003e遍历。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n\u003cstrong\u003e输出:\u003c/strong\u003e [1,3,2]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u0026nbsp;递归算法很简单，你可以通过迭代算法完成吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006926":{"ID":"15006926","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006926/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        def inner(node):\n            if node:\n                inner(node.left)\n                res.append(node.val)\n                inner(node.right)\n        inner(root)\n        return res\n","Timestamp":"1552927788"},"7916864":{"ID":"7916864","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7916864/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        def inner(node):\n            if node:\n                inner(node.left)\n                res.append(node.val)\n                inner(node.right)\n        inner(root)\n        return res","Timestamp":"1538818375"}}},{"questionId":"1","questionFrontendId":"1","Title":"Two Sum","TitleSlug":"two-sum","Content":"\u003cp\u003eGiven an array of integers, return \u003cstrong\u003eindices\u003c/strong\u003e of the two numbers such that they add up to a specific target.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may assume that each input would have \u003cstrong\u003e\u003cem\u003eexactly\u003c/em\u003e\u003c/strong\u003e one solution, and you may not use the \u003cem\u003esame\u003c/em\u003e element twice.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[\u003cstrong\u003e0\u003c/strong\u003e] + nums[\u003cstrong\u003e1\u003c/strong\u003e] = 2 + 7 = 9,\r\nreturn [\u003cstrong\u003e0\u003c/strong\u003e, \u003cstrong\u003e1\u003c/strong\u003e].\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两数之和","TranslatedContent":"\u003cp\u003e给定一个整数数组 \u003ccode\u003enums\u003c/code\u003e\u0026nbsp;和一个目标值 \u003ccode\u003etarget\u003c/code\u003e，请你在该数组中找出和为目标值的那\u0026nbsp;\u003cstrong\u003e两个\u003c/strong\u003e\u0026nbsp;整数，并返回他们的数组下标。\u003c/p\u003e\n\n\u003cp\u003e你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[\u003cstrong\u003e0\u003c/strong\u003e] + nums[\u003cstrong\u003e1\u003c/strong\u003e] = 2 + 7 = 9\n所以返回 [\u003cstrong\u003e0, 1\u003c/strong\u003e]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11341620":{"ID":"11341620","StatusDisplay":"Accepted","Lang":"python3","Runtime":"6284 ms","Memory":"7.2 MB","URL":"/submissions/detail/11341620/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for x in range(len(nums)):\n            for y in range(x+1 ,len(nums)):\n                if nums[x] + nums[y] ==  target:\n                    return [x, y]","Timestamp":"1546851831"},"11342037":{"ID":"11342037","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"7.9 MB","URL":"/submissions/detail/11342037/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i","Timestamp":"1546852137"},"15004112":{"ID":"15004112","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.5 MB","URL":"/submissions/detail/15004112/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i\n","Timestamp":"1552924327"},"15004163":{"ID":"15004163","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.8 MB","URL":"/submissions/detail/15004163/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i\n","Timestamp":"1552924376"},"15004297":{"ID":"15004297","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.9 MB","URL":"/submissions/detail/15004297/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i\n","Timestamp":"1552924494"},"15004354":{"ID":"15004354","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11.7 MB","URL":"/submissions/detail/15004354/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i\n","Timestamp":"1552924556"},"15006631":{"ID":"15006631","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"11.9 MB","URL":"/submissions/detail/15006631/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        data = {}\n        for i, x in enumerate(nums):\n            if target - x in data:\n                return [data[target-x], i]\n            data[x] = i\n","Timestamp":"1552924888"},"1729184":{"ID":"1729184","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1092 ms","Memory":"N/A","URL":"/submissions/detail/1729184/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for i,x in enumerate(nums):\n            if target - x in nums:\n                i2 = nums.index(target - x)\n                if  i2 != i:\n                    return [i,i2]\n        \n","Timestamp":"1519617368"},"1729285":{"ID":"1729285","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1132 ms","Memory":"N/A","URL":"/submissions/detail/1729285/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for i,x in enumerate(nums):\n            if target - x in nums:\n                i2 = nums.index(target - x)\n                if  i2 != i:\n                    return [i,i2]\n        \n","Timestamp":"1519617453"},"1729358":{"ID":"1729358","StatusDisplay":"Accepted","Lang":"python","Runtime":"5000 ms","Memory":"N/A","URL":"/submissions/detail/1729358/","Code":"class Solution(object):\r\n    def twoSum(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        for i,a in enumerate(nums):\r\n            for j,b in enumerate(nums[i+1:]):\r\n                if target== a+b:\r\n                    return [i,j+i+1]","Timestamp":"1472086651"},"1729374":{"ID":"1729374","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1805 ms","Memory":"N/A","URL":"/submissions/detail/1729374/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for i,x in enumerate(nums):\n            if target - x in nums:\n                i2 = nums.index(target - x)\n                if  i2 != i:\n                    return [i,i2]\n        ","Timestamp":"1509177478"},"1729409":{"ID":"1729409","StatusDisplay":"Accepted","Lang":"python","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/1729409/","Code":"class Solution(object):\r\n    def twoSum(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        cache = {}\r\n        for i, val in enumerate(nums):\r\n            if val in cache:\r\n                return [cache[val], i]\r\n            else:\r\n                cache[target-val] = i","Timestamp":"1472087412"},"1729451":{"ID":"1729451","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/1729451/","Code":"class Solution(object):\r\n    def twoSum(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        cache = {}\r\n        for i, val in enumerate(nums):\r\n            if val in cache:\r\n                return [cache[val], i]\r\n            else:\r\n                cache[target-val] = i","Timestamp":"1472087366"},"7572712":{"ID":"7572712","StatusDisplay":"Accepted","Lang":"python3","Runtime":"1692 ms","Memory":"N/A","URL":"/submissions/detail/7572712/","Code":"class Solution:\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        for i,x in enumerate(nums):\n            if target - x in nums:\n                i2 = nums.index(target - x)\n                if  i2 != i:\n                    return [i,i2]\n        \n\n","Timestamp":"1536218500"}}},{"questionId":"37","questionFrontendId":"37","Title":"Sudoku Solver","TitleSlug":"sudoku-solver","Content":"\u003cp\u003eWrite a program to solve a Sudoku puzzle by filling the empty cells.\u003c/p\u003e\r\n\r\n\u003cp\u003eA\u0026nbsp;sudoku solution must satisfy \u003cstrong\u003eall of\u0026nbsp;the following rules\u003c/strong\u003e:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eEach of the digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e must occur exactly\u0026nbsp;once in each row.\u003c/li\u003e\r\n\t\u003cli\u003eEach of the digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;must occur\u0026nbsp;exactly once in each column.\u003c/li\u003e\r\n\t\u003cli\u003eEach of the the digits\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e must occur exactly once in each of the 9 \u003ccode\u003e3x3\u003c/code\u003e sub-boxes of the grid.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003eEmpty cells are indicated by the character \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003eA sudoku puzzle...\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003e...and its solution numbers marked in red.\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe given board\u0026nbsp;contain only digits \u003ccode\u003e1-9\u003c/code\u003e and the character \u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume that the given Sudoku puzzle will have a single unique solution.\u003c/li\u003e\r\n\t\u003cli\u003eThe given board size is always \u003ccode\u003e9x9\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Hard","TranslatedTitle":"解数独","TranslatedContent":"\u003cp\u003e编写一个程序，通过已填充的空格来解决数独问题。\u003c/p\u003e\n\n\u003cp\u003e一个数独的解法需\u003cstrong\u003e遵循如下规则\u003c/strong\u003e：\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一行只能出现一次。\u003c/li\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一列只能出现一次。\u003c/li\u003e\n\t\u003cli\u003e数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;在每一个以粗实线分隔的\u0026nbsp;\u003ccode\u003e3x3\u003c/code\u003e\u0026nbsp;宫内只能出现一次。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e空白格用\u0026nbsp;\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e\u0026nbsp;表示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e一个数独。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e答案被标成红色。\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给定的数独序列只包含数字\u0026nbsp;\u003ccode\u003e1-9\u003c/code\u003e\u0026nbsp;和字符\u0026nbsp;\u003ccode\u003e\u0026#39;.\u0026#39;\u003c/code\u003e\u0026nbsp;。\u003c/li\u003e\n\t\u003cli\u003e你可以假设给定的数独只有唯一解。\u003c/li\u003e\n\t\u003cli\u003e给定数独永远是\u0026nbsp;\u003ccode\u003e9x9\u003c/code\u003e\u0026nbsp;形式的。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15772458":{"ID":"15772458","StatusDisplay":"Accepted","Lang":"python3","Runtime":"152 ms","Memory":"13.2 MB","URL":"/submissions/detail/15772458/","Code":"class Solution:\n    def solveSudoku(self, board: List[List[str]]) -\u003e None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        rows = [[True for _ in range(9)] for _ in range(9)]\n        cols = [[True for _ in range(9)] for _ in range(9)]\n        boxs = [[True for _ in range(9)] for _ in range(9)]\n        \n        for x in range(9):\n            for y in range(9):\n                t = board[x][y]\n                if t == '.':\n                    continue\n                t = int(t) - 1\n                rows[x][t] = False\n                cols[y][t] = False\n                bid = x//3 + (y//3)*3\n                boxs[bid][t] = False\n                \n        self.dfs(board, rows, cols, boxs)\n        \n    def dfs(self, board, rows, cols, boxs, x=0, y=0):\n        while board[x][y] != '.':\n            x += 1\n            if x \u003e 8:\n                x = 0\n                y += 1\n            if y \u003e 8:\n                return True\n        \n        for k in range(9):\n            bid = x//3 + (y//3)*3\n            if rows[x][k] and cols[y][k] and boxs[bid][k]:\n                board[x][y] = str(k+1)\n                rows[x][k] = False\n                cols[y][k] = False\n                boxs[bid][k] = False\n                if self.dfs(board, rows, cols, boxs, x, y):\n                    return True\n                else:\n                    board[x][y] = '.'\n                    rows[x][k] = True\n                    cols[y][k] = True\n                    boxs[bid][k] = True\n                    \n        return False","Timestamp":"1553773306"}}},{"questionId":"290","questionFrontendId":"290","Title":"Word Pattern","TitleSlug":"word-pattern","Content":"\u003cp\u003eGiven a \u003ccode\u003epattern\u003c/code\u003e and a string \u003ccode\u003estr\u003c/code\u003e, find if \u003ccode\u003estr\u003c/code\u003e follows the same pattern.\u003c/p\u003e\r\n\r\n\u003cp\u003eHere \u003cb\u003efollow\u003c/b\u003e means a full match, such that there is a bijection between a letter in \u003ccode\u003epattern\u003c/code\u003e and a \u003cb\u003enon-empty\u003c/b\u003e word in \u003ccode\u003estr\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat dog\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003epattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat fish\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;aaaa\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat dog\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog dog dog dog\u0026quot;\u003c/code\u003e\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNotes:\u003c/b\u003e\u003cbr /\u003e\r\nYou may assume \u003ccode\u003epattern\u003c/code\u003e contains only lowercase letters, and \u003ccode\u003estr\u003c/code\u003e contains lowercase letters that may be separated by a single space.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"单词模式","TranslatedContent":"\u003cp\u003e给定一种 \u003ccode\u003epattern(模式)\u003c/code\u003e\u0026nbsp;和一个字符串\u0026nbsp;\u003ccode\u003estr\u003c/code\u003e\u0026nbsp;，判断 \u003ccode\u003estr\u003c/code\u003e 是否遵循相同的模式。\u003c/p\u003e\n\n\u003cp\u003e这里的\u003cstrong\u003e遵循\u003c/strong\u003e指完全匹配，例如，\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e\u0026nbsp;里的每个字母和字符串\u0026nbsp;\u003ccode\u003estr\u003c/code\u003e\u003cstrong\u003e\u0026nbsp;\u003c/strong\u003e中的每个非空单词之间存在着双向连接的对应模式。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat dog\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003epattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat fish\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;aaaa\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog cat cat dog\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;4:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e pattern = \u003ccode\u003e\u0026quot;abba\u0026quot;\u003c/code\u003e, str = \u003ccode\u003e\u0026quot;dog dog dog dog\u0026quot;\u003c/code\u003e\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003cbr\u003e\n你可以假设\u0026nbsp;\u003ccode\u003epattern\u003c/code\u003e\u0026nbsp;只包含小写字母，\u0026nbsp;\u003ccode\u003estr\u003c/code\u003e\u0026nbsp;包含了由单个空格分隔的小写字母。\u0026nbsp; \u0026nbsp;\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15773962":{"ID":"15773962","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"13 MB","URL":"/submissions/detail/15773962/","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        d = {}\n        rd = {}\n        \n        for a, b in zip(pattern, words):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774414"},"15774051":{"ID":"15774051","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"13.1 MB","URL":"/submissions/detail/15774051/","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        d = {}\n        rd = {}\n        \n        for a, b in zip(pattern, words):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774466"},"15774061":{"ID":"15774061","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"13 MB","URL":"/submissions/detail/15774061/","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        d = {}\n        rd = {}\n        \n        for a, b in zip(pattern, words):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774473"},"15774081":{"ID":"15774081","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13 MB","URL":"/submissions/detail/15774081/","Code":"class Solution:\n    def wordPattern(self, pattern: str, s: str) -\u003e bool:\n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        d = {}\n        rd = {}\n        \n        for a, b in zip(pattern, words):\n            if a not in d:\n                d[a] = b\n            if b not in rd:\n                rd[b] = a\n            if d[a] != b or rd[b] != a:\n                return False\n            \n        return True","Timestamp":"1553774483"}}},{"questionId":"176","questionFrontendId":"176","Title":"Second Highest Salary","TitleSlug":"second-highest-salary","Content":"\u003cp\u003eWrite a SQL query to get the second highest salary from the \u003ccode\u003eEmployee\u003c/code\u003e table.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, given the above Employee table, the query should return \u003ccode\u003e200\u003c/code\u003e as the second highest salary. If there is no second highest salary, then the query should return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------------------+\r\n| SecondHighestSalary |\r\n+---------------------+\r\n| 200                 |\r\n+---------------------+\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"第二高的薪水","TranslatedContent":"\u003cp\u003e编写一个 SQL 查询，获取 \u003ccode\u003eEmployee\u003c/code\u003e\u0026nbsp;表中第二高的薪水（Salary）\u0026nbsp;。\u003c/p\u003e\n\n\u003cpre\u003e+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n\u003c/pre\u003e\n\n\u003cp\u003e例如上述\u0026nbsp;\u003ccode\u003eEmployee\u003c/code\u003e\u0026nbsp;表，SQL查询应该返回\u0026nbsp;\u003ccode\u003e200\u003c/code\u003e 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 \u003ccode\u003enull\u003c/code\u003e。\u003c/p\u003e\n\n\u003cpre\u003e+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17816635":{"ID":"17816635","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"248 ms","Memory":"N/A","URL":"/submissions/detail/17816635/","Code":"# Write your MySQL query statement below\nselect IFNULL(\n    (select distinct Salary\n     from Employee \n     order by Salary desc \n     limit 1,1), NULL) \n     as SecondHighestSalary\n","Timestamp":"1556361914"}}},{"questionId":"144","questionFrontendId":"144","Title":"Binary Tree Preorder Traversal","TitleSlug":"binary-tree-preorder-traversal","Content":"\u003cp\u003eGiven a binary tree, return the \u003cem\u003epreorder\u003c/em\u003e traversal of its nodes\u0026#39; values.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[1,null,2,3]\u003c/code\u003e\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[1,2,3]\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Recursive solution is trivial, could you do it iteratively?\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"二叉树的前序遍历","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回它的\u0026nbsp;\u003cem\u003e前序\u0026nbsp;\u003c/em\u003e遍历。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n\u003cstrong\u003e输出:\u003c/strong\u003e [1,2,3]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u0026nbsp;递归算法很简单，你可以通过迭代算法完成吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11123698":{"ID":"11123698","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11123698/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)\n        ","Timestamp":"1546399748"},"15006670":{"ID":"15006670","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006670/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)\n        \n","Timestamp":"1552925249"}}},{"questionId":"139","questionFrontendId":"139","Title":"Word Break","TitleSlug":"word-break","Content":"\u003cp\u003eGiven a \u003cstrong\u003enon-empty\u003c/strong\u003e string \u003cem\u003es\u003c/em\u003e and a dictionary \u003cem\u003ewordDict\u003c/em\u003e containing a list of \u003cstrong\u003enon-empty\u003c/strong\u003e words, determine if \u003cem\u003es\u003c/em\u003e can be segmented into a space-separated sequence of one or more dictionary words.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe same word in the dictionary may be reused multiple times in the segmentation.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume the dictionary does not contain duplicate words.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;leetcode\u0026quot;, wordDict = [\u0026quot;leet\u0026quot;, \u0026quot;code\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Return true because \u003ccode\u003e\u0026quot;leetcode\u0026quot;\u003c/code\u003e can be segmented as \u003ccode\u003e\u0026quot;leet code\u0026quot;\u003c/code\u003e.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;applepenapple\u0026quot;, wordDict = [\u0026quot;apple\u0026quot;, \u0026quot;pen\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Return true because \u003ccode\u003e\u0026quot;\u003c/code\u003eapplepenapple\u003ccode\u003e\u0026quot;\u003c/code\u003e can be segmented as \u003ccode\u003e\u0026quot;\u003c/code\u003eapple pen apple\u003ccode\u003e\u0026quot;\u003c/code\u003e.\r\n\u0026nbsp;            Note that you are allowed to reuse a dictionary word.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026quot;catsandog\u0026quot;, wordDict = [\u0026quot;cats\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;sand\u0026quot;, \u0026quot;and\u0026quot;, \u0026quot;cat\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"单词拆分","TranslatedContent":"\u003cp\u003e给定一个\u003cstrong\u003e非空\u003c/strong\u003e字符串 \u003cem\u003es\u003c/em\u003e 和一个包含\u003cstrong\u003e非空\u003c/strong\u003e单词列表的字典 \u003cem\u003ewordDict\u003c/em\u003e，判定\u0026nbsp;\u003cem\u003es\u003c/em\u003e 是否可以被空格拆分为一个或多个在字典中出现的单词。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e拆分时可以重复使用字典中的单词。\u003c/li\u003e\n\t\u003cli\u003e你可以假设字典中没有重复的单词。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e s = \u0026quot;leetcode\u0026quot;, wordDict = [\u0026quot;leet\u0026quot;, \u0026quot;code\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释:\u003c/strong\u003e 返回 true 因为 \u0026quot;leetcode\u0026quot; 可以被拆分成 \u0026quot;leet code\u0026quot;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e s = \u0026quot;applepenapple\u0026quot;, wordDict = [\u0026quot;apple\u0026quot;, \u0026quot;pen\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释:\u003c/strong\u003e 返回 true 因为 \u003ccode\u003e\u0026quot;\u003c/code\u003eapplepenapple\u003ccode\u003e\u0026quot;\u003c/code\u003e 可以被拆分成 \u003ccode\u003e\u0026quot;\u003c/code\u003eapple pen apple\u003ccode\u003e\u0026quot;\u003c/code\u003e。\n\u0026nbsp;    注意你可以重复使用字典中的单词。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e s = \u0026quot;catsandog\u0026quot;, wordDict = [\u0026quot;cats\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;sand\u0026quot;, \u0026quot;and\u0026quot;, \u0026quot;cat\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15797916":{"ID":"15797916","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"11.8 MB","URL":"/submissions/detail/15797916/","Code":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        breakp = [0]\n        \n        for i in range(len(s) + 1):\n            for j in breakp:\n                if s[j:i] in wordDict:\n                    breakp.append(i)\n                    break\n        return breakp[-1] == len(s)","Timestamp":"1553792268"},"15848224":{"ID":"15848224","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"12.1 MB","URL":"/submissions/detail/15848224/","Code":"class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        breakp = [0]\n        \n        for i in range(len(s) + 1):\n            for j in breakp:\n                if s[j:i] in wordDict:\n                    breakp.append(i)\n                    break\n        return breakp[-1] == len(s)","Timestamp":"1553859299"}}},{"questionId":"1078","questionFrontendId":"1021","Title":"Remove Outermost Parentheses","TitleSlug":"remove-outermost-parentheses","Content":"\u003cp\u003eA valid parentheses string is either empty \u003ccode\u003e(\u0026quot;\u0026quot;)\u003c/code\u003e, \u003ccode\u003e\u0026quot;(\u0026quot; + A + \u0026quot;)\u0026quot;\u003c/code\u003e, or \u003ccode\u003eA + B\u003c/code\u003e, where \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e are valid parentheses strings, and \u003ccode\u003e+\u003c/code\u003e represents string concatenation.\u0026nbsp; For example, \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;()\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;(())()\u0026quot;\u003c/code\u003e, and \u003ccode\u003e\u0026quot;(()(()))\u0026quot;\u003c/code\u003e are all valid parentheses strings.\u003c/p\u003e\r\n\r\n\u003cp\u003eA valid parentheses string \u003ccode\u003eS\u003c/code\u003e is \u003cstrong\u003eprimitive\u003c/strong\u003e if it is nonempty, and there does not exist a way to split it into \u003ccode\u003eS = A+B\u003c/code\u003e, with \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e nonempty valid parentheses strings.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a valid parentheses string \u003ccode\u003eS\u003c/code\u003e, consider its primitive decomposition: \u003ccode\u003eS = P_1 + P_2 + ... + P_k\u003c/code\u003e, where \u003ccode\u003eP_i\u003c/code\u003e are primitive valid parentheses strings.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn \u003ccode\u003eS\u003c/code\u003e after removing the outermost parentheses of every primitive string in the primitive decomposition of \u003ccode\u003eS\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e\u0026quot;(()())(())\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e\u0026quot;()()()\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThe input string is \u0026quot;(()())(())\u0026quot;, with primitive decomposition \u0026quot;(()())\u0026quot; + \u0026quot;(())\u0026quot;.\r\nAfter removing outer parentheses of each part, this is \u0026quot;()()\u0026quot; + \u0026quot;()\u0026quot; = \u0026quot;()()()\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e\u0026quot;(()())(())(()(()))\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e\u0026quot;()()()()(())\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThe input string is \u0026quot;(()())(())(()(()))\u0026quot;, with primitive decomposition \u0026quot;(()())\u0026quot; + \u0026quot;(())\u0026quot; + \u0026quot;(()(()))\u0026quot;.\r\nAfter removing outer parentheses of each part, this is \u0026quot;()()\u0026quot; + \u0026quot;()\u0026quot; + \u0026quot;()(())\u0026quot; = \u0026quot;()()()()(())\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e\u0026quot;()()\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThe input string is \u0026quot;()()\u0026quot;, with primitive decomposition \u0026quot;()\u0026quot; + \u0026quot;()\u0026quot;.\r\nAfter removing outer parentheses of each part, this is \u0026quot;\u0026quot; + \u0026quot;\u0026quot; = \u0026quot;\u0026quot;.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS[i]\u003c/code\u003e is \u003ccode\u003e\u0026quot;(\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;)\u0026quot;\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e is a valid parentheses string\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv\u003e\u0026nbsp;\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"删除最外层的括号","TranslatedContent":"\u003cp\u003e有效括号字符串为空\u0026nbsp;\u003ccode\u003e(\u0026quot;\u0026quot;)\u003c/code\u003e、\u003ccode\u003e\u0026quot;(\u0026quot; + A + \u0026quot;)\u0026quot;\u003c/code\u003e\u0026nbsp;或\u0026nbsp;\u003ccode\u003eA + B\u003c/code\u003e，其中\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;都是有效的括号字符串，\u003ccode\u003e+\u003c/code\u003e\u0026nbsp;代表字符串的连接。例如，\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e，\u003ccode\u003e\u0026quot;()\u0026quot;\u003c/code\u003e，\u003ccode\u003e\u0026quot;(())()\u0026quot;\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003e\u0026quot;(()(()))\u0026quot;\u003c/code\u003e\u0026nbsp;都是有效的括号字符串。\u003c/p\u003e\n\n\u003cp\u003e如果有效字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;非空，且不存在将其拆分为\u0026nbsp;\u003ccode\u003eS = A+B\u003c/code\u003e\u0026nbsp;的方法，我们称其为\u003cstrong\u003e原语（primitive）\u003c/strong\u003e，其中\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;都是非空有效括号字符串。\u003c/p\u003e\n\n\u003cp\u003e给出一个非空有效字符串\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e，考虑将其进行原语化分解，使得：\u003ccode\u003eS = P_1 + P_2 + ... + P_k\u003c/code\u003e，其中\u0026nbsp;\u003ccode\u003eP_i\u003c/code\u003e\u0026nbsp;是有效括号字符串原语。\u003c/p\u003e\n\n\u003cp\u003e对\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 \u003ccode\u003eS\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;(()())(())\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;()()()\u0026quot;\n\u003cstrong\u003e解释：\n\u003c/strong\u003e输入字符串为 \u0026quot;(()())(())\u0026quot;，原语化分解得到 \u0026quot;(()())\u0026quot; + \u0026quot;(())\u0026quot;，\n删除每个部分中的最外层括号后得到 \u0026quot;()()\u0026quot; + \u0026quot;()\u0026quot; = \u0026quot;()()()\u0026quot;。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;(()())(())(()(()))\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;()()()()(())\u0026quot;\n\u003cstrong\u003e解释：\u003c/strong\u003e\n输入字符串为 \u0026quot;(()())(())(()(()))\u0026quot;，原语化分解得到 \u0026quot;(()())\u0026quot; + \u0026quot;(())\u0026quot; + \u0026quot;(()(()))\u0026quot;，\n删除每隔部分中的最外层括号后得到 \u0026quot;()()\u0026quot; + \u0026quot;()\u0026quot; + \u0026quot;()(())\u0026quot; = \u0026quot;()()()()(())\u0026quot;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e\u0026quot;()()\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e\u0026quot;\u0026quot;\n\u003cstrong\u003e解释：\u003c/strong\u003e\n输入字符串为 \u0026quot;()()\u0026quot;，原语化分解得到 \u0026quot;()\u0026quot; + \u0026quot;()\u0026quot;，\n删除每个部分中的最外层括号后得到 \u0026quot;\u0026quot; + \u0026quot;\u0026quot; = \u0026quot;\u0026quot;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003eS.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS[i]\u003c/code\u003e 为\u0026nbsp;\u003ccode\u003e\u0026quot;(\u0026quot;\u003c/code\u003e 或\u0026nbsp;\u003ccode\u003e\u0026quot;)\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e 是一个有效括号字符串\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16402313":{"ID":"16402313","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"13.3 MB","URL":"/submissions/detail/16402313/","Code":"class Solution:\n    def removeOuterParentheses(self, S: str) -\u003e str:\n        res = []\n        stack = []\n        last = 0\n        for x in range(len(S)):\n            t = S[x]\n            if t == '(':\n                stack.append(')')\n            elif t == ')':\n                stack.pop()\n            \n            if not stack:\n                res.append(S[last:x+1])\n                last = x + 1\n        return ''.join(x[1:-1] for x in res)","Timestamp":"1554604614"},"16670330":{"ID":"16670330","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"13.2 MB","URL":"/submissions/detail/16670330/","Code":"class Solution:\n    def removeOuterParentheses(self, S: str) -\u003e str:\n        res = []\n        stack = []\n        last = 0\n        for x in range(len(S)):\n            t = S[x]\n            if t == '(':\n                stack.append(')')\n            elif t == ')':\n                stack.pop()\n            \n            if not stack:\n                res.append(S[last:x+1])\n                last = x + 1\n        return ''.join(x[1:-1] for x in res)","Timestamp":"1554606007"}}},{"questionId":"1008","questionFrontendId":"968","Title":"Binary Tree Cameras","TitleSlug":"binary-tree-cameras","Content":"\u003cp\u003eGiven a binary tree, we install cameras on the nodes of the tree.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eEach camera at\u0026nbsp;a node can monitor \u003cstrong\u003eits parent, itself, and its immediate children\u003c/strong\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eCalculate the minimum number of cameras needed to monitor all nodes of the tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png\" style=\"width: 138px; height: 163px;\" /\u003e\r\n\u003cdiv\u003e\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[0,0,null,0,0]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eOne camera is enough to monitor all nodes if placed as shown.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png\" style=\"width: 139px; height: 312px;\" /\u003e\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[0,0,null,0,null,0,null,null,0]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cbr /\u003e\r\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe number of nodes in the given tree will be in the range\u0026nbsp;\u003ccode\u003e[1, 1000]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003e\u003cstrong\u003eEvery\u003c/strong\u003e node has value 0.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Hard","TranslatedTitle":"监控二叉树","TranslatedContent":"\u003cp\u003e给定一个二叉树，我们在树的节点上安装摄像头。\u003c/p\u003e\n\n\u003cp\u003e节点上的每个摄影头都可以监视\u003cstrong\u003e其父对象、自身及其直接子对象。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e计算监控树的所有节点所需的最小摄像头数量。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" style=\"height: 163px; width: 138px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[0,0,null,0,0]\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003e如图所示，一台摄像头足以监控所有节点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" style=\"height: 312px; width: 139px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[0,0,null,0,null,0,null,null,0]\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cbr\u003e\n\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给定树的节点数的范围是\u0026nbsp;\u003ccode\u003e[1, 1000]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个节点的值都是 0。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"11120889":{"ID":"11120889","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"6.9 MB","URL":"/submissions/detail/11120889/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minCameraCover(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        res = [0]\n        def inner(root):\n            if not root.left and not root.right:\n                return 1\n            a = inner(root.left) if root.left else 0\n            b = inner(root.right) if root.right else 0\n            if a == 1 or b == 1:\n                res[0] += 1\n                return 2\n            if a == 2 or b == 2:\n                return 0\n            return 1\n        if 1 == inner(root):\n            res[0] += 1\n        return res[0]\n        ","Timestamp":"1546396221"},"15006940":{"ID":"15006940","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006940/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def minCameraCover(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        res = [0]\n        def inner(root):\n            if not root.left and not root.right:\n                return 1\n            a = inner(root.left) if root.left else 0\n            b = inner(root.right) if root.right else 0\n            if a == 1 or b == 1:\n                res[0] += 1\n                return 2\n            if a == 2 or b == 2:\n                return 0\n            return 1\n        if 1 == inner(root):\n            res[0] += 1\n        return res[0]\n        \n","Timestamp":"1552927900"}}},{"questionId":"1001","questionFrontendId":"961","Title":"N-Repeated Element in Size 2N Array","TitleSlug":"n-repeated-element-in-size-2n-array","Content":"\u003cp\u003eIn a array \u003ccode\u003eA\u003c/code\u003e of size \u003ccode\u003e2N\u003c/code\u003e, there are \u003ccode\u003eN+1\u003c/code\u003e unique elements, and exactly one of these elements is repeated N times.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the element repeated \u003ccode\u003eN\u003c/code\u003e times.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[1,2,3,3]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e3\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[2,1,2,5,3,2]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e2\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[5,1,5,2,5,3,5,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e5\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e4 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA.length\u003c/code\u003e is even\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"重复 N 次的元素","TranslatedContent":"\u003cp\u003e在大小为 \u003ccode\u003e2N\u003c/code\u003e\u0026nbsp;的数组 \u003ccode\u003eA\u003c/code\u003e\u0026nbsp;中有 \u003ccode\u003eN+1\u003c/code\u003e 个不同的元素，其中有一个元素重复了 \u003ccode\u003eN\u003c/code\u003e 次。\u003c/p\u003e\n\n\u003cp\u003e返回重复了 \u003ccode\u003eN\u003c/code\u003e\u0026nbsp;次的那个元素。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,2,3,3]\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[2,1,2,5,3,2]\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[5,1,5,2,5,3,5,4]\n\u003cstrong\u003e输出：\u003c/strong\u003e5\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e4 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt; 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA.length\u003c/code\u003e\u0026nbsp;为偶数\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"10937333":{"ID":"10937333","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"7.6 MB","URL":"/submissions/detail/10937333/","Code":"class Solution:\n    def repeatedNTimes(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if A[0] == A[2]:\n            return A[0]\n        if A[1] == A[3]:\n            return A[1]\n        for i in range(len(A)-1):\n            if A[i] == A[i+1]:\n                return A[i]\n        return A[0]","Timestamp":"1545897420"},"10937383":{"ID":"10937383","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"7.6 MB","URL":"/submissions/detail/10937383/","Code":"class Solution:\n    def repeatedNTimes(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        s = set()\n        for x in A:\n            if x in s:\n                return x\n            else:\n                s.add(x)","Timestamp":"1545897476"},"15006934":{"ID":"15006934","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.5 MB","URL":"/submissions/detail/15006934/","Code":"class Solution:\n    def repeatedNTimes(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        s = set()\n        for x in A:\n            if x in s:\n                return x\n            else:\n                s.add(x)\n","Timestamp":"1552927857"}}},{"questionId":"874","questionFrontendId":"844","Title":"Backspace String Compare","TitleSlug":"backspace-string-compare","Content":"\u003cp\u003eGiven two\u0026nbsp;strings\u0026nbsp;\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;and \u003ccode\u003eT\u003c/code\u003e,\u0026nbsp;return if they are equal when both are typed into empty text editors. \u003ccode\u003e#\u003c/code\u003e means a backspace character.\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eS = \u003cspan id=\"example-input-1-1\"\u003e\u0026quot;ab#c\u0026quot;\u003c/span\u003e, T = \u003cspan id=\"example-input-1-2\"\u003e\u0026quot;ad#c\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\r\n\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: Both S and T become \u0026quot;ac\u0026quot;.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eS = \u003cspan id=\"example-input-2-1\"\u003e\u0026quot;ab##\u0026quot;\u003c/span\u003e, T = \u003cspan id=\"example-input-2-2\"\u003e\u0026quot;c#d#\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003etrue\r\n\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: Both S and T become \u0026quot;\u0026quot;.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eS = \u003cspan id=\"example-input-3-1\"\u003e\u0026quot;a##c\u0026quot;\u003c/span\u003e, T = \u003cspan id=\"example-input-3-2\"\u003e\u0026quot;#a#c\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003etrue\r\n\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: Both S and T become \u0026quot;c\u0026quot;.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 4:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eS = \u003cspan id=\"example-input-4-1\"\u003e\u0026quot;a#c\u0026quot;\u003c/span\u003e, T = \u003cspan id=\"example-input-4-2\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-4\"\u003efalse\r\n\u003c/span\u003e\u003cspan\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: S becomes \u0026quot;c\u0026quot; while T becomes \u0026quot;b\u0026quot;.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eNote\u003c/strong\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cspan\u003e1 \u0026lt;= S.length \u0026lt;= 200\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e\u003cspan\u003e1 \u0026lt;= T.length \u0026lt;= 200\u003c/span\u003e\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003cspan\u003e\u003ccode\u003eS\u003c/code\u003e\u0026nbsp;and \u003ccode\u003eT\u003c/code\u003e only contain\u0026nbsp;lowercase letters and \u003ccode\u003e\u0026#39;#\u0026#39;\u003c/code\u003e characters.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eCan you solve it in \u003ccode\u003eO(N)\u003c/code\u003e time and \u003ccode\u003eO(1)\u003c/code\u003e space?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"比较含退格的字符串","TranslatedContent":"\u003cp\u003e给定 \u003ccode\u003eS\u003c/code\u003e 和 \u003ccode\u003eT\u003c/code\u003e 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 \u003ccode\u003e#\u003c/code\u003e 代表退格字符。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eS = \u0026quot;ab#c\u0026quot;, T = \u0026quot;ad#c\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003eS 和 T 都会变成 \u0026ldquo;ac\u0026rdquo;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eS = \u0026quot;ab##\u0026quot;, T = \u0026quot;c#d#\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003eS 和 T 都会变成 \u0026ldquo;\u0026rdquo;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eS = \u0026quot;a##c\u0026quot;, T = \u0026quot;#a#c\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003eS 和 T 都会变成 \u0026ldquo;c\u0026rdquo;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 4：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eS = \u0026quot;a#c\u0026quot;, T = \u0026quot;b\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\u003c/strong\u003eS 会变成 \u0026ldquo;c\u0026rdquo;，但 T 仍然是 \u0026ldquo;b\u0026rdquo;。\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= S.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= T.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eS\u003c/code\u003e 和 \u003ccode\u003eT\u003c/code\u003e 只含有小写字母以及字符 \u003ccode\u003e\u0026#39;#\u0026#39;\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006889":{"ID":"15006889","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006889/","Code":"class Solution:\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        def get_res(string):\n            num = 0\n            res = ''\n            for x in string[::-1]:\n                if x == '#':\n                    num += 1\n                else:\n                    if num:\n                        num -= 1\n                    else:\n                        res += x\n            return res\n        return get_res(T) == get_res(S)\n\n","Timestamp":"1552927517"},"2854616":{"ID":"2854616","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/2854616/","Code":"class Solution:\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        def get_res(string):\n            num = 0\n            res = ''\n            for x in string[::-1]:\n                if x == '#':\n                    num += 1\n                else:\n                    if num:\n                        num -= 1\n                    else:\n                        res += x\n            return res\n        return get_res(T) == get_res(S)","Timestamp":"1527991975"},"7573022":{"ID":"7573022","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7573022/","Code":"class Solution:\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        def get_res(string):\n            num = 0\n            res = ''\n            for x in string[::-1]:\n                if x == '#':\n                    num += 1\n                else:\n                    if num:\n                        num -= 1\n                    else:\n                        res += x\n            return res\n        return get_res(T) == get_res(S)\n","Timestamp":"1536219123"}}},{"questionId":"415","questionFrontendId":"415","Title":"Add Strings","TitleSlug":"add-strings","Content":"\u003cp\u003eGiven two non-negative integers \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e represented as string, return the sum of \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe length of both \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e is \u003c 5100.\u003c/li\u003e\r\n\u003cli\u003eBoth \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e contains only digits \u003ccode\u003e0-9\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eBoth \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e does not contain any leading zero.\u003c/li\u003e\r\n\u003cli\u003eYou \u003cb\u003emust not use any built-in BigInteger library\u003c/b\u003e or \u003cb\u003econvert the inputs to integer\u003c/b\u003e directly.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"字符串相加","TranslatedContent":"\u003cp\u003e给定两个字符串形式的非负整数\u0026nbsp;\u003ccode\u003enum1\u003c/code\u003e 和\u003ccode\u003enum2\u003c/code\u003e\u0026nbsp;，计算它们的和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003enum1\u003c/code\u003e 和\u003ccode\u003enum2\u003c/code\u003e\u0026nbsp;的长度都小于 5100.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enum1\u003c/code\u003e 和\u003ccode\u003enum2\u003c/code\u003e 都只包含数字\u0026nbsp;\u003ccode\u003e0-9\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enum1\u003c/code\u003e 和\u003ccode\u003enum2\u003c/code\u003e 都不包含任何前导零。\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e你不能使用任何內建 BigInteger 库，\u0026nbsp;也不能直接将输入的字符串转换为整数形式。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006770":{"ID":"15006770","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"11 MB","URL":"/submissions/detail/15006770/","Code":"class Solution:\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        return str(int(num1) + int(num2))\n\n","Timestamp":"1552926026"},"1729365":{"ID":"1729365","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/1729365/","Code":"class Solution:\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        return str(int(num1) + int(num2))\n","Timestamp":"1521092855"}}},{"questionId":"767","questionFrontendId":"762","Title":"Prime Number of Set Bits in Binary Representation","TitleSlug":"prime-number-of-set-bits-in-binary-representation","Content":"\u003cp\u003e\r\nGiven two integers \u003ccode\u003eL\u003c/code\u003e and \u003ccode\u003eR\u003c/code\u003e, find the count of numbers in the range \u003ccode\u003e[L, R]\u003c/code\u003e (inclusive) having a prime number of set bits in their binary representation.\r\n\u003c/p\u003e\u003cp\u003e\r\n(Recall that the number of set bits an integer has is the number of \u003ccode\u003e1\u003c/code\u003es present when written in binary.  For example, \u003ccode\u003e21\u003c/code\u003e written in binary is \u003ccode\u003e10101\u003c/code\u003e which has 3 set bits.  Also, 1 is not a prime.)\r\n\u003c/p\u003e\u003cp\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e L = 6, R = 10\r\n\u003cb\u003eOutput:\u003c/b\u003e 4\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\n6 -\u003e 110 (2 set bits, 2 is prime)\r\n7 -\u003e 111 (3 set bits, 3 is prime)\r\n9 -\u003e 1001 (2 set bits , 2 is prime)\r\n10-\u003e1010 (2 set bits , 2 is prime)\r\n\u003c/pre\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e L = 10, R = 15\r\n\u003cb\u003eOutput:\u003c/b\u003e 5\r\n\u003cb\u003eExplanation:\u003c/b\u003e\r\n10 -\u003e 1010 (2 set bits, 2 is prime)\r\n11 -\u003e 1011 (3 set bits, 3 is prime)\r\n12 -\u003e 1100 (2 set bits, 2 is prime)\r\n13 -\u003e 1101 (3 set bits, 3 is prime)\r\n14 -\u003e 1110 (3 set bits, 3 is prime)\r\n15 -\u003e 1111 (4 set bits, 4 is not prime)\r\n\u003c/pre\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\u003col\u003e\r\n\u003cli\u003e\u003ccode\u003eL, R\u003c/code\u003e will be integers \u003ccode\u003eL \u003c= R\u003c/code\u003e in the range \u003ccode\u003e[1, 10^6]\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003eR - L\u003c/code\u003e will be at most 10000.\u003c/li\u003e\r\n\u003c/ol\u003e\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"二进制表示中质数个计算置位","TranslatedContent":"\u003cp\u003e给定两个整数\u0026nbsp;\u003ccode\u003eL\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eR\u003c/code\u003e\u0026nbsp;，找到闭区间\u0026nbsp;\u003ccode\u003e[L, R]\u003c/code\u003e\u0026nbsp;范围内，计算置位位数为质数的整数个数。\u003c/p\u003e\n\n\u003cp\u003e（注意，计算置位代表二进制表示中1的个数。例如\u0026nbsp;\u003ccode\u003e21\u003c/code\u003e\u0026nbsp;的二进制表示\u0026nbsp;\u003ccode\u003e10101\u003c/code\u003e\u0026nbsp;有 3 个计算置位。还有，1 不是质数。）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e L = 6, R = 10\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\n\u003cstrong\u003e解释:\u003c/strong\u003e\n6 -\u0026gt; 110 (2 个计算置位，2 是质数)\n7 -\u0026gt; 111 (3 个计算置位，3 是质数)\n9 -\u0026gt; 1001 (2 个计算置位，2 是质数)\n10-\u0026gt; 1010 (2 个计算置位，2 是质数)\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e L = 10, R = 15\n\u003cstrong\u003e输出:\u003c/strong\u003e 5\n\u003cstrong\u003e解释:\u003c/strong\u003e\n10 -\u0026gt; 1010 (2 个计算置位, 2 是质数)\n11 -\u0026gt; 1011 (3 个计算置位, 3 是质数)\n12 -\u0026gt; 1100 (2 个计算置位, 2 是质数)\n13 -\u0026gt; 1101 (3 个计算置位, 3 是质数)\n14 -\u0026gt; 1110 (3 个计算置位, 3 是质数)\n15 -\u0026gt; 1111 (4 个计算置位, 4 不是质数)\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003eL, R\u003c/code\u003e\u0026nbsp;是\u0026nbsp;\u003ccode\u003eL \u0026lt;= R\u003c/code\u003e\u0026nbsp;且在\u0026nbsp;\u003ccode\u003e[1, 10^6]\u003c/code\u003e\u0026nbsp;中的整数。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eR - L\u003c/code\u003e\u0026nbsp;的最大值为 10000。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006860":{"ID":"15006860","StatusDisplay":"Accepted","Lang":"python","Runtime":"156 ms","Memory":"11 MB","URL":"/submissions/detail/15006860/","Code":"class Solution:\n    def countPrimeSetBits(self, L, R):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        p = {2,3,5,7,11,13,17,19}\n        for x in range(L, R+1):\n            if bin(x).count('1') in p:\n                res += 1\n        return res\n","Timestamp":"1552927249"},"7987230":{"ID":"7987230","StatusDisplay":"Accepted","Lang":"python3","Runtime":"312 ms","Memory":"N/A","URL":"/submissions/detail/7987230/","Code":"class Solution:\n    def countPrimeSetBits(self, L, R):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        p = {2,3,5,7,11,13,17,19}\n        for x in range(L, R+1):\n            if str(bin(x)).count('1') in p:\n                res += 1\n        return res","Timestamp":"1538988935"},"7987306":{"ID":"7987306","StatusDisplay":"Accepted","Lang":"python3","Runtime":"256 ms","Memory":"N/A","URL":"/submissions/detail/7987306/","Code":"class Solution:\n    def countPrimeSetBits(self, L, R):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        p = {2,3,5,7,11,13,17,19}\n        for x in range(L, R+1):\n            if bin(x).count('1') in p:\n                res += 1\n        return res","Timestamp":"1538988980"}}},{"questionId":"235","questionFrontendId":"235","Title":"Lowest Common Ancestor of a Binary Search Tree","TitleSlug":"lowest-common-ancestor-of-a-binary-search-tree","Content":"\u003cp\u003eGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\u003c/p\u003e\r\n\r\n\u003cp\u003eAccording to the \u003ca href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\"\u003edefinition of LCA on Wikipedia\u003c/a\u003e: \u0026ldquo;The lowest common ancestor is defined between two nodes p and q\u0026nbsp;as the lowest node in T that has both p and q\u0026nbsp;as descendants (where we allow \u003cb\u003ea node to be a descendant of itself\u003c/b\u003e).\u0026rdquo;\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven binary search tree:\u0026nbsp; root =\u0026nbsp;[6,2,8,0,4,7,9,null,null,3,5]\u003c/p\u003e\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" /\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 6\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe LCA of nodes \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e8\u003c/code\u003e is \u003ccode\u003e6\u003c/code\u003e.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe LCA of nodes \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e4\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e, since a node can be a descendant of itself according to the LCA definition.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eAll of the nodes\u0026#39; values will be unique.\u003c/li\u003e\r\n\t\u003cli\u003ep and q are different and both values will\u0026nbsp;exist in the BST.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"二叉搜索树的最近公共祖先","TranslatedContent":"\u003cp\u003e给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\"\u003e百度百科\u003c/a\u003e中最近公共祖先的定义为：\u0026ldquo;对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（\u003cstrong\u003e一个节点也可以是它自己的祖先\u003c/strong\u003e）。\u0026rdquo;\u003c/p\u003e\n\n\u003cp\u003e例如，给定如下二叉搜索树:\u0026nbsp; root =\u0026nbsp;[6,2,8,0,4,7,9,null,null,3,5]\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"height: 190px; width: 200px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n\u003cstrong\u003e输出:\u003c/strong\u003e 6 \n\u003cstrong\u003e解释: \u003c/strong\u003e节点 \u003ccode\u003e2 \u003c/code\u003e和节点 \u003ccode\u003e8 \u003c/code\u003e的最近公共祖先是 \u003ccode\u003e6。\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释: \u003c/strong\u003e节点 \u003ccode\u003e2\u003c/code\u003e 和节点 \u003ccode\u003e4\u003c/code\u003e 的最近公共祖先是 \u003ccode\u003e2\u003c/code\u003e, 因为根据定义最近公共祖先节点可以为节点本身。\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e所有节点的值都是唯一的。\u003c/li\u003e\n\t\u003cli\u003ep、q 为不同节点且均存在于给定的二叉搜索树中。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006714":{"ID":"15006714","StatusDisplay":"Accepted","Lang":"python","Runtime":"72 ms","Memory":"19 MB","URL":"/submissions/detail/15006714/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def get_path(path, node, target):\n            path.append(node)\n            if node.val == target.val:\n                return path\n            elif node.val \u003e target.val:\n                return get_path(path, node.left, target)\n            else:\n                return get_path(path, node.right, target)\n        \n        p1 = get_path([], root, p)\n        p2 = get_path([], root, q)\n        x = 0\n        while len(p1) \u003e x and len(p2) \u003e x:\n            if p1[x].val != p2[x].val:\n                break\n            x += 1\n        return p1[x-1]\n            \n","Timestamp":"1552925570"},"7989325":{"ID":"7989325","StatusDisplay":"Accepted","Lang":"python3","Runtime":"108 ms","Memory":"N/A","URL":"/submissions/detail/7989325/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def get_path(path, node, target):\n            path.append(node)\n            if node.val == target.val:\n                return path\n            elif node.val \u003e target.val:\n                return get_path(path, node.left, target)\n            else:\n                return get_path(path, node.right, target)\n        \n        p1 = get_path([], root, p)\n        p2 = get_path([], root, q)\n        x = 0\n        while len(p1) \u003e x and len(p2) \u003e x:\n            if p1[x].val != p2[x].val:\n                break\n            x += 1\n        return p1[x-1]\n            ","Timestamp":"1538990618"},"7989408":{"ID":"7989408","StatusDisplay":"Accepted","Lang":"python3","Runtime":"152 ms","Memory":"N/A","URL":"/submissions/detail/7989408/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if (p.val \u003c= root.val \u003c= q.val) or (p.val \u003e= root.val \u003e= q.val):\n            return root\n        \n        elif p.val \u003c root.val and q.val \u003c root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        \n        else:\n            return self.lowestCommonAncestor(root.right, p, q)\n        \n            ","Timestamp":"1538990689"},"7989417":{"ID":"7989417","StatusDisplay":"Accepted","Lang":"python3","Runtime":"200 ms","Memory":"N/A","URL":"/submissions/detail/7989417/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if (p.val \u003c= root.val \u003c= q.val) or (p.val \u003e= root.val \u003e= q.val):\n            return root\n        \n        elif p.val \u003c root.val and q.val \u003c root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        \n        else:\n            return self.lowestCommonAncestor(root.right, p, q)\n        \n            ","Timestamp":"1538990696"},"7989425":{"ID":"7989425","StatusDisplay":"Accepted","Lang":"python3","Runtime":"192 ms","Memory":"N/A","URL":"/submissions/detail/7989425/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if (p.val \u003c= root.val \u003c= q.val) or (p.val \u003e= root.val \u003e= q.val):\n            return root\n        \n        elif p.val \u003c root.val and q.val \u003c root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        \n        else:\n            return self.lowestCommonAncestor(root.right, p, q)\n        \n            ","Timestamp":"1538990705"},"7989435":{"ID":"7989435","StatusDisplay":"Accepted","Lang":"python3","Runtime":"112 ms","Memory":"N/A","URL":"/submissions/detail/7989435/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def get_path(path, node, target):\n            path.append(node)\n            if node.val == target.val:\n                return path\n            elif node.val \u003e target.val:\n                return get_path(path, node.left, target)\n            else:\n                return get_path(path, node.right, target)\n        \n        p1 = get_path([], root, p)\n        p2 = get_path([], root, q)\n        x = 0\n        while len(p1) \u003e x and len(p2) \u003e x:\n            if p1[x].val != p2[x].val:\n                break\n            x += 1\n        return p1[x-1]\n            ","Timestamp":"1538990716"}}},{"questionId":"1022","questionFrontendId":"980","Title":"Unique Paths III","TitleSlug":"unique-paths-iii","Content":"\u003cp\u003eOn a 2-dimensional\u0026nbsp;\u003ccode\u003egrid\u003c/code\u003e, there are 4 types of squares:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1\u003c/code\u003e represents the starting square.\u0026nbsp; There is exactly one starting square.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e2\u003c/code\u003e represents the ending square.\u0026nbsp; There is exactly one ending square.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e represents empty squares we can walk over.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e-1\u003c/code\u003e represents obstacles that we cannot walk over.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eReturn the number of 4-directional walks\u0026nbsp;from the starting square to the ending square, that \u003cstrong\u003ewalk over every non-obstacle square\u0026nbsp;exactly once\u003c/strong\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eWe have the following two paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\r\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e4\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eWe have the following four paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\r\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\r\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\r\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e[[0,1],[2,0]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nThere is no path that walks over every empty square exactly once.\r\nNote that the starting and ending square can be anywhere in the grid.\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= grid.length * grid[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Hard","TranslatedTitle":"不同路径 III","TranslatedContent":"\u003cp\u003e在二维网格 \u003ccode\u003egrid\u003c/code\u003e 上，有 4 种类型的方格：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e1\u003c/code\u003e 表示起始方格。且只有一个起始方格。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e2\u003c/code\u003e 表示结束方格，且只有一个结束方格。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e 表示我们可以走过的空方格。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e-1\u003c/code\u003e 表示我们无法跨越的障碍。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目，\u003cstrong\u003e每一个无障碍方格都要通过一次\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n\u003cstrong\u003e输出：\u003c/strong\u003e2\n\u003cstrong\u003e解释：\u003c/strong\u003e我们有以下两条路径：\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n\u003cstrong\u003e输出：\u003c/strong\u003e4\n\u003cstrong\u003e解释：\u003c/strong\u003e我们有以下四条路径： \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[[0,1],[2,0]]\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003cstrong\u003e解释：\u003c/strong\u003e\n没有一条路能完全穿过每一个空的方格一次。\n请注意，起始和结束方格可以位于网格中的任意位置。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= grid.length * grid[0].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15766679":{"ID":"15766679","StatusDisplay":"Accepted","Lang":"python3","Runtime":"404 ms","Memory":"13.2 MB","URL":"/submissions/detail/15766679/","Code":"import copy\n\nclass Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -\u003e int:\n        res = [0]\n        h, w = len(grid), len(grid[0])\n        \n        t = [[0 for _ in range(w)] for _ in range(h)]\n        \n        start = (0, 0)\n        for x in range(w):\n            for y in range(h):\n                if grid[y][x] == 1:\n                    start = (y, x)\n                elif grid[y][x] == -1:\n                    t[y][x] = 1\n        \n        def inner(t, y, x):\n            \n            if x \u003c 0 or y \u003c 0 or x \u003e= w or y \u003e= h:\n                return\n            if t[y][x] == 1:\n                return\n            t =  copy.deepcopy(t)\n            t[y][x] = 1\n            if grid[y][x] == 2:\n                if all([all(i) for i in t]):\n                    res[0] += 1\n                return\n            inner(t, y+1, x)\n            inner(t, y-1, x)\n            inner(t, y, x+1)\n            inner(t, y, x-1)\n        \n        inner(t, start[0], start[1])\n        return res[0]\n        ","Timestamp":"1553767846"},"15766694":{"ID":"15766694","StatusDisplay":"Accepted","Lang":"python3","Runtime":"444 ms","Memory":"13.3 MB","URL":"/submissions/detail/15766694/","Code":"import copy\n\nclass Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -\u003e int:\n        res = [0]\n        h, w = len(grid), len(grid[0])\n        \n        t = [[0 for _ in range(w)] for _ in range(h)]\n        \n        start = (0, 0)\n        for x in range(w):\n            for y in range(h):\n                if grid[y][x] == 1:\n                    start = (y, x)\n                elif grid[y][x] == -1:\n                    t[y][x] = 1\n        \n        def inner(t, y, x):\n            \n            if x \u003c 0 or y \u003c 0 or x \u003e= w or y \u003e= h:\n                return\n            if t[y][x] == 1:\n                return\n            t =  copy.deepcopy(t)\n            t[y][x] = 1\n            if grid[y][x] == 2:\n                if all([all(i) for i in t]):\n                    res[0] += 1\n                return\n            inner(t, y+1, x)\n            inner(t, y-1, x)\n            inner(t, y, x+1)\n            inner(t, y, x-1)\n        \n        inner(t, start[0], start[1])\n        return res[0]\n        ","Timestamp":"1553767856"}}},{"questionId":"69","questionFrontendId":"69","Title":"Sqrt(x)","TitleSlug":"sqrtx","Content":"\u003cp\u003eImplement \u003ccode\u003eint sqrt(int x)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eCompute and return the square root of \u003cem\u003ex\u003c/em\u003e, where\u0026nbsp;\u003cem\u003ex\u003c/em\u003e\u0026nbsp;is guaranteed to be a non-negative integer.\u003c/p\u003e\r\n\r\n\u003cp\u003eSince the return type\u0026nbsp;is an integer, the decimal digits are truncated and only the integer part of the result\u0026nbsp;is returned.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 4\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 8\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The square root of 8 is 2.82842..., and since \r\n\u0026nbsp;            the decimal part is truncated, 2 is returned.\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"x 的平方根","TranslatedContent":"\u003cp\u003e实现\u0026nbsp;\u003ccode\u003eint sqrt(int x)\u003c/code\u003e\u0026nbsp;函数。\u003c/p\u003e\n\n\u003cp\u003e计算并返回\u0026nbsp;\u003cem\u003ex\u003c/em\u003e\u0026nbsp;的平方根，其中\u0026nbsp;\u003cem\u003ex \u003c/em\u003e是非负整数。\u003c/p\u003e\n\n\u003cp\u003e由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 4\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 8\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e说明:\u003c/strong\u003e 8 的平方根是 2.82842..., \n\u0026nbsp;    由于返回类型是整数，小数部分将被舍去。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006841":{"ID":"15006841","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006841/","Code":"class Solution:\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        l = 0\n        h = x // 2 + 1\n        mid = 0\n\n        while(l \u003c= h):\n            mid = (l+h) // 2\n            if mid ** 2 \u003e x:\n                h = mid - 1\n            elif mid ** 2 \u003c x:\n                l = mid + 1\n            else:\n                return mid\n        return (l+h) // 2\n\n\n\n","Timestamp":"1552927095"},"1729320":{"ID":"1729320","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/1729320/","Code":"class Solution:\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        l = 0\n        h = x // 2 + 1\n        mid = 0\n\n        while(l \u003c= h):\n            mid = (l+h) // 2\n            if mid ** 2 \u003e x:\n                h = mid - 1\n            elif mid ** 2 \u003c x:\n                l = mid + 1\n            else:\n                return mid\n        return (l+h) // 2\n\n","Timestamp":"1524476374"},"7572981":{"ID":"7572981","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/7572981/","Code":"class Solution:\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        l = 0\n        h = x // 2 + 1\n        mid = 0\n\n        while(l \u003c= h):\n            mid = (l+h) // 2\n            if mid ** 2 \u003e x:\n                h = mid - 1\n            elif mid ** 2 \u003c x:\n                l = mid + 1\n            else:\n                return mid\n        return (l+h) // 2\n\n\n","Timestamp":"1536219065"}}},{"questionId":"742","questionFrontendId":"709","Title":"To Lower Case","TitleSlug":"to-lower-case","Content":"\u003cp\u003eImplement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e\u0026quot;Hello\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e\u0026quot;here\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e\u0026quot;here\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-3-1\"\u003e\u0026quot;LOVELY\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e\u0026quot;lovely\u0026quot;\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"转换成小写字母","TranslatedContent":"\u003cp\u003e实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;Hello\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003e\u0026quot;hello\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;here\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003e\u0026quot;here\u0026quot;\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u003c/strong\u003e\u003cstrong\u003e\u0026nbsp;3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入: \u003c/strong\u003e\u0026quot;LOVELY\u0026quot;\n\u003cstrong\u003e输出: \u003c/strong\u003e\u0026quot;lovely\u0026quot;\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006853":{"ID":"15006853","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006853/","Code":"class Solution:\n    def toLowerCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.lower()\n        \n","Timestamp":"1552927196"},"7573042":{"ID":"7573042","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7573042/","Code":"class Solution:\n    def toLowerCase(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: str\n        \"\"\"\n        return str.lower()\n        ","Timestamp":"1536389885"}}},{"questionId":"131","questionFrontendId":"131","Title":"Palindrome Partitioning","TitleSlug":"palindrome-partitioning","Content":"\u003cp\u003eGiven a string \u003cem\u003es\u003c/em\u003e, partition \u003cem\u003es\u003c/em\u003e such that every substring of the partition is a palindrome.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn all possible palindrome partitioning of \u003cem\u003es\u003c/em\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u0026quot;aab\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n  [\u0026quot;aa\u0026quot;,\u0026quot;b\u0026quot;],\r\n  [\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"分割回文串","TranslatedContent":"\u003cp\u003e给定一个字符串 \u003cem\u003es\u003c/em\u003e，将\u003cem\u003e s \u003c/em\u003e分割成一些子串，使每个子串都是回文串。\u003c/p\u003e\n\n\u003cp\u003e返回 \u003cem\u003es\u003c/em\u003e 所有可能的分割方案。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\u0026nbsp;\u0026quot;aab\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n  [\u0026quot;aa\u0026quot;,\u0026quot;b\u0026quot;],\n  [\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;]\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006663":{"ID":"15006663","StatusDisplay":"Accepted","Lang":"python","Runtime":"100 ms","Memory":"11.2 MB","URL":"/submissions/detail/15006663/","Code":"class Solution:\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        res = []\n        def inner(l, s): \n            if s and len(s) \u003e 1:\n                for x in range(1, len(s)+1):\n                    if s[:x] == s[:x][::-1]:\n                        c = l[:]\n                        c.append(s[:x])\n                        inner(c, s[x:])\n            else:\n                c = l[:]\n                if s:   \n                    c.append(s)\n                if all([x==x[::-1] for x in c]):\n                    res.append(c)             \n        inner([], s)\n        return res\n        \n","Timestamp":"1552925183"},"15779101":{"ID":"15779101","StatusDisplay":"Accepted","Lang":"python3","Runtime":"216 ms","Memory":"13.3 MB","URL":"/submissions/detail/15779101/","Code":"class Solution:\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        res = []\n        def inner(l, s): \n            if s and len(s) \u003e 1:\n                for x in range(1, len(s)+1):\n                    if s[:x] == s[:x][::-1]:\n                        c = l[:]\n                        c.append(s[:x])\n                        inner(c, s[x:])\n            else:\n                c = l[:]\n                if s:   \n                    c.append(s)\n                if all([x==x[::-1] for x in c]):\n                    res.append(c)             \n        inner([], s)\n        return res\n        ","Timestamp":"1553777536"},"8451827":{"ID":"8451827","StatusDisplay":"Accepted","Lang":"python3","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/8451827/","Code":"class Solution:\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        res = []\n        def inner(l, s): \n            if s and len(s) \u003e 1:\n                for x in range(1, len(s)+1):\n                    if s[:x] == s[:x][::-1]:\n                        c = l[:]\n                        c.append(s[:x])\n                        inner(c, s[x:])\n            else:\n                c = l[:]\n                if s:   \n                    c.append(s)\n                if all([x==x[::-1] for x in c]):\n                    res.append(c)             \n        inner([], s)\n        return res\n        ","Timestamp":"1539938340"}}},{"questionId":"206","questionFrontendId":"206","Title":"Reverse Linked List","TitleSlug":"reverse-linked-list","Content":"\u003cp\u003eReverse a singly linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eA linked list can be reversed either iteratively or recursively. Could you implement both?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"反转链表","TranslatedContent":"\u003cp\u003e反转一个单链表。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL\n\u003cstrong\u003e输出:\u003c/strong\u003e 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003cbr\u003e\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006697":{"ID":"15006697","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"16.3 MB","URL":"/submissions/detail/15006697/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n        \n            \n        \n        \n","Timestamp":"1552925442"},"6594990":{"ID":"6594990","StatusDisplay":"Accepted","Lang":"python3","Runtime":"76 ms","Memory":"N/A","URL":"/submissions/detail/6594990/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n        \n            \n        \n        ","Timestamp":"1536141786"},"7572762":{"ID":"7572762","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7572762/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n        \n            \n        \n        \n","Timestamp":"1536218619"},"7907097":{"ID":"7907097","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7907097/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head or not head.next:\n            return head\n        p = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return p\n        \n            \n        \n        ","Timestamp":"1538799300"}}},{"questionId":"774","questionFrontendId":"559","Title":"Maximum Depth of N-ary Tree","TitleSlug":"maximum-depth-of-n-ary-tree","Content":"\u003cp\u003eGiven a n-ary tree, find its maximum depth.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given a \u003ccode\u003e3-ary\u003c/code\u003e tree:\u003c/p\u003e\r\n\u0026nbsp;\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eWe should return its max depth, which is 3.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe depth of the tree is at most \u003ccode\u003e1000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe total number of nodes is at most \u003ccode\u003e5000\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"N叉树的最大深度","TranslatedContent":"\u003cp\u003e给定一个 N 叉树，找到其最大深度。\u003c/p\u003e\r\n\r\n\u003cp\u003e最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。\u003c/p\u003e\r\n\r\n\u003cp\u003e例如，给定一个\u0026nbsp;\u003ccode\u003e3叉树\u003c/code\u003e\u0026nbsp;:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e我们应返回其最大深度，3。\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e树的深度不会超过\u0026nbsp;\u003ccode\u003e1000\u003c/code\u003e。\u003c/li\u003e\r\n\t\u003cli\u003e树的节点总不会超过\u0026nbsp;\u003ccode\u003e5000\u003c/code\u003e。\u003c/li\u003e\r\n\u003c/ol\u003e","Status":"ac","Tags":[],"Submits":{"15006806":{"ID":"15006806","StatusDisplay":"Accepted","Lang":"python","Runtime":"92 ms","Memory":"18.3 MB","URL":"/submissions/detail/15006806/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.children:\n            return 1\n        return max([self.maxDepth(c)+1 for c in root.children])\n            \n","Timestamp":"1552926808"},"7971327":{"ID":"7971327","StatusDisplay":"Accepted","Lang":"python","Runtime":"128 ms","Memory":"N/A","URL":"/submissions/detail/7971327/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.children:\n            return 1\n        return max([self.maxDepth(c)+1 for c in root.children])\n            ","Timestamp":"1538970557"},"7971333":{"ID":"7971333","StatusDisplay":"Accepted","Lang":"python","Runtime":"128 ms","Memory":"N/A","URL":"/submissions/detail/7971333/","Code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, children):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if not root.children:\n            return 1\n        return max([self.maxDepth(c)+1 for c in root.children])\n            ","Timestamp":"1538970563"}}},{"questionId":"120","questionFrontendId":"120","Title":"Triangle","TitleSlug":"triangle","Content":"\u003cp\u003eGiven a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, given the following triangle\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[\r\n     [\u003cstrong\u003e2\u003c/strong\u003e],\r\n    [\u003cstrong\u003e3\u003c/strong\u003e,4],\r\n   [6,\u003cstrong\u003e5\u003c/strong\u003e,7],\r\n  [4,\u003cstrong\u003e1\u003c/strong\u003e,8,3]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eThe minimum path sum from top to bottom is \u003ccode\u003e11\u003c/code\u003e (i.e., \u003cstrong\u003e2\u003c/strong\u003e + \u003cstrong\u003e3\u003c/strong\u003e + \u003cstrong\u003e5\u003c/strong\u003e + \u003cstrong\u003e1\u003c/strong\u003e = 11).\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eBonus point if you are able to do this using only \u003cem\u003eO\u003c/em\u003e(\u003cem\u003en\u003c/em\u003e) extra space, where \u003cem\u003en\u003c/em\u003e is the total number of rows in the triangle.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"三角形最小路径和","TranslatedContent":"\u003cp\u003e给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\u003c/p\u003e\n\n\u003cp\u003e例如，给定三角形：\u003c/p\u003e\n\n\u003cpre\u003e[\n     [\u003cstrong\u003e2\u003c/strong\u003e],\n    [\u003cstrong\u003e3\u003c/strong\u003e,4],\n   [6,\u003cstrong\u003e5\u003c/strong\u003e,7],\n  [4,\u003cstrong\u003e1\u003c/strong\u003e,8,3]\n]\n\u003c/pre\u003e\n\n\u003cp\u003e自顶向下的最小路径和为\u0026nbsp;\u003ccode\u003e11\u003c/code\u003e（即，\u003cstrong\u003e2\u0026nbsp;\u003c/strong\u003e+\u0026nbsp;\u003cstrong\u003e3\u003c/strong\u003e\u0026nbsp;+\u0026nbsp;\u003cstrong\u003e5\u0026nbsp;\u003c/strong\u003e+\u0026nbsp;\u003cstrong\u003e1\u003c/strong\u003e\u0026nbsp;= 11）。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果你可以只使用 \u003cem\u003eO\u003c/em\u003e(\u003cem\u003en\u003c/em\u003e)\u0026nbsp;的额外空间（\u003cem\u003en\u003c/em\u003e 为三角形的总行数）来解决这个问题，那么你的算法会很加分。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11141957":{"ID":"11141957","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"7.3 MB","URL":"/submissions/detail/11141957/","Code":"class Solution:\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        for l in range(len(triangle)-1-1, -1, -1):\n            for x in range(len(triangle[l])):\n                triangle[l][x] += min(triangle[l+1][x], triangle[l+1][x+1])\n        return triangle[0][0]","Timestamp":"1546424866"},"15006656":{"ID":"15006656","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006656/","Code":"class Solution:\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        for l in range(len(triangle)-1-1, -1, -1):\n            for x in range(len(triangle[l])):\n                triangle[l][x] += min(triangle[l+1][x], triangle[l+1][x+1])\n        return triangle[0][0]\n","Timestamp":"1552925110"}}},{"questionId":"500","questionFrontendId":"500","Title":"Keyboard Row","TitleSlug":"keyboard-row","Content":"\u003cp\u003eGiven a List of words, return the words that can be typed using letters of \u003cb\u003ealphabet\u003c/b\u003e on only one row\u0026#39;s of American keyboard like the image below.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\" /\u003e\u003c/p\u003e\r\n\u0026nbsp;\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [\u0026quot;Hello\u0026quot;, \u0026quot;Alaska\u0026quot;, \u0026quot;Dad\u0026quot;, \u0026quot;Peace\u0026quot;]\r\n\u003cb\u003eOutput:\u003c/b\u003e [\u0026quot;Alaska\u0026quot;, \u0026quot;Dad\u0026quot;]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eYou may use one character in the keyboard more than once.\u003c/li\u003e\r\n\t\u003cli\u003eYou may assume the input string will only contain letters of alphabet.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"键盘行","TranslatedContent":"\u003cp\u003e给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"American keyboard\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\"\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [\u0026quot;Hello\u0026quot;, \u0026quot;Alaska\u0026quot;, \u0026quot;Dad\u0026quot;, \u0026quot;Peace\u0026quot;]\r\n\u003cstrong\u003e输出:\u003c/strong\u003e [\u0026quot;Alaska\u0026quot;, \u0026quot;Dad\u0026quot;]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e你可以重复使用键盘上同一字符。\u003c/li\u003e\r\n\t\u003cli\u003e你可以假设输入的字符串将只包含字母。\u003c/li\u003e\r\n\u003c/ol\u003e","Status":"ac","Tags":[],"Submits":{"15006792":{"ID":"15006792","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006792/","Code":"class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        a, b, c = set('qwertyuiop'), set('asdfghjkl'), set('zxcvbnm')\n        f = lambda x,y : set(x.lower()).issubset(y)\n        return  [w for w in words if f(w,a) or f(w,b) or f(w,c)]\n        \n","Timestamp":"1552926425"},"1729281":{"ID":"1729281","StatusDisplay":"Accepted","Lang":"python","Runtime":"62 ms","Memory":"N/A","URL":"/submissions/detail/1729281/","Code":"class Solution(object):\r\n    def findWords(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        r = []\r\n        for word in words:\r\n            if self.word_in_row(word):\r\n                r.append(word)\r\n        return r\r\n    \r\n    def word_in_row(self,word):\r\n        row = [\"qwertyuiop\",\"asdfghjkl\",\"zxcvbnm\"]\r\n        temp = -1\r\n        for i in range(3):\r\n            if word.lower()[0] in row[i]:\r\n                temp = i\r\n        if temp != -1:\r\n            for a in word.lower():\r\n                if a not in row[temp]:\r\n                    return False\r\n            return True\r\n        else:\r\n            return False\r\n                \r\n            ","Timestamp":"1487942692"},"1729305":{"ID":"1729305","StatusDisplay":"Accepted","Lang":"python","Runtime":"119 ms","Memory":"N/A","URL":"/submissions/detail/1729305/","Code":"class Solution(object):\r\n    def findWords(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        r = []\r\n        row = [\"qwertyuiop\",\"asdfghjkl\",\"zxcvbnm\"]\r\n        for word in words:\r\n            for i in range(3):\r\n                flag = True\r\n                for a in word.lower():\r\n                    if a not in row[i]:\r\n                        flag = False\r\n                if flag:\r\n                    r.append(word)\r\n        return r\r\n                        \r\n                \r\n            ","Timestamp":"1487941039"},"1729415":{"ID":"1729415","StatusDisplay":"Accepted","Lang":"python","Runtime":"35 ms","Memory":"N/A","URL":"/submissions/detail/1729415/","Code":"class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        a, b, c = set('qwertyuiop'), set('asdfghjkl'), set('zxcvbnm')\n        f = lambda x,y : set(x.lower()).issubset(y)\n        return  [w for w in words if f(w,a) or f(w,b) or f(w,c)]\n        ","Timestamp":"1501257515"}}},{"questionId":"191","questionFrontendId":"191","Title":"Number of 1 Bits","TitleSlug":"number-of-1-bits","Content":"\u003cp\u003eWrite a function that takes an unsigned integer and return\u0026nbsp;the number of \u0026#39;1\u0026#39;\u0026nbsp;bits it has (also known as the \u003ca href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\"\u003eHamming weight\u003c/a\u003e).\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 00000000000000000000000000001011\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe input binary string \u003ccode\u003e\u003cstrong\u003e00000000000000000000000000001011\u003c/strong\u003e\u0026nbsp;has a total of three \u0026#39;1\u0026#39; bits.\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 00000000000000000000000010000000\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 1\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe input binary string \u003cstrong\u003e00000000000000000000000010000000\u003c/strong\u003e\u0026nbsp;has a total of one \u0026#39;1\u0026#39; bit.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 11111111111111111111111111111101\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 31\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe input binary string \u003cstrong\u003e11111111111111111111111111111101\u003c/strong\u003e has a total of thirty one \u0026#39;1\u0026#39; bits.\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eNote that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.\u003c/li\u003e\r\n\t\u003cli\u003eIn Java,\u0026nbsp;the compiler represents the signed integers using \u003ca href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\"\u003e2\u0026#39;s complement notation\u003c/a\u003e. Therefore, in \u003cstrong\u003eExample 3\u003c/strong\u003e\u0026nbsp;above the input represents the signed integer \u003ccode\u003e-3\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up\u003c/b\u003e:\u003c/p\u003e\r\n\r\n\u003cp\u003eIf this function is called many times, how would you optimize it?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"位1的个数","TranslatedContent":"\u003cp\u003e编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 \u0026lsquo;1\u0026rsquo;\u0026nbsp;的个数（也被称为\u003ca href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\" target=\"_blank\"\u003e汉明重量\u003c/a\u003e）。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e00000000000000000000000000001011\n\u003cstrong\u003e输出：\u003c/strong\u003e3\n\u003cstrong\u003e解释：\u003c/strong\u003e输入的二进制串 \u003ccode\u003e\u003cstrong\u003e00000000000000000000000000001011\u003c/strong\u003e\u0026nbsp;中，共有三位为 \u0026#39;1\u0026#39;。\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e00000000000000000000000010000000\n\u003cstrong\u003e输出：\u003c/strong\u003e1\n\u003cstrong\u003e解释：\u003c/strong\u003e输入的二进制串 \u003cstrong\u003e00000000000000000000000010000000\u003c/strong\u003e\u0026nbsp;中，共有一位为 \u0026#39;1\u0026#39;。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e11111111111111111111111111111101\n\u003cstrong\u003e输出：\u003c/strong\u003e31\n\u003cstrong\u003e解释：\u003c/strong\u003e输入的二进制串 \u003cstrong\u003e11111111111111111111111111111101\u003c/strong\u003e 中，共有 31 位为 \u0026#39;1\u0026#39;。\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。\u003c/li\u003e\n\t\u003cli\u003e在 Java 中，编译器使用\u003ca href=\"https://baike.baidu.com/item/二进制补码/5295284\" target=\"_blank\"\u003e二进制补码\u003c/a\u003e记法来表示有符号整数。因此，在上面的\u0026nbsp;\u003cstrong\u003e示例 3\u003c/strong\u003e\u0026nbsp;中，输入表示有符号整数 \u003ccode\u003e-3\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶\u003c/strong\u003e:\u003cbr\u003e\n如果多次调用这个函数，你将如何优化你的算法？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11338337":{"ID":"11338337","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"6.9 MB","URL":"/submissions/detail/11338337/","Code":"class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return str(bin(n)).count('1')","Timestamp":"1546849686"},"15006689":{"ID":"15006689","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006689/","Code":"class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return str(bin(n)).count('1')\n","Timestamp":"1552925375"}}},{"questionId":"231","questionFrontendId":"231","Title":"Power of Two","TitleSlug":"power-of-two","Content":"\u003cp\u003eGiven an integer, write a function to determine if it is a power of two.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true \r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e2\u003csup\u003e0\u003c/sup\u003e\u0026nbsp;= 1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 16\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e2\u003csup\u003e4\u003c/sup\u003e\u0026nbsp;= 16\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 218\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"2的幂","TranslatedContent":"\u003cp\u003e给定一个整数，编写一个函数来判断它是否是 2 的幂次方。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释: \u003c/strong\u003e2\u003csup\u003e0\u003c/sup\u003e\u0026nbsp;= 1\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 16\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释: \u003c/strong\u003e2\u003csup\u003e4\u003c/sup\u003e\u0026nbsp;= 16\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 218\n\u003cstrong\u003e输出:\u003c/strong\u003e false\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11170843":{"ID":"11170843","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"6.6 MB","URL":"/submissions/detail/11170843/","Code":"class Solution:\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n \u003e 0 and not (n \u0026 (n - 1))","Timestamp":"1546498594"},"15006711":{"ID":"15006711","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006711/","Code":"class Solution:\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        return n \u003e 0 and not (n \u0026 (n - 1))\n","Timestamp":"1552925547"}}},{"questionId":"145","questionFrontendId":"145","Title":"Binary Tree Postorder Traversal","TitleSlug":"binary-tree-postorder-traversal","Content":"\u003cp\u003eGiven a binary tree, return the \u003cem\u003epostorder\u003c/em\u003e traversal of its nodes\u0026#39; values.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[1,null,2,3]\u003c/code\u003e\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\u0026nbsp;\u003ccode\u003e[3,2,1]\u003c/code\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Recursive solution is trivial, could you do it iteratively?\u003c/p\u003e\r\n","Difficulty":"Hard","TranslatedTitle":"二叉树的后序遍历","TranslatedContent":"\u003cp\u003e给定一个二叉树，返回它的 \u003cem\u003e后序\u0026nbsp;\u003c/em\u003e遍历。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n\u003cstrong\u003e输出:\u003c/strong\u003e [3,2,1]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u0026nbsp;递归算法很简单，你可以通过迭代算法完成吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006673":{"ID":"15006673","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006673/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        def inner(node):\n            if not node:\n                return\n\n            inner(node.left)\n            inner(node.right)\n            res.append(node.val)\n        \n        inner(root)\n        return res\n        \n","Timestamp":"1552925264"},"7970527":{"ID":"7970527","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7970527/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        def inner(node):\n            if not node:\n                return\n\n            inner(node.left)\n            inner(node.right)\n            res.append(node.val)\n        \n        inner(root)\n        return res\n        ","Timestamp":"1538969390"}}},{"questionId":"240","questionFrontendId":"240","Title":"Search a 2D Matrix II","TitleSlug":"search-a-2d-matrix-ii","Content":"\u003cp\u003eWrite an efficient algorithm that searches for a value in an \u003ci\u003em\u003c/i\u003e x \u003ci\u003en\u003c/i\u003e matrix. This matrix has the following properties:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eIntegers in each row are sorted in ascending from left to right.\u003c/li\u003e\r\n\t\u003cli\u003eIntegers in each column are sorted in ascending from top to bottom.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eConsider the following matrix:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n[\r\n  [1,   4,  7, 11, 15],\r\n  [2,   5,  8, 12, 19],\r\n  [3,   6,  9, 16, 22],\r\n  [10, 13, 14, 17, 24],\r\n  [18, 21, 23, 26, 30]\r\n]\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eGiven\u0026nbsp;target\u0026nbsp;=\u0026nbsp;\u003ccode\u003e5\u003c/code\u003e, return\u0026nbsp;\u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven\u0026nbsp;target\u0026nbsp;=\u0026nbsp;\u003ccode\u003e20\u003c/code\u003e, return\u0026nbsp;\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"搜索二维矩阵 II","TranslatedContent":"\u003cp\u003e编写一个高效的算法来搜索\u0026nbsp;\u003cem\u003em\u003c/em\u003e\u0026nbsp;x\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e每行的元素从左到右升序排列。\u003c/li\u003e\n\t\u003cli\u003e每列的元素从上到下升序排列。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e现有矩阵 matrix 如下：\u003c/p\u003e\n\n\u003cpre\u003e[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n\u003c/pre\u003e\n\n\u003cp\u003e给定 target\u0026nbsp;=\u0026nbsp;\u003ccode\u003e5\u003c/code\u003e，返回\u0026nbsp;\u003ccode\u003etrue\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e给定\u0026nbsp;target\u0026nbsp;=\u0026nbsp;\u003ccode\u003e20\u003c/code\u003e，返回\u0026nbsp;\u003ccode\u003efalse\u003c/code\u003e。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15776722":{"ID":"15776722","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"17.6 MB","URL":"/submissions/detail/15776722/","Code":"class Solution:\n    def searchMatrix(self, m, target):\n        \"\"\"\n        :type m: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not m:\n            return False\n        w = len(m[0])\n        h = len(m)\n        x = w - 1\n        while x \u003e= 0:\n            if m[0][x] \u003c target:\n                for y in range(1, h):\n                    if m[y][x] == target:\n                        return True\n            elif m[0][x] == target:\n                return True\n            x -= 1\n        return False\n            ","Timestamp":"1553776006"}}},{"questionId":"299","questionFrontendId":"299","Title":"Bulls and Cows","TitleSlug":"bulls-and-cows","Content":"\u003cp\u003eYou are playing the following \u003ca href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\"\u003eBulls and Cows\u003c/a\u003e game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \u0026quot;bulls\u0026quot;) and how many digits match the secret number but locate in the wrong position (called \u0026quot;cows\u0026quot;). Your friend will use successive guesses and hints to eventually derive the secret number.\u003c/p\u003e\r\n\r\n\u003cp\u003eWrite a function to return a hint according to the secret number and friend\u0026#39;s guess, use \u003ccode\u003eA\u003c/code\u003e to indicate the bulls and \u003ccode\u003eB\u003c/code\u003e to indicate the cows.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003ePlease note that both secret number and friend\u0026#39;s guess may contain duplicate digits.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e secret = \u0026quot;1807\u0026quot;, guess = \u0026quot;7810\u0026quot;\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;1A3B\u0026quot;\r\n\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \u003ccode\u003e1\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e bull and \u003c/span\u003e\u003ccode\u003e3\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e cows. The bull is \u003c/span\u003e\u003ccode\u003e8\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e, the cows are \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e, \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e and \u003c/span\u003e\u003ccode\u003e7\u003cfont face=\"sans-serif, Arial, Verdana, Trebuchet MS\"\u003e.\u003c/font\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e secret = \u0026quot;1123\u0026quot;, guess = \u0026quot;0111\u0026quot;\r\n\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;1A1B\u0026quot;\r\n\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eThe 1st \u003ccode\u003e1 \u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003ein friend\u0026#39;s guess is a bull, the 2nd or 3rd \u003c/span\u003e\u003ccode\u003e1\u003c/code\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e is a cow\u003c/span\u003e\u003cspan style=\"font-family: sans-serif, Arial, Verdana, \u0026quot;Trebuchet MS\u0026quot;;\"\u003e.\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote: \u003c/strong\u003eYou may assume that the secret number and your friend\u0026#39;s guess only contain digits, and their lengths are always equal.\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"猜数字游戏","TranslatedContent":"\u003cp\u003e你正在和你的朋友玩\u0026nbsp;\u003ca href=\"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows\u0026amp;fromid=12003488\u0026amp;fr=aladdin\" target=\"_blank\"\u003e猜数字（Bulls and Cows）\u003c/a\u003e游戏：你写下一个数字让你的朋友猜。每次他猜测后，你给他一个提示，告诉他有多少位数字和确切位置都猜对了（称为\u0026ldquo;Bulls\u0026rdquo;, 公牛），有多少位数字猜对了但是位置不对（称为\u0026ldquo;Cows\u0026rdquo;, 奶牛）。你的朋友将会根据提示继续猜，直到猜出秘密数字。\u003c/p\u003e\n\n\u003cp\u003e请写出一个根据秘密数字和朋友的猜测数返回提示的函数，用 \u003ccode\u003eA\u003c/code\u003e 表示公牛，用\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;表示奶牛。\u003c/p\u003e\n\n\u003cp\u003e请注意秘密数字和朋友的猜测数都可能含有重复数字。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e secret = \u0026quot;1807\u0026quot;, guess = \u0026quot;7810\u0026quot;\n\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;1A3B\u0026quot;\n\n\u003cstrong\u003e解释:\u003c/strong\u003e \u003ccode\u003e1\u003c/code\u003e\u0026nbsp;公牛和\u0026nbsp;\u003ccode\u003e3\u003c/code\u003e\u0026nbsp;奶牛。公牛是 \u003ccode\u003e8\u003c/code\u003e，奶牛是 \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e\u0026nbsp;和 \u003ccode\u003e7\u003c/code\u003e。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e secret = \u0026quot;1123\u0026quot;, guess = \u0026quot;0111\u0026quot;\n\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;1A1B\u0026quot;\n\n\u003cstrong\u003e解释: \u003c/strong\u003e朋友猜测数中的第一个 \u003ccode\u003e1\u003c/code\u003e\u0026nbsp;是公牛，第二个或第三个 \u003ccode\u003e1\u003c/code\u003e\u0026nbsp;可被视为奶牛。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明: \u003c/strong\u003e你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"11160688":{"ID":"11160688","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"6.5 MB","URL":"/submissions/detail/11160688/","Code":"class Solution:\n    def getHint(self, secret, guess):\n        \"\"\"\n        :type secret: str\n        :type guess: str\n        :rtype: str\n        \"\"\"\n        A = 0\n        sa = []\n        sb = []\n        for a, b in zip(secret, guess):\n            if a == b:\n                A += 1\n            if a != b:\n                sa.append(a)\n                sb.append(b)\n        sa.sort()\n        sb.sort()\n        B = 0\n        i, j  = 0, 0\n        while i \u003c len(sa) and j \u003c len(sb):\n            if sa[i] == sb[j]:\n                B+=1\n                i+=1\n                j+=1\n            elif  sa[i] \u003c sb[j]:\n                i +=1\n            else:\n                j +=1\n        return f\"{A}A{B}B\"","Timestamp":"1546481317"},"16670263":{"ID":"16670263","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"13.2 MB","URL":"/submissions/detail/16670263/","Code":"class Solution:\n    def getHint(self, secret: str, guess: str) -\u003e str:\n        a = [0 for _ in range(10)]\n        b = [0 for _ in range(10)]\n        bulls = 0\n        for x in range(len(secret)):\n            if secret[x] != guess[x]:\n                a[int(secret[x])] += 1\n                b[int(guess[x])] += 1\n            else:\n                bulls += 1\n        cows = sum([min(a[x], b[x]) for x in range(10) if a[x] \u003e 0 and b[x] \u003e 0])\n           \n        return f'{bulls}A{cows}B'","Timestamp":"1552930138"}}},{"questionId":"406","questionFrontendId":"406","Title":"Queue Reconstruction by Height","TitleSlug":"queue-reconstruction-by-height","Content":"\u003cp\u003eSuppose you have a random list of people standing in a queue. Each person is described by a pair of integers \u003ccode\u003e(h, k)\u003c/code\u003e, where \u003ccode\u003eh\u003c/code\u003e is the height of the person and \u003ccode\u003ek\u003c/code\u003e is the number of people in front of this person who have a height greater than or equal to \u003ccode\u003eh\u003c/code\u003e. Write an algorithm to reconstruct the queue.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nThe number of people is less than 1,100.\r\n\u003c/p\u003e\r\n\r\n\u003cbr /\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample\u003c/b\u003e\r\n\u003cpre\u003e\r\nInput:\r\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\r\n\r\nOutput:\r\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Medium","TranslatedTitle":"根据身高重建队列","TranslatedContent":"\u003cp\u003e假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对\u003ccode\u003e(h, k)\u003c/code\u003e表示，其中\u003ccode\u003eh\u003c/code\u003e是这个人的身高，\u003ccode\u003ek\u003c/code\u003e是排在这个人前面且身高大于或等于\u003ccode\u003eh\u003c/code\u003e的人数。 编写一个算法来重建这个队列。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003cbr /\u003e\n总人数少于1100人。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n输入:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n输出:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"16670265":{"ID":"16670265","StatusDisplay":"Accepted","Lang":"python3","Runtime":"88 ms","Memory":"13.2 MB","URL":"/submissions/detail/16670265/","Code":"class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -\u003e List[List[int]]:\n        people.sort(key=lambda x:(-x[0],x[1]))\n        res = []\n        for p in people:\n            res.insert(p[1],p)\n        return res\n        ","Timestamp":"1552999748"}}},{"questionId":"909","questionFrontendId":"877","Title":"Stone Game","TitleSlug":"stone-game","Content":"\u003cp\u003eAlex and Lee play a game with piles of stones.\u0026nbsp; There are an even number of\u0026nbsp;piles \u003cstrong\u003earranged in a row\u003c/strong\u003e, and each pile has a positive integer number of stones \u003ccode\u003epiles[i]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe objective of the game is to end with the most\u0026nbsp;stones.\u0026nbsp; The total number of stones is odd, so there are no ties.\u003c/p\u003e\r\n\r\n\u003cp\u003eAlex and Lee take turns, with Alex starting first.\u0026nbsp; Each turn, a player\u0026nbsp;takes the entire pile of stones from either the beginning or the end of the row.\u0026nbsp; This continues until there are no more piles left, at which point the person with the most stones wins.\u003c/p\u003e\r\n\r\n\u003cp\u003eAssuming Alex and Lee play optimally, return \u003ccode\u003eTrue\u003c/code\u003e\u0026nbsp;if and only if Alex wins the game.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[5,3,4,5]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nAlex starts first, and can only take the first 5 or the last 5.\r\nSay he takes the first 5, so that the row becomes [3, 4, 5].\r\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\r\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\r\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= piles.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003epiles.length\u003c/code\u003e is even.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= piles[i] \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003esum(piles)\u003c/code\u003e is odd.\u003c/li\u003e\r\n\u003c/ol\u003e","Difficulty":"Medium","TranslatedTitle":"石子游戏","TranslatedContent":"\u003cp\u003e亚历克斯和李用几堆石子在做游戏。偶数堆石子\u003cstrong\u003e排成一行\u003c/strong\u003e，每堆都有正整数颗石子\u0026nbsp;\u003ccode\u003epiles[i]\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。\u003c/p\u003e\n\n\u003cp\u003e亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。\u003c/p\u003e\n\n\u003cp\u003e假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回\u0026nbsp;\u003ccode\u003etrue\u003c/code\u003e\u0026nbsp;，当李赢得比赛时返回\u0026nbsp;\u003ccode\u003efalse\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[5,3,4,5]\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003e\n亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。\n假设他取了前 5 颗，这一行就变成了 [3,4,5] 。\n如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。\n如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。\n这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e2 \u0026lt;= piles.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003epiles.length\u003c/code\u003e 是偶数。\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= piles[i] \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003esum(piles)\u003c/code\u003e\u0026nbsp;是奇数。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006903":{"ID":"15006903","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006903/","Code":"class Solution:\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        return True\n","Timestamp":"1552927619"},"8474895":{"ID":"8474895","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/8474895/","Code":"class Solution:\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        return True","Timestamp":"1540005810"}}},{"questionId":"62","questionFrontendId":"62","Title":"Unique Paths","TitleSlug":"unique-paths","Content":"\u003cp\u003eA robot is located at the top-left corner of a \u003cem\u003em\u003c/em\u003e x \u003cem\u003en\u003c/em\u003e grid (marked \u0026#39;Start\u0026#39; in the diagram below).\u003c/p\u003e\r\n\r\n\u003cp\u003eThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026#39;Finish\u0026#39; in the diagram below).\u003c/p\u003e\r\n\r\n\u003cp\u003eHow many possible unique paths are there?\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" /\u003e\u003cbr /\u003e\r\n\u003csmall\u003eAbove is a 7 x 3 grid. How many possible unique paths are there?\u003c/small\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003em\u003c/em\u003e and \u003cem\u003en\u003c/em\u003e will be at most 100.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e m = 3, n = 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\r\n1. Right -\u0026gt; Right -\u0026gt; Down\r\n2. Right -\u0026gt; Down -\u0026gt; Right\r\n3. Down -\u0026gt; Right -\u0026gt; Right\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e m = 7, n = 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 28\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"不同路径","TranslatedContent":"\u003cp\u003e一个机器人位于一个 \u003cem\u003em x n \u003c/em\u003e网格的左上角 （起始点在下图中标记为\u0026ldquo;Start\u0026rdquo; ）。\u003c/p\u003e\n\n\u003cp\u003e机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为\u0026ldquo;Finish\u0026rdquo;）。\u003c/p\u003e\n\n\u003cp\u003e问总共有多少条不同的路径？\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csmall\u003e例如，上图是一个7 x 3 的网格。有多少可能的路径？\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003cem\u003em\u003c/em\u003e\u0026nbsp;和 \u003cem\u003en \u003c/em\u003e的值均不超过 100。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e m = 3, n = 2\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解释:\u003c/strong\u003e\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -\u0026gt; 向右 -\u0026gt; 向下\n2. 向右 -\u0026gt; 向下 -\u0026gt; 向右\n3. 向下 -\u0026gt; 向右 -\u0026gt; 向右\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e m = 7, n = 3\n\u003cstrong\u003e输出:\u003c/strong\u003e 28\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006824":{"ID":"15006824","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006824/","Code":"from functools import reduce\nclass Solution:\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = lambda z: reduce(lambda x,y :x*y, range(1, z+1)) if z \u003e 0 else 1\n        return int(a(m+n-2)/(a(m-1)*a(n-1)))\n        \n        \n","Timestamp":"1552926953"},"7573035":{"ID":"7573035","StatusDisplay":"Accepted","Lang":"python3","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/7573035/","Code":"from functools import reduce\nclass Solution:\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if m == 1 or n == 1:\n            return 1\n        a = lambda z: reduce(lambda x,y :x*y, range(1, z+1)) if z \u003e 0 else 1\n        return int(a(m+n-2)/(a(m-1)*a(n-1)))\n        \n        ","Timestamp":"1536375554"},"7573041":{"ID":"7573041","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7573041/","Code":"from functools import reduce\nclass Solution:\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = lambda z: reduce(lambda x,y :x*y, range(1, z+1)) if z \u003e 0 else 1\n        return int(a(m+n-2)/(a(m-1)*a(n-1)))\n        \n        ","Timestamp":"1536375600"}}},{"questionId":"404","questionFrontendId":"404","Title":"Sum of Left Leaves","TitleSlug":"sum-of-left-leaves","Content":"\u003cp\u003eFind the sum of all left leaves in a given binary tree.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\nThere are two left leaves in the binary tree, with values \u003cb\u003e9\u003c/b\u003e and \u003cb\u003e15\u003c/b\u003e respectively. Return \u003cb\u003e24\u003c/b\u003e.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"左叶子之和","TranslatedContent":"\u003cp\u003e计算给定二叉树的所有左叶子之和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006768":{"ID":"15006768","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.7 MB","URL":"/submissions/detail/15006768/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root, is_left):\n            if not root:\n                return 0\n            if is_left and not root.left and not root.right:\n                return root.val\n            x = 0\n            return x + _inner(root.left, True) + _inner(root.right, False)\n        return _inner(root, False)\n\n\n","Timestamp":"1552926005"},"1729314":{"ID":"1729314","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/1729314/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root, is_left):\n            if not root:\n                return 0\n            if is_left and not root.left and not root.right:\n                return root.val\n            x = 0\n            return x + _inner(root.left, True) + _inner(root.right, False)\n        return _inner(root, False)\n","Timestamp":"1524144177"},"7572880":{"ID":"7572880","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/7572880/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def _inner(root, is_left):\n            if not root:\n                return 0\n            if is_left and not root.left and not root.right:\n                return root.val\n            x = 0\n            return x + _inner(root.left, True) + _inner(root.right, False)\n        return _inner(root, False)\n\n","Timestamp":"1536218849"}}},{"questionId":"1079","questionFrontendId":"1022","Title":"Sum of Root To Leaf Binary Numbers","TitleSlug":"sum-of-root-to-leaf-binary-numbers","Content":"\u003cp\u003eGiven a binary tree, each node has value \u003ccode\u003e0\u003c/code\u003e\u0026nbsp;or \u003ccode\u003e1\u003c/code\u003e.\u0026nbsp; Each root-to-leaf path represents a binary number starting with the most significant bit.\u0026nbsp; For example, if the path is \u003ccode\u003e0 -\u0026gt; 1 -\u0026gt; 1 -\u0026gt; 0 -\u0026gt; 1\u003c/code\u003e, then this could represent \u003ccode\u003e01101\u003c/code\u003e in binary, which is \u003ccode\u003e13\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor all leaves in the tree, consider the numbers represented by the path\u0026nbsp;from the root to that leaf.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the sum of these numbers.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cspan id=\"example-output-1\"\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png\" style=\"width: 304px; height: 200px;\" /\u003e\u003c/span\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[1,0,1,0,1,0,1]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e22\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe number of nodes in the tree is between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e1000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003enode.val is \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eThe answer will not exceed \u003ccode\u003e2^31 - 1\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"从根到叶的二进制数之和","TranslatedContent":"\u003cp\u003e给出一棵二叉树，其上每个结点的值都是\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;或\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为\u0026nbsp;\u003ccode\u003e0 -\u0026gt; 1 -\u0026gt; 1 -\u0026gt; 0 -\u0026gt; 1\u003c/code\u003e，那么它表示二进制数\u0026nbsp;\u003ccode\u003e01101\u003c/code\u003e，也就是\u0026nbsp;\u003ccode\u003e13\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n\n\u003cp\u003e对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。\u003c/p\u003e\n\n\u003cp\u003e以\u003cstrong\u003e\u0026nbsp;\u003ccode\u003e10^9 + 7\u003c/code\u003e\u003c/strong\u003e\u0026nbsp;为\u003cstrong\u003e模\u003c/strong\u003e，返回这些数字之和。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/05/sum-of-root-to-leaf-binary-numbers.png\" style=\"height: 200px; width: 304px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,0,1,0,1,0,1]\n\u003cstrong\u003e输出：\u003c/strong\u003e22\n\u003cstrong\u003e解释：\u003c/strong\u003e(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e树中的结点数介于 \u003ccode\u003e1\u003c/code\u003e 和 \u003ccode\u003e1000\u003c/code\u003e 之间。\u003c/li\u003e\n\t\u003cli\u003enode.val 为\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e 或\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16404070":{"ID":"16404070","StatusDisplay":"Accepted","Lang":"python3","Runtime":"100 ms","Memory":"14.7 MB","URL":"/submissions/detail/16404070/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def sumRootToLeaf(self, root: TreeNode) -\u003e int:\n        res = []\n        m = 10**9 + 7\n        if not root:\n            return 0\n        \n        def inner(node, value):\n            if not node:\n                return\n            if value is None:\n                new_value = node.val\n            else:\n                new_value = (value \u003c\u003c 1) + node.val\n            if not node.left and not node.right:\n                res.append(new_value)\n                return\n            inner(node.left,new_value)\n            inner(node.right,new_value)\n        inner(root, None)\n        return int(sum([x for x in res])) % m","Timestamp":"1554605931"},"16670336":{"ID":"16670336","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"14.7 MB","URL":"/submissions/detail/16670336/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def sumRootToLeaf(self, root: TreeNode) -\u003e int:\n        res = []\n        m = 10**9 + 7\n        if not root:\n            return 0\n        \n        def inner(node, value):\n            if not node:\n                return\n            if value is None:\n                new_value = node.val\n            else:\n                new_value = (value \u003c\u003c 1) + node.val\n            if not node.left and not node.right:\n                res.append(new_value)\n                return\n            inner(node.left,new_value)\n            inner(node.right,new_value)\n        inner(root, None)\n        return int(sum([x for x in res])) % m","Timestamp":"1554606066"}}},{"questionId":"70","questionFrontendId":"70","Title":"Climbing Stairs","TitleSlug":"climbing-stairs","Content":"\u003cp\u003eYou are climbing a stair case. It takes \u003cem\u003en\u003c/em\u003e steps to reach to the top.\u003c/p\u003e\r\n\r\n\u003cp\u003eEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Given \u003cem\u003en\u003c/em\u003e will be a positive integer.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two ways to climb to the top.\r\n1. 1 step + 1 step\r\n2. 2 steps\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 3\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are three ways to climb to the top.\r\n1. 1 step + 1 step + 1 step\r\n2. 1 step + 2 steps\r\n3. 2 steps + 1 step\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"爬楼梯","TranslatedContent":"\u003cp\u003e假设你正在爬楼梯。需要 \u003cem\u003en\u003c/em\u003e\u0026nbsp;阶你才能到达楼顶。\u003c/p\u003e\n\n\u003cp\u003e每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e给定 \u003cem\u003en\u003c/em\u003e 是一个正整数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e 2\n\u003cstrong\u003e输出：\u003c/strong\u003e 2\n\u003cstrong\u003e解释：\u003c/strong\u003e 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e 3\n\u003cstrong\u003e输出：\u003c/strong\u003e 3\n\u003cstrong\u003e解释：\u003c/strong\u003e 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006847":{"ID":"15006847","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006847/","Code":"class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b\n","Timestamp":"1552927151"},"1729311":{"ID":"1729311","StatusDisplay":"Accepted","Lang":"python3","Runtime":"36 ms","Memory":"N/A","URL":"/submissions/detail/1729311/","Code":"class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b\n","Timestamp":"1524471019"},"2292910":{"ID":"2292910","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"N/A","URL":"/submissions/detail/2292910/","Code":"class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b","Timestamp":"1526368334"},"2292952":{"ID":"2292952","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"N/A","URL":"/submissions/detail/2292952/","Code":"class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b\n","Timestamp":"1526368437"},"2292968":{"ID":"2292968","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/2292968/","Code":"class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b","Timestamp":"1526368465"},"2292993":{"ID":"2292993","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/2292993/","Code":"class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b\n","Timestamp":"1526368504"},"6590494":{"ID":"6590494","StatusDisplay":"Accepted","Lang":"python3","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/6590494/","Code":"class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a+b\n        return b","Timestamp":"1536137796"}}},{"questionId":"63","questionFrontendId":"63","Title":"Unique Paths II","TitleSlug":"unique-paths-ii","Content":"\u003cp\u003eA robot is located at the top-left corner of a \u003cem\u003em\u003c/em\u003e x \u003cem\u003en\u003c/em\u003e grid (marked \u0026#39;Start\u0026#39; in the diagram below).\u003c/p\u003e\r\n\r\n\u003cp\u003eThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026#39;Finish\u0026#39; in the diagram below).\u003c/p\u003e\r\n\r\n\u003cp\u003eNow consider if some obstacles are added to the grids. How many unique paths would there be?\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eAn obstacle and empty space is marked as \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0\u003c/code\u003e respectively in the grid.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003em\u003c/em\u003e and \u003cem\u003en\u003c/em\u003e will be at most 100.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\r\n\u003c/strong\u003e[\r\n\u0026nbsp; [0,0,0],\r\n\u0026nbsp; [0,1,0],\r\n\u0026nbsp; [0,0,0]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e\r\nThere is one obstacle in the middle of the 3x3 grid above.\r\nThere are two ways to reach the bottom-right corner:\r\n1. Right -\u0026gt; Right -\u0026gt; Down -\u0026gt; Down\r\n2. Down -\u0026gt; Down -\u0026gt; Right -\u0026gt; Right\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"不同路径 II","TranslatedContent":"\u003cp\u003e一个机器人位于一个 \u003cem\u003em x n \u003c/em\u003e网格的左上角 （起始点在下图中标记为\u0026ldquo;Start\u0026rdquo; ）。\u003c/p\u003e\n\n\u003cp\u003e机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为\u0026ldquo;Finish\u0026rdquo;）。\u003c/p\u003e\n\n\u003cp\u003e现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" style=\"height: 183px; width: 400px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e网格中的障碍物和空位置分别用 \u003ccode\u003e1\u003c/code\u003e 和 \u003ccode\u003e0\u003c/code\u003e 来表示。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003cem\u003em\u003c/em\u003e\u0026nbsp;和 \u003cem\u003en \u003c/em\u003e的值均不超过 100。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\n\u003c/strong\u003e[\n\u0026nbsp; [0,0,0],\n\u0026nbsp; [0,1,0],\n\u0026nbsp; [0,0,0]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释:\u003c/strong\u003e\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 \u003ccode\u003e2\u003c/code\u003e 条不同的路径：\n1. 向右 -\u0026gt; 向右 -\u0026gt; 向下 -\u0026gt; 向下\n2. 向下 -\u0026gt; 向下 -\u0026gt; 向右 -\u0026gt; 向右\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15764491":{"ID":"15764491","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"13.1 MB","URL":"/submissions/detail/15764491/","Code":"class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        w = len(obstacleGrid[0])\n        h = len(obstacleGrid)\n        \n        for x in range(w):\n            for y in range(h):\n                if x == 0 and y == 0:\n                    if obstacleGrid[y][x] != 1:\n                        obstacleGrid[y][x] = -1\n                    else:\n                        obstacleGrid[y][x] = 0\n                    continue\n                if obstacleGrid[y][x] == 1:\n                    obstacleGrid[y][x] = 0\n                    continue\n                a = obstacleGrid[y-1][x] if y \u003e 0 else 0\n                b = obstacleGrid[y][x-1] if x \u003e 0 else 0\n                obstacleGrid[y][x] = a + b\n        return -obstacleGrid[-1][-1]","Timestamp":"1553766123"},"15764509":{"ID":"15764509","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"13.2 MB","URL":"/submissions/detail/15764509/","Code":"class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        w = len(obstacleGrid[0])\n        h = len(obstacleGrid)\n        \n        for x in range(w):\n            for y in range(h):\n                if x == 0 and y == 0:\n                    if obstacleGrid[y][x] != 1:\n                        obstacleGrid[y][x] = -1\n                    else:\n                        obstacleGrid[y][x] = 0\n                    continue\n                if obstacleGrid[y][x] == 1:\n                    obstacleGrid[y][x] = 0\n                    continue\n                a = obstacleGrid[y-1][x] if y \u003e 0 else 0\n                b = obstacleGrid[y][x-1] if x \u003e 0 else 0\n                obstacleGrid[y][x] = a + b\n        return -obstacleGrid[-1][-1]","Timestamp":"1553766134"},"15764525":{"ID":"15764525","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"13.1 MB","URL":"/submissions/detail/15764525/","Code":"class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u003e int:\n        w = len(obstacleGrid[0])\n        h = len(obstacleGrid)\n        \n        for x in range(w):\n            for y in range(h):\n                if x == 0 and y == 0:\n                    if obstacleGrid[y][x] != 1:\n                        obstacleGrid[y][x] = -1\n                    else:\n                        obstacleGrid[y][x] = 0\n                    continue\n                if obstacleGrid[y][x] == 1:\n                    obstacleGrid[y][x] = 0\n                    continue\n                a = obstacleGrid[y-1][x] if y \u003e 0 else 0\n                b = obstacleGrid[y][x-1] if x \u003e 0 else 0\n                obstacleGrid[y][x] = a + b\n        return -obstacleGrid[-1][-1]","Timestamp":"1553766143"}}},{"questionId":"38","questionFrontendId":"38","Title":"Count and Say","TitleSlug":"count-and-say","Content":"\u003cp\u003eThe count-and-say sequence is the sequence of integers with the first five terms as following:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n1.     1\r\n2.     11\r\n3.     21\r\n4.     1211\r\n5.     111221\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003ccode\u003e1\u003c/code\u003e is read off as \u003ccode\u003e\u0026quot;one 1\u0026quot;\u003c/code\u003e or \u003ccode\u003e11\u003c/code\u003e.\u003cbr /\u003e\r\n\u003ccode\u003e11\u003c/code\u003e is read off as \u003ccode\u003e\u0026quot;two 1s\u0026quot;\u003c/code\u003e or \u003ccode\u003e21\u003c/code\u003e.\u003cbr /\u003e\r\n\u003ccode\u003e21\u003c/code\u003e is read off as \u003ccode\u003e\u0026quot;one 2\u003c/code\u003e, then \u003ccode\u003eone 1\u0026quot;\u003c/code\u003e or \u003ccode\u003e1211\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven an integer \u003ci\u003en\u003c/i\u003e\u0026nbsp;where 1 \u0026le; \u003cem\u003en\u003c/em\u003e \u0026le; 30, generate the \u003ci\u003en\u003c/i\u003e\u003csup\u003eth\u003c/sup\u003e term of the count-and-say sequence.\u003c/p\u003e\r\n\r\n\u003cp\u003eNote: Each term of the sequence of integers will be represented as a string.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 1\r\n\u003cb\u003eOutput:\u003c/b\u003e \u0026quot;1\u0026quot;\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 4\r\n\u003cb\u003eOutput:\u003c/b\u003e \u0026quot;1211\u0026quot;\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"报数","TranslatedContent":"\u003cp\u003e报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：\u003c/p\u003e\n\n\u003cpre\u003e1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;被读作\u0026nbsp;\u0026nbsp;\u003ccode\u003e\u0026quot;one 1\u0026quot;\u003c/code\u003e\u0026nbsp;\u0026nbsp;(\u003ccode\u003e\u0026quot;一个一\u0026quot;\u003c/code\u003e) , 即\u0026nbsp;\u003ccode\u003e11\u003c/code\u003e。\u003cbr\u003e\n\u003ccode\u003e11\u003c/code\u003e 被读作\u0026nbsp;\u003ccode\u003e\u0026quot;two 1s\u0026quot;\u003c/code\u003e\u0026nbsp;(\u003ccode\u003e\u0026quot;两个一\u0026quot;\u003c/code\u003e）, 即\u0026nbsp;\u003ccode\u003e21\u003c/code\u003e。\u003cbr\u003e\n\u003ccode\u003e21\u003c/code\u003e 被读作\u0026nbsp;\u003ccode\u003e\u0026quot;one 2\u0026quot;\u003c/code\u003e, \u0026nbsp;\u0026quot;\u003ccode\u003eone 1\u0026quot;\u003c/code\u003e\u0026nbsp;（\u003ccode\u003e\u0026quot;一个二\u0026quot;\u003c/code\u003e\u0026nbsp;,\u0026nbsp;\u0026nbsp;\u003ccode\u003e\u0026quot;一个一\u0026quot;\u003c/code\u003e)\u0026nbsp;, 即\u0026nbsp;\u003ccode\u003e1211\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e给定一个正整数 \u003cem\u003en\u003c/em\u003e（1 \u0026le;\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;\u0026le; 30），输出报数序列的第 \u003cem\u003en\u003c/em\u003e 项。\u003c/p\u003e\n\n\u003cp\u003e注意：整数顺序将表示为一个字符串。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 1\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;1\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 4\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;1211\u0026quot;\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006757":{"ID":"15006757","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.6 MB","URL":"/submissions/detail/15006757/","Code":"class Solution:\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        x = '1'\n        def inner(x,n):\n            if n == 0:\n                return '1'\n            c = x[0]\n            table = []\n            tv = 0\n            for t in x:\n                if t == c:  \n                    tv += 1\n                elif tv != 0:\n                    table.append((tv,c))\n                    tv = 1\n                    c = t\n            if tv:\n                table.append((tv, c))\n            res = \"\".join([str(x)+y for x,y in table])\n            if n == 1:\n                return res\n            return inner(res, n-1)\n        if n == 0:\n            return ''\n        else:\n            return inner(x, n-1)\n        \n","Timestamp":"1552925917"},"2277298":{"ID":"2277298","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/2277298/","Code":"class Solution:\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        x = '1'\n        def inner(x,n):\n            if n == 0:\n                return '1'\n            c = x[0]\n            table = []\n            tv = 0\n            for t in x:\n                if t == c:  \n                    tv += 1\n                elif tv != 0:\n                    table.append((tv,c))\n                    tv = 1\n                    c = t\n            if tv:\n                table.append((tv, c))\n            res = \"\".join([str(x)+y for x,y in table])\n            if n == 1:\n                return res\n            return inner(res, n-1)\n        if n == 0:\n            return ''\n        else:\n            return inner(x, n-1)\n        ","Timestamp":"1526313148"}}},{"questionId":"46","questionFrontendId":"46","Title":"Permutations","TitleSlug":"permutations","Content":"\u003cp\u003eGiven a collection of \u003cstrong\u003edistinct\u003c/strong\u003e integers, return all possible permutations.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [1,2,3]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e\r\n[\r\n  [1,2,3],\r\n  [1,3,2],\r\n  [2,1,3],\r\n  [2,3,1],\r\n  [3,1,2],\r\n  [3,2,1]\r\n]\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"全排列","TranslatedContent":"\u003cp\u003e给定一个\u003cstrong\u003e没有重复\u003c/strong\u003e数字的序列，返回其所有可能的全排列。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e [1,2,3]\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006778":{"ID":"15006778","StatusDisplay":"Accepted","Lang":"python","Runtime":"36 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006778/","Code":"class Solution:\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # 每次从已有数字中选取一个数字然后进入下一次迭代\n        res = []\n        def inner(num, nums):\n            for n in nums:\n                inner(num+[n], [i for i in nums if i !=n])\n            if not nums:\n                res.append(num)\n        \n        inner([], nums)\n        return res\n","Timestamp":"1552926089"},"7970419":{"ID":"7970419","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7970419/","Code":"class Solution:\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # 每次从已有数字中选取一个数字然后进入下一次迭代\n        res = []\n        def inner(num, nums):\n            for n in nums:\n                inner(num+[n], [i for i in nums if i !=n])\n            if not nums:\n                res.append(num)\n        \n        inner([], nums)\n        return res","Timestamp":"1538969233"}}},{"questionId":"987","questionFrontendId":"950","Title":"Reveal Cards In Increasing Order","TitleSlug":"reveal-cards-in-increasing-order","Content":"\u003cp\u003eIn a deck of cards, every card has a unique integer.\u0026nbsp; You can order the deck in\u0026nbsp;any order you want.\u003c/p\u003e\r\n\r\n\u003cp\u003eInitially, all the cards start face down (unrevealed) in one deck.\u003c/p\u003e\r\n\r\n\u003cp\u003eNow, you do the following steps repeatedly, until all cards are revealed:\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eTake the top card of the deck, reveal it, and take it out of the deck.\u003c/li\u003e\r\n\t\u003cli\u003eIf there are still cards in the deck, put the next top card of the deck at\u0026nbsp;the bottom of the deck.\u003c/li\u003e\r\n\t\u003cli\u003eIf there are still unrevealed cards, go back to step 1.\u0026nbsp; Otherwise, stop.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cp\u003eReturn an ordering of the deck that would reveal the cards\u0026nbsp;in \u003cstrong\u003eincreasing order.\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eThe first entry in the answer is considered to be the top of the deck.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[17,13,11,2,3,5,7]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[2,13,3,11,5,17,7]\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nWe get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.\r\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\r\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\r\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\r\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\r\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\r\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\r\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\r\nWe reveal 17.\r\nSince all the cards revealed are in increasing order, the answer is correct.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA[i] != A[j]\u003c/code\u003e\u0026nbsp;for all\u0026nbsp;\u003ccode\u003ei != j\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"按递增顺序显示卡牌","TranslatedContent":"\u003cp\u003e牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。\u003c/p\u003e\n\n\u003cp\u003e最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。\u003c/p\u003e\n\n\u003cp\u003e现在，重复执行以下步骤，直到显示所有卡牌为止：\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。\u003c/li\u003e\n\t\u003cli\u003e如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。\u003c/li\u003e\n\t\u003cli\u003e如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e返回能以\u003cstrong\u003e递增顺序\u003c/strong\u003e显示卡牌的牌组顺序。\u003c/p\u003e\n\n\u003cp\u003e答案中的第一张牌被认为处于牌堆顶部。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[17,13,11,2,3,5,7]\n\u003cstrong\u003e输出：\u003c/strong\u003e[2,13,3,11,5,17,7]\n\u003cstrong\u003e解释：\n\u003c/strong\u003e我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。\n重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。\n我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。\n我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。\n我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。\n我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。\n我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。\n我们展示 13，然后将 17 移到底部。牌组现在是 [17]。\n我们显示 17。\n由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A[i] \u0026lt;= 10^6\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e对于所有的\u0026nbsp;\u003ccode\u003ei != j\u003c/code\u003e，\u003ccode\u003eA[i] != A[j]\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"10938459":{"ID":"10938459","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"6.7 MB","URL":"/submissions/detail/10938459/","Code":"class Solution:\n    def deckRevealedIncreasing(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: List[int]\n        \"\"\"\n        deck.sort(reverse=True)\n        \n        res = []\n        for x in deck:\n            if res:\n                res = res[-1:] + res[0:-1]\n            res = [x] + res\n        return res\n        ","Timestamp":"1545898478"},"15006932":{"ID":"15006932","StatusDisplay":"Accepted","Lang":"python","Runtime":"96 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006932/","Code":"class Solution:\n    def deckRevealedIncreasing(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: List[int]\n        \"\"\"\n        deck.sort(reverse=True)\n        \n        res = []\n        for x in deck:\n            if res:\n                res = res[-1:] + res[0:-1]\n            res = [x] + res\n        return res\n        \n","Timestamp":"1552927836"}}},{"questionId":"64","questionFrontendId":"64","Title":"Minimum Path Sum","TitleSlug":"minimum-path-sum","Content":"\u003cp\u003eGiven a \u003cem\u003em\u003c/em\u003e x \u003cem\u003en\u003c/em\u003e grid filled with non-negative numbers, find a path from top left to bottom right which \u003cem\u003eminimizes\u003c/em\u003e the sum of all numbers along its path.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can only move either down or right at any point in time.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e\r\n[\r\n\u0026nbsp; [1,3,1],\r\n  [1,5,1],\r\n  [4,2,1]\r\n]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 7\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Because the path 1\u0026rarr;3\u0026rarr;1\u0026rarr;1\u0026rarr;1 minimizes the sum.\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"最小路径和","TranslatedContent":"\u003cp\u003e给定一个包含非负整数的 \u003cem\u003em\u003c/em\u003e\u0026nbsp;x\u0026nbsp;\u003cem\u003en\u003c/em\u003e\u0026nbsp;网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e每次只能向下或者向右移动一步。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e\n[\n\u0026nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n\u003cstrong\u003e输出:\u003c/strong\u003e 7\n\u003cstrong\u003e解释:\u003c/strong\u003e 因为路径 1\u0026rarr;3\u0026rarr;1\u0026rarr;1\u0026rarr;1 的总和最小。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006829":{"ID":"15006829","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"11.8 MB","URL":"/submissions/detail/15006829/","Code":"class Solution:\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        h = len(grid)\n        w = len(grid[0])\n        for i in range(1, h):\n            grid[i][0] += grid[i-1][0]\n        for i in range(1, w):\n            grid[0][i] += grid[0][i-1]\n        for i in range(1, h):\n            for j in range(1, w):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[-1][-1]\n","Timestamp":"1552926979"},"8459295":{"ID":"8459295","StatusDisplay":"Accepted","Lang":"python3","Runtime":"84 ms","Memory":"N/A","URL":"/submissions/detail/8459295/","Code":"class Solution:\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        h = len(grid)\n        w = len(grid[0])\n        for i in range(1, h):\n            grid[i][0] += grid[i-1][0]\n        for i in range(1, w):\n            grid[0][i] += grid[0][i-1]\n        for i in range(1, h):\n            for j in range(1, w):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[-1][-1]","Timestamp":"1539948188"},"8459300":{"ID":"8459300","StatusDisplay":"Accepted","Lang":"python3","Runtime":"68 ms","Memory":"N/A","URL":"/submissions/detail/8459300/","Code":"class Solution:\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        h = len(grid)\n        w = len(grid[0])\n        for i in range(1, h):\n            grid[i][0] += grid[i-1][0]\n        for i in range(1, w):\n            grid[0][i] += grid[0][i-1]\n        for i in range(1, h):\n            for j in range(1, w):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[-1][-1]","Timestamp":"1539948194"}}},{"questionId":"24","questionFrontendId":"24","Title":"Swap Nodes in Pairs","TitleSlug":"swap-nodes-in-pairs","Content":"\u003cp\u003eGiven a\u0026nbsp;linked list, swap every two adjacent nodes and return its head.\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may \u003cstrong\u003enot\u003c/strong\u003e modify the values in the list\u0026#39;s nodes, only nodes itself may be changed.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven \u003ccode\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;4\u003c/code\u003e, you should return the list as \u003ccode\u003e2-\u0026gt;1-\u0026gt;4-\u0026gt;3\u003c/code\u003e.\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"两两交换链表中的节点","TranslatedContent":"\u003cp\u003e给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e你不能只是单纯的改变节点内部的值\u003c/strong\u003e，而是需要实际的进行节点交换。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定 \u003ccode\u003e1-\u0026gt;2-\u0026gt;3-\u0026gt;4\u003c/code\u003e, 你应该返回 \u003ccode\u003e2-\u0026gt;1-\u0026gt;4-\u0026gt;3\u003c/code\u003e.\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11139571":{"ID":"11139571","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11139571/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head and head.next:\n            t = self.swapPairs(head.next.next)\n        else:\n            return head\n        # print(t.val)\n        a = head\n        b = head.next\n        b.next = a\n        a.next = t\n        return b","Timestamp":"1546421352"},"15006718":{"ID":"15006718","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006718/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if head and head.next:\n            t = self.swapPairs(head.next.next)\n        else:\n            return head\n        # print(t.val)\n        a = head\n        b = head.next\n        b.next = a\n        a.next = t\n        return b\n","Timestamp":"1552925597"}}},{"questionId":"476","questionFrontendId":"476","Title":"Number Complement","TitleSlug":"number-complement","Content":"\u003cp\u003eGiven a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr\u003e\r\n\u003col\u003e\r\n\u003cli\u003eThe given integer is guaranteed to fit within the range of a 32-bit signed integer.\u003c/li\u003e\r\n\u003cli\u003eYou could assume no leading zero bit in the integer’s binary representation.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 5\r\n\u003cb\u003eOutput:\u003c/b\u003e 2\r\n\u003cb\u003eExplanation:\u003c/b\u003e The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e 1\r\n\u003cb\u003eOutput:\u003c/b\u003e 0\r\n\u003cb\u003eExplanation:\u003c/b\u003e The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"数字的补数","TranslatedContent":"\u003cp\u003e给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意:\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给定的整数保证在32位带符号整数的范围内。\u003c/li\u003e\n\t\u003cli\u003e你可以假定二进制数不包含前导零位。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 5\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释:\u003c/strong\u003e 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 1\n\u003cstrong\u003e输出:\u003c/strong\u003e 0\n\u003cstrong\u003e解释:\u003c/strong\u003e 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006787":{"ID":"15006787","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.6 MB","URL":"/submissions/detail/15006787/","Code":"class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return num ^ (2 ** (len(bin(num)) - 2) -1)\n","Timestamp":"1552926384"},"1729269":{"ID":"1729269","StatusDisplay":"Accepted","Lang":"python","Runtime":"39 ms","Memory":"N/A","URL":"/submissions/detail/1729269/","Code":"class Solution(object):\r\n    def findComplement(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        return num ^ ((1\u003c\u003cnum.bit_length())-1)","Timestamp":"1487937788"},"1729383":{"ID":"1729383","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"N/A","URL":"/submissions/detail/1729383/","Code":"class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        return num ^ (2 ** (len(bin(num)) - 2) -1)","Timestamp":"1501255994"}}},{"questionId":"1005","questionFrontendId":"965","Title":"Univalued Binary Tree","TitleSlug":"univalued-binary-tree","Content":"\u003cp\u003eA binary tree is \u003cem\u003eunivalued\u003c/em\u003e if every node in the tree has the same value.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e\u0026nbsp;if and only if the given tree is univalued.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png\" style=\"width: 265px; height: 172px;\" /\u003e\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[1,1,1,1,1,null,1]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png\" style=\"width: 198px; height: 169px;\" /\u003e\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[2,2,2,5,2]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003efalse\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe number of nodes in the given tree will be in the range \u003ccode\u003e[1, 100]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach node\u0026#39;s value will be an integer in the range \u003ccode\u003e[0, 99]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"单值二叉树","TranslatedContent":"\u003cp\u003e如果二叉树每个节点都具有相同的值，那么该二叉树就是\u003cem\u003e单值\u003c/em\u003e二叉树。\u003c/p\u003e\n\n\u003cp\u003e只有给定的树是单值二叉树时，才返回\u0026nbsp;\u003ccode\u003etrue\u003c/code\u003e；否则返回 \u003ccode\u003efalse\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png\" style=\"height: 159px; width: 200px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,1,1,1,1,null,1]\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png\" style=\"height: 158px; width: 200px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[2,2,2,5,2]\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e给定树的节点数范围是\u0026nbsp;\u003ccode\u003e[1, 100]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个节点的值都是整数，范围为\u0026nbsp;\u003ccode\u003e[0, 99]\u003c/code\u003e\u0026nbsp;。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"11049616":{"ID":"11049616","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11049616/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isUnivalTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(root, val):\n            if not root:\n                return True\n            if root.val!= val:\n                return False\n            return inner(root.left, val) and inner(root.right, val)\n        \n        return inner(root, root.val)\n            \n        ","Timestamp":"1546137356"},"15006936":{"ID":"15006936","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006936/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isUnivalTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(root, val):\n            if not root:\n                return True\n            if root.val!= val:\n                return False\n            return inner(root.left, val) and inner(root.right, val)\n        \n        return inner(root, root.val)\n            \n        \n","Timestamp":"1552927867"}}},{"questionId":"175","questionFrontendId":"175","Title":"Combine Two Tables","TitleSlug":"combine-two-tables","Content":"\u003cp\u003eTable: \u003ccode\u003ePerson\u003c/code\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| PersonId    | int     |\r\n| FirstName   | varchar |\r\n| LastName    | varchar |\r\n+-------------+---------+\r\nPersonId is the primary key column for this table.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eTable: \u003ccode\u003eAddress\u003c/code\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| AddressId   | int     |\r\n| PersonId    | int     |\r\n| City        | varchar |\r\n| State       | varchar |\r\n+-------------+---------+\r\nAddressId is the primary key column for this table.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eWrite a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nFirstName, LastName, City, State\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"组合两个表","TranslatedContent":"\u003cp\u003e表1: \u003ccode\u003ePerson\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n\u003c/pre\u003e\n\n\u003cp\u003e表2: \u003ccode\u003eAddress\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供\u0026nbsp;person 的以下信息：\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cpre\u003eFirstName, LastName, City, State\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17546539":{"ID":"17546539","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"706 ms","Memory":"N/A","URL":"/submissions/detail/17546539/","Code":"# Write your MySQL query statement below\nselect p.FirstName, p.LastName, a.City, a.State \nfrom Person as p\nleft join Address as a \non a.PersonId = p.PersonId;","Timestamp":"1555998531"},"17546580":{"ID":"17546580","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"675 ms","Memory":"N/A","URL":"/submissions/detail/17546580/","Code":"# Write your MySQL query statement below\nselect p.FirstName, p.LastName, a.City, a.State \nfrom Person as p\nleft join Address as a \non a.PersonId = p.PersonId;","Timestamp":"1555998577"}}},{"questionId":"557","questionFrontendId":"557","Title":"Reverse Words in a String III","TitleSlug":"reverse-words-in-a-string-iii","Content":"\u003cp\u003eGiven a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \"Let's take LeetCode contest\"\r\n\u003cb\u003eOutput:\u003c/b\u003e \"s'teL ekat edoCteeL tsetnoc\"\r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\nIn the string, each word is separated by single space and there will not be any extra space in the string.\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"反转字符串中的单词 III","TranslatedContent":"\u003cp\u003e给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n输入: \u0026quot;Let\u0026#39;s take LeetCode contest\u0026quot;\n输出: \u0026quot;s\u0026#39;teL ekat edoCteeL tsetnoc\u0026quot;\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u0026nbsp;\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006803":{"ID":"15006803","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"12 MB","URL":"/submissions/detail/15006803/","Code":"class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ' '.join(x[::-1] for x in s.split())\n        \n\n","Timestamp":"1552926790"},"1729206":{"ID":"1729206","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729206/","Code":"class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ' '.join(x[::-1] for x in s.split())\n        ","Timestamp":"1501257639"},"7572935":{"ID":"7572935","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7572935/","Code":"class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return ' '.join(x[::-1] for x in s.split())\n        \n","Timestamp":"1536218943"}}},{"questionId":"196","questionFrontendId":"196","Title":"Delete Duplicate Emails","TitleSlug":"delete-duplicate-emails","Content":"\u003cp\u003eWrite a SQL query to \u003cstrong\u003edelete\u003c/strong\u003e all duplicate email entries in a table named \u003ccode\u003ePerson\u003c/code\u003e, keeping only unique emails based on its \u003ci\u003esmallest\u003c/i\u003e \u003cb\u003eId\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n| 3  | john@example.com |\r\n+----+------------------+\r\nId is the primary key column for this table.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eFor example, after running your query, the above \u003ccode\u003ePerson\u003c/code\u003e table should have the following rows:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n+----+------------------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eYour output is the whole \u003ccode\u003ePerson\u003c/code\u003e\u0026nbsp;table after executing your sql. Use \u003ccode\u003edelete\u003c/code\u003e statement.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"删除重复的电子邮箱","TranslatedContent":"\u003cp\u003e编写一个 SQL 查询，来删除\u0026nbsp;\u003ccode\u003ePerson\u003c/code\u003e\u0026nbsp;表中所有重复的电子邮箱，重复的邮箱里只保留\u0026nbsp;\u003cstrong\u003eId\u0026nbsp;\u003c/strong\u003e\u003cem\u003e最小\u0026nbsp;\u003c/em\u003e的那个。\u003c/p\u003e\n\n\u003cpre\u003e+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId 是这个表的主键。\n\u003c/pre\u003e\n\n\u003cp\u003e例如，在运行你的查询语句之后，上面的 \u003ccode\u003ePerson\u003c/code\u003e 表应返回以下几行:\u003c/p\u003e\n\n\u003cpre\u003e+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17547622":{"ID":"17547622","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"1659 ms","Memory":"N/A","URL":"/submissions/detail/17547622/","Code":"# Write your MySQL query statement below\ndelete p1 from person as p1, \n    person as p2 \nwhere p2.Email = p1.Email and p2.Id \u003c p1.Id\n","Timestamp":"1555999780"},"17547740":{"ID":"17547740","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"1219 ms","Memory":"N/A","URL":"/submissions/detail/17547740/","Code":"# Write your MySQL query statement below\ndelete p1 from person as p1, \n    person as p2 \nwhere p2.Email = p1.Email and p2.Id \u003c p1.Id\n","Timestamp":"1555999897"}}},{"questionId":"448","questionFrontendId":"448","Title":"Find All Numbers Disappeared in an Array","TitleSlug":"find-all-numbers-disappeared-in-an-array","Content":"\u003cp\u003eGiven an array of integers where 1 \u0026le; a[i] \u0026le; \u003ci\u003en\u003c/i\u003e (\u003ci\u003en\u003c/i\u003e = size of array), some elements appear twice and others appear once.\u003c/p\u003e\r\n\r\n\u003cp\u003eFind all the elements of [1, \u003ci\u003en\u003c/i\u003e] inclusive that do not appear in this array.\u003c/p\u003e\r\n\r\n\u003cp\u003eCould you do it without extra space and in O(\u003ci\u003en\u003c/i\u003e) runtime? You may assume the returned list does not count as extra space.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e\r\n[4,3,2,7,8,2,3,1]\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e\r\n[5,6]\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"找到所有数组中消失的数字","TranslatedContent":"\u003cp\u003e给定一个范围在\u0026nbsp; 1 \u0026le; a[i] \u0026le; \u003cem\u003en\u003c/em\u003e (\u0026nbsp;\u003cem\u003en\u003c/em\u003e = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。\u003c/p\u003e\n\n\u003cp\u003e找到所有在 [1, \u003cem\u003en\u003c/em\u003e] 范围之间没有出现在数组中的数字。\u003c/p\u003e\n\n\u003cp\u003e您能在不使用额外空间且时间复杂度为\u003cem\u003eO(n)\u003c/em\u003e的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e\n[4,3,2,7,8,2,3,1]\n\n\u003cstrong\u003e输出:\u003c/strong\u003e\n[5,6]\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006785":{"ID":"15006785","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"18.8 MB","URL":"/submissions/detail/15006785/","Code":"class Solution:\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list({x for x in range(1,len(nums)+1)} - set(nums)) if nums else []\n\n","Timestamp":"1552926344"},"1729322":{"ID":"1729322","StatusDisplay":"Accepted","Lang":"python3","Runtime":"262 ms","Memory":"N/A","URL":"/submissions/detail/1729322/","Code":"class Solution:\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if nums:\n            return list({x for x in range(1,len(nums)+1)} - set(nums))\n        else: return []\n","Timestamp":"1509431938"},"1729372":{"ID":"1729372","StatusDisplay":"Accepted","Lang":"python3","Runtime":"252 ms","Memory":"N/A","URL":"/submissions/detail/1729372/","Code":"class Solution:\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list({x for x in range(1,len(nums)+1)} - set(nums)) if nums else []\n","Timestamp":"1509432339"}}},{"questionId":"813","questionFrontendId":"797","Title":"All Paths From Source to Target","TitleSlug":"all-paths-from-source-to-target","Content":"\u003cp\u003eGiven a directed, acyclic graph of \u003ccode\u003eN\u003c/code\u003e nodes.\u0026nbsp; Find all possible paths from node \u003ccode\u003e0\u003c/code\u003e to node \u003ccode\u003eN-1\u003c/code\u003e, and return them in any order.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe graph is given as follows:\u0026nbsp; the nodes are 0, 1, ..., graph.length - 1.\u0026nbsp; graph[i] is a list of all nodes j for which the edge (i, j) exists.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e [[1,2], [3], [3], []] \r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [[0,1,3],[0,2,3]] \r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e The graph looks like this:\r\n0---\u0026gt;1\r\n|    |\r\nv    v\r\n2---\u0026gt;3\r\nThere are two paths: 0 -\u0026gt; 1 -\u0026gt; 3 and 0 -\u0026gt; 2 -\u0026gt; 3.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe number of nodes in the graph will be in the range \u003ccode\u003e[2, 15]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eYou can print different paths in any order, but you should keep the order of nodes inside one path.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"所有可能的路径","TranslatedContent":"\u003cp\u003e给一个有\u0026nbsp;\u003ccode\u003en\u003c/code\u003e\u0026nbsp;个结点的有向无环图，找到所有从\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;到\u0026nbsp;\u003ccode\u003en-1\u003c/code\u003e\u0026nbsp;的路径并输出（不要求按顺序）\u003c/p\u003e\n\n\u003cp\u003e二维数组的第 i 个数组中的单元都表示有向图中 i 号结点所能到达的下一些结点（译者注：有向图是有方向的，即规定了a\u0026rarr;b你就不能从b\u0026rarr;a）空就是没有下一个结点了。\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [[1,2], [3], [3], []] \n\u003cstrong\u003e输出:\u003c/strong\u003e [[0,1,3],[0,2,3]] \n\u003cstrong\u003e解释:\u003c/strong\u003e 图是这样的:\n0---\u0026gt;1\n|    |\nv    v\n2---\u0026gt;3\n这有两条路: 0 -\u0026gt; 1 -\u0026gt; 3 和 0 -\u0026gt; 2 -\u0026gt; 3.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e结点的数量会在范围\u0026nbsp;\u003ccode\u003e[2, 15]\u003c/code\u003e\u0026nbsp;内。\u003c/li\u003e\n\t\u003cli\u003e你可以把路径以任意顺序输出，但在路径内的结点的顺序必须保证。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006871":{"ID":"15006871","StatusDisplay":"Accepted","Lang":"python","Runtime":"184 ms","Memory":"12.6 MB","URL":"/submissions/detail/15006871/","Code":"class Solution:\n    def allPathsSourceTarget(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        N = len(graph)\n        \n        def inner(node):\n            if node == N-1: \n                return [[N-1]]\n            \n            ans = []\n            for nei in graph[node]:\n                for path in inner(nei):\n                    ans.append([node]+path)\n            return ans\n        \n        return inner(0)\n        \n","Timestamp":"1552927374"},"7885562":{"ID":"7885562","StatusDisplay":"Accepted","Lang":"python3","Runtime":"200 ms","Memory":"N/A","URL":"/submissions/detail/7885562/","Code":"class Solution:\n    def allPathsSourceTarget(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        N = len(graph)\n        \n        def inner(node):\n            if node == N-1: \n                return [[N-1]]\n            \n            ans = []\n            for nei in graph[node]:\n                for path in inner(nei):\n                    ans.append([node]+path)\n            return ans\n        \n        return inner(0)\n        ","Timestamp":"1538215879"}}},{"questionId":"908","questionFrontendId":"876","Title":"Middle of the Linked List","TitleSlug":"middle-of-the-linked-list","Content":"\u003cp\u003eGiven a non-empty, singly\u0026nbsp;linked list with head node \u003ccode\u003ehead\u003c/code\u003e, return\u0026nbsp;a\u0026nbsp;middle node of linked list.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf there are two middle nodes, return the second middle node.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[1,2,3,4,5]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003eNode 3 from this list (Serialization: \u003cspan id=\"example-output-1\"\u003e[3,4,5]\u003c/span\u003e)\r\nThe returned node has value 3.  (The judge\u0026#39;s serialization of this node is [3,4,5]).\r\nNote that we returned a ListNode object ans, such that:\r\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-2-1\"\u003e[1,2,3,4,5,6]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003eNode 4 from this list (Serialization: \u003cspan id=\"example-output-2\"\u003e[4,5,6]\u003c/span\u003e)\r\nSince the list has two middle nodes with values 3 and 4, we return the second one.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe number of nodes in the given list will be between \u003ccode\u003e1\u003c/code\u003e\u0026nbsp;and \u003ccode\u003e100\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"链表的中间结点","TranslatedContent":"\u003cp\u003e给定一个带有头结点\u0026nbsp;\u003ccode\u003ehead\u003c/code\u003e\u0026nbsp;的非空单链表，返回链表的中间结点。\u003c/p\u003e\n\n\u003cp\u003e如果有两个中间结点，则返回第二个中间结点。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,2,3,4,5]\n\u003cstrong\u003e输出：\u003c/strong\u003e此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[1,2,3,4,5,6]\n\u003cstrong\u003e输出：\u003c/strong\u003e此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给定链表的结点数介于\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e\u0026nbsp;之间。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006901":{"ID":"15006901","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"10.8 MB","URL":"/submissions/detail/15006901/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return\n        fast = head\n        slow = head\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n            if fast.next:\n                fast = fast.next\n            else:\n                break\n        return slow\n        \n","Timestamp":"1552927609"},"7984889":{"ID":"7984889","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"N/A","URL":"/submissions/detail/7984889/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return\n        fast = head\n        slow = head\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n            if fast.next:\n                fast = fast.next\n            else:\n                break\n        return slow\n        ","Timestamp":"1538987251"}}},{"questionId":"204","questionFrontendId":"204","Title":"Count Primes","TitleSlug":"count-primes","Content":"\u003cp\u003eCount the number of prime numbers less than a non-negative number, \u003cb\u003e\u003ci\u003en\u003c/i\u003e\u003c/b\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 10\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 4\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"计数质数","TranslatedContent":"\u003cp\u003e统计所有小于非负整数\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e的质数的数量。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 10\n\u003cstrong\u003e输出:\u003c/strong\u003e 4\n\u003cstrong\u003e解释:\u003c/strong\u003e 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006696":{"ID":"15006696","StatusDisplay":"Accepted","Lang":"python","Runtime":"636 ms","Memory":"93.9 MB","URL":"/submissions/detail/15006696/","Code":"class Solution:\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n \u003c= 2:\n            return 0\n        res = [True]*n\n        res[0], res[1] = False, False\n        \n        for i in range(2, n):\n            if i * i \u003e= n:\n                break\n                \n            if not res[i]:\n                continue\n            \n            for j in range(i*i, n, i):\n                res[j] = False\n        \n        return sum(res)\n                        \n        \n","Timestamp":"1552925425"},"7888172":{"ID":"7888172","StatusDisplay":"Accepted","Lang":"python3","Runtime":"468 ms","Memory":"N/A","URL":"/submissions/detail/7888172/","Code":"class Solution:\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n \u003c= 2:\n            return 0\n        res = [True]*n\n        res[0], res[1] = False, False\n        \n        for i in range(2, n):\n            if i * i \u003e= n:\n                break\n                \n            if not res[i]:\n                continue\n            \n            for j in range(i*i, n, i):\n                res[j] = False\n        \n        return sum(res)\n                        \n        ","Timestamp":"1538729530"},"7888332":{"ID":"7888332","StatusDisplay":"Accepted","Lang":"python3","Runtime":"672 ms","Memory":"N/A","URL":"/submissions/detail/7888332/","Code":"class Solution:\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n \u003c= 2:\n            return 0\n        res = [True]*n\n        res[0], res[1] = False, False\n        \n        for i in range(2, n):\n            if i * i \u003e= n:\n                break\n                \n            if not res[i]:\n                continue\n            \n            for j in range(i*i, n, i):\n                res[j] = False\n        \n        return sum(res)\n                        \n        ","Timestamp":"1538729772"}}},{"questionId":"830","questionFrontendId":"812","Title":"Largest Triangle Area","TitleSlug":"largest-triangle-area","Content":"\u003cp\u003eYou have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eExample:\u003c/strong\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e \r\nThe five points are show in the figure below. The red triangle is the largest.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNotes: \u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= points.length \u0026lt;= 50\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eNo points will be duplicated.\u003c/li\u003e\r\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003e-50 \u0026lt;= points[i][j] \u0026lt;= 50\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eAnswers within\u0026nbsp;\u003ccode\u003e10^-6\u003c/code\u003e\u0026nbsp;of the true value will be accepted as correct.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"最大三角形面积","TranslatedContent":"\u003cp\u003e给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e示例:\u003c/strong\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003cstrong\u003e解释:\u003c/strong\u003e \n这五个点如下图所示。组成的橙色三角形是最大的，面积为2。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意: \u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003e3 \u0026lt;= points.length \u0026lt;= 50\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e不存在重复的点。\u003c/li\u003e\n\t\u003cli\u003e\u0026nbsp;\u003ccode\u003e-50 \u0026lt;= points[i][j] \u0026lt;= 50\u003c/code\u003e.\u003c/li\u003e\n\t\u003cli\u003e结果误差值在\u0026nbsp;\u003ccode\u003e10^-6\u003c/code\u003e\u0026nbsp;以内都认为是正确答案。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006881":{"ID":"15006881","StatusDisplay":"Accepted","Lang":"python","Runtime":"116 ms","Memory":"11 MB","URL":"/submissions/detail/15006881/","Code":"class Solution:\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        def area(p, q, r):\n            return .5 * abs(p[0]*q[1]+q[0]*r[1]+r[0]*p[1]\n                           -p[1]*q[0]-q[1]*r[0]-r[1]*p[0])\n\n        return max(area(*triangle)\n            for triangle in itertools.combinations(points, 3))\n        \n","Timestamp":"1552927454"},"7988132":{"ID":"7988132","StatusDisplay":"Accepted","Lang":"python3","Runtime":"304 ms","Memory":"N/A","URL":"/submissions/detail/7988132/","Code":"class Solution:\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\"\n        def area(p, q, r):\n            return .5 * abs(p[0]*q[1]+q[0]*r[1]+r[0]*p[1]\n                           -p[1]*q[0]-q[1]*r[0]-r[1]*p[0])\n\n        return max(area(*triangle)\n            for triangle in itertools.combinations(points, 3))\n        ","Timestamp":"1538989653"}}},{"questionId":"657","questionFrontendId":"657","Title":"Robot Return to Origin","TitleSlug":"robot-return-to-origin","Content":"\u003cp\u003eThere is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot \u003cstrong\u003eends up at (0, 0)\u003c/strong\u003e after it completes its moves.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The way that the robot is \u0026quot;facing\u0026quot; is irrelevant. \u0026quot;R\u0026quot; will always make the robot move to the right once, \u0026quot;L\u0026quot; will always make it move left, etc. Also, assume that the magnitude of the robot\u0026#39;s movement is the same for each move.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u0026quot;UD\u0026quot;\r\n\u003cb\u003eOutput:\u003c/b\u003e true \r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \u0026quot;LL\u0026quot;\r\n\u003cb\u003eOutput:\u003c/b\u003e false\r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: The robot moves left twice. It ends up two \u0026quot;moves\u0026quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"机器人能否返回原点","TranslatedContent":"\u003cp\u003e在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在\u003cstrong\u003e\u0026nbsp;(0, 0) 处结束\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有\u0026nbsp;\u003ccode\u003eR\u003c/code\u003e（右），\u003ccode\u003eL\u003c/code\u003e（左），\u003ccode\u003eU\u003c/code\u003e（上）和 \u003ccode\u003eD\u003c/code\u003e（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e机器人\u0026ldquo;面朝\u0026rdquo;的方向无关紧要。 \u0026ldquo;R\u0026rdquo; 将始终使机器人向右移动一次，\u0026ldquo;L\u0026rdquo; 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;UD\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003cstrong\u003e解释：\u003c/strong\u003e机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;LL\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003cstrong\u003e解释：\u003c/strong\u003e机器人向左移动两次。它最终位于原点的左侧，距原点有两次 \u0026ldquo;移动\u0026rdquo; 的距离。我们返回 false，因为它在移动结束时没有返回原点。\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006833":{"ID":"15006833","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006833/","Code":"class Solution:\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')\n        \n\n","Timestamp":"1552927016"},"1729408":{"ID":"1729408","StatusDisplay":"Accepted","Lang":"python3","Runtime":"62 ms","Memory":"N/A","URL":"/submissions/detail/1729408/","Code":"class Solution:\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')\n        ","Timestamp":"1506442355"},"7572975":{"ID":"7572975","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7572975/","Code":"class Solution:\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        return moves.count('L') == moves.count('R') and moves.count('U') == moves.count('D')\n        \n","Timestamp":"1536219036"}}},{"questionId":"535","questionFrontendId":"535","Title":"Encode and Decode TinyURL","TitleSlug":"encode-and-decode-tinyurl","Content":"\u003cblockquote\u003eNote: This is a companion problem to the \u003ca href=\"https://leetcode.com/discuss/interview-question/system-design/\" target=\"_blank\"\u003eSystem Design\u003c/a\u003e problem: \u003ca href=\"https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/\" target=\"_blank\"\u003eDesign TinyURL\u003c/a\u003e.\u003c/blockquote\u003e\r\n\r\n\u003cp\u003eTinyURL is a URL shortening service where you enter a URL such as \u003ccode\u003ehttps://leetcode.com/problems/design-tinyurl\u003c/code\u003e and it returns a short URL such as \u003ccode\u003ehttp://tinyurl.com/4e9iAk\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eDesign the \u003ccode\u003eencode\u003c/code\u003e and \u003ccode\u003edecode\u003c/code\u003e methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"TinyURL 的加密与解密","TranslatedContent":"\u003cp\u003eTinyURL是一种URL简化服务， 比如：当你输入一个URL\u0026nbsp;\u003ccode\u003ehttps://leetcode.com/problems/design-tinyurl\u003c/code\u003e\u0026nbsp;时，它将返回一个简化的URL\u0026nbsp;\u003ccode\u003ehttp://tinyurl.com/4e9iAk\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e要求：设计一个 TinyURL 的加密\u0026nbsp;\u003ccode\u003eencode\u003c/code\u003e\u0026nbsp;和解密\u0026nbsp;\u003ccode\u003edecode\u003c/code\u003e\u0026nbsp;的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006800":{"ID":"15006800","StatusDisplay":"Accepted","Lang":"python","Runtime":"28 ms","Memory":"11.1 MB","URL":"/submissions/detail/15006800/","Code":"class Codec:\n    \n    url_list = []\n\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        if longUrl not in self.url_list:\n            self.url_list.append(longUrl)\n            return len(self.url_list) - 1\n        else:\n            return self.url_list.index(longUrl)\n        \n\n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original URL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        return self.url_list[shortUrl]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))\n\n","Timestamp":"1552926748"},"1729238":{"ID":"1729238","StatusDisplay":"Accepted","Lang":"python","Runtime":"65 ms","Memory":"N/A","URL":"/submissions/detail/1729238/","Code":"class Codec:\n    \n    url_list = []\n\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        if longUrl not in self.url_list:\n            self.url_list.append(longUrl)\n            return len(self.url_list) - 1\n        else:\n            return self.url_list.index(longUrl)\n        \n\n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original URL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        return self.url_list[shortUrl]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))","Timestamp":"1501147826"},"1729321":{"ID":"1729321","StatusDisplay":"Accepted","Lang":"python","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729321/","Code":"class Codec:\r\n    hash_list=[]\r\n\r\n    def encode(self, longUrl):\r\n        \"\"\"Encodes a URL to a shortened URL.\r\n        \r\n        :type longUrl: str\r\n        :rtype: str\r\n        \"\"\"\r\n        self.hash_list.append(longUrl)\r\n        return 'http://tinyurl.com/%s' % str(len(self.hash_list)-1)\r\n        \r\n\r\n    def decode(self, shortUrl):\r\n        \"\"\"Decodes a shortened URL to its original URL.\r\n        \r\n        :type shortUrl: str\r\n        :rtype: str\r\n        \"\"\"\r\n        return self.hash_list[int(shortUrl.replace('http://tinyurl.com/',''))]\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.decode(codec.encode(url))","Timestamp":"1489482797"},"7572926":{"ID":"7572926","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7572926/","Code":"class Codec:\n    \n    url_list = []\n\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        \n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        if longUrl not in self.url_list:\n            self.url_list.append(longUrl)\n            return len(self.url_list) - 1\n        else:\n            return self.url_list.index(longUrl)\n        \n\n    def decode(self, shortUrl):\n        \"\"\"Decodes a shortened URL to its original URL.\n        \n        :type shortUrl: str\n        :rtype: str\n        \"\"\"\n        return self.url_list[shortUrl]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(url))\n","Timestamp":"1536218926"}}},{"questionId":"9","questionFrontendId":"9","Title":"Palindrome Number","TitleSlug":"palindrome-number","Content":"\u003cp\u003eDetermine whether an integer is a palindrome. An integer\u0026nbsp;is\u0026nbsp;a\u0026nbsp;palindrome when it\u0026nbsp;reads the same backward as forward.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 121\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e -121\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e 10\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e Reads 01 from right to left. Therefore it is not a palindrome.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eCoud you solve\u0026nbsp;it without converting the integer to a string?\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"回文数","TranslatedContent":"\u003cp\u003e判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 121\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e -121\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003cstrong\u003e解释:\u003c/strong\u003e 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e 10\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003cstrong\u003e解释:\u003c/strong\u003e 从右向左读, 为 01 。因此它不是一个回文数。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你能不将整数转为字符串来解决这个问题吗？\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006914":{"ID":"15006914","StatusDisplay":"Accepted","Lang":"python","Runtime":"128 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006914/","Code":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        return str(x)[::-1] == str(x)\n        \n","Timestamp":"1552927687"},"7981363":{"ID":"7981363","StatusDisplay":"Accepted","Lang":"python","Runtime":"176 ms","Memory":"N/A","URL":"/submissions/detail/7981363/","Code":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        return str(x)[::-1] == str(x)\n        ","Timestamp":"1538984229"}}},{"questionId":"155","questionFrontendId":"155","Title":"Min Stack","TitleSlug":"min-stack","Content":"\u003cp\u003e\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n\u003cul\u003e\r\n\u003cli\u003e\r\npush(x) -- Push element x onto stack.\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\npop() -- Removes the element on top of the stack.\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\ntop() -- Get the top element.\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\nMinStack minStack = new MinStack();\r\nminStack.push(-2);\r\nminStack.push(0);\r\nminStack.push(-3);\r\nminStack.getMin();   --\u003e Returns -3.\r\nminStack.pop();\r\nminStack.top();      --\u003e Returns 0.\r\nminStack.getMin();   --\u003e Returns -2.\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"最小栈","TranslatedContent":"\u003cp\u003e设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003epush(x)\u0026nbsp;-- 将元素 x 推入栈中。\u003c/li\u003e\n\t\u003cli\u003epop()\u0026nbsp;-- 删除栈顶的元素。\u003c/li\u003e\n\t\u003cli\u003etop()\u0026nbsp;-- 获取栈顶元素。\u003c/li\u003e\n\t\u003cli\u003egetMin() -- 检索栈中的最小元素。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003eMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --\u0026gt; 返回 -3.\nminStack.pop();\nminStack.top();      --\u0026gt; 返回 0.\nminStack.getMin();   --\u0026gt; 返回 -2.\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006675":{"ID":"15006675","StatusDisplay":"Accepted","Lang":"python","Runtime":"60 ms","Memory":"14.5 MB","URL":"/submissions/detail/15006675/","Code":"class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stash = []\n        self.min_helper = []\n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.stash.append(x)\n        if not self.min_helper:\n            self.min_helper.append(len(self.stash) - 1)\n        elif x \u003c self.getMin():\n            self.min_helper.append(len(self.stash) - 1)\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: void\n        \"\"\"\n        self.stash.pop()\n        if self.min_helper[-1] == len(self.stash):\n            self.min_helper.pop()\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stash[-1]\n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stash[self.min_helper[-1]]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()\n","Timestamp":"1552925276"},"7889978":{"ID":"7889978","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/7889978/","Code":"class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stash = []\n        self.min_helper = []\n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.stash.append(x)\n        if not self.min_helper:\n            self.min_helper.append(len(self.stash) - 1)\n        elif x \u003c self.getMin():\n            self.min_helper.append(len(self.stash) - 1)\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: void\n        \"\"\"\n        self.stash.pop()\n        if self.min_helper[-1] == len(self.stash):\n            self.min_helper.pop()\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stash[-1]\n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stash[self.min_helper[-1]]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","Timestamp":"1538732899"}}},{"questionId":"626","questionFrontendId":"626","Title":"Exchange Seats","TitleSlug":"exchange-seats","Content":"\u003cp\u003eMary is a teacher in a middle school and she has a table \u003ccode\u003eseat\u003c/code\u003e storing students\u0026#39; names and their corresponding seat ids.\u003c/p\u003e\r\nThe column \u003cb\u003eid\u003c/b\u003e is continuous increment.\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\nMary wants to change seats for the adjacent students.\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\nCan you write a SQL query to output the result for Mary?\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Abbot   |\r\n|    2    | Doris   |\r\n|    3    | Emerson |\r\n|    4    | Green   |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n\u003c/pre\u003e\r\nFor the sample input, the output is:\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Doris   |\r\n|    2    | Abbot   |\r\n|    3    | Green   |\r\n|    4    | Emerson |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nIf the number of students is odd, there is no need to change the last one\u0026#39;s seat.\u003c/p\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"换座位","TranslatedContent":"\u003cp\u003e小美是一所中学的信息科技老师，她有一张 \u003ccode\u003eseat\u003c/code\u003e\u0026nbsp;座位表，平时用来储存学生名字和与他们相对应的座位 id。\u003c/p\u003e\n\n\u003cp\u003e其中纵列的\u0026nbsp;\u003cstrong\u003eid\u0026nbsp;\u003c/strong\u003e是连续递增的\u003c/p\u003e\n\n\u003cp\u003e小美想改变相邻俩学生的座位。\u003c/p\u003e\n\n\u003cp\u003e你能不能帮她写一个 SQL query\u0026nbsp;来输出小美想要的结果呢？\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n\u003c/pre\u003e\n\n\u003cp\u003e假如数据输入的是上表，则输出结果如下：\u003c/p\u003e\n\n\u003cpre\u003e\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果学生人数是奇数，则不需要改变最后一个同学的座位。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"17547163":{"ID":"17547163","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"444 ms","Memory":"N/A","URL":"/submissions/detail/17547163/","Code":"# Write your MySQL query statement below\nSELECT (\n    CASE \n        WHEN MOD(id, 2) = 1 AND id = (SELECT COUNT(1) FROM seat) THEN id\n        WHEN MOD(id, 2) = 1 THEN id+1\n        ELSE id -1\n    END \n) AS id, student\nFROM seat\nORDER BY id;","Timestamp":"1555999315"}}},{"questionId":"237","questionFrontendId":"237","Title":"Delete Node in a Linked List","TitleSlug":"delete-node-in-a-linked-list","Content":"\u003cp\u003eWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven linked list --\u0026nbsp;head =\u0026nbsp;[4,5,1,9], which looks like following:\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/237_example.png\" style=\"margin-top: 5px; margin-bottom: 5px; width: 300px; height: 49px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e head = [4,5,1,9], node = 5\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [4,1,9]\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eYou are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e head = [4,5,1,9], node = 1\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e [4,5,9]\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003eYou are given the third node with value 1, the linked list should become 4 -\u0026gt; 5 -\u0026gt; 9 after calling your function.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe linked list will have at least two elements.\u003c/li\u003e\r\n\t\u003cli\u003eAll of the nodes\u0026#39; values will be unique.\u003c/li\u003e\r\n\t\u003cli\u003eThe given node\u0026nbsp;will not be the tail and it will always be a valid node of the linked list.\u003c/li\u003e\r\n\t\u003cli\u003eDo not return anything from your function.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"删除链表中的节点","TranslatedContent":"\u003cp\u003e请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。\u003c/p\u003e\n\n\u003cp\u003e现有一个链表 --\u0026nbsp;head =\u0026nbsp;[4,5,1,9]，它可以表示为:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png\" style=\"height: 49px; width: 300px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e head = [4,5,1,9], node = 5\n\u003cstrong\u003e输出:\u003c/strong\u003e [4,1,9]\n\u003cstrong\u003e解释: \u003c/strong\u003e给定你链表中值为\u0026nbsp;5\u0026nbsp;的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 1 -\u0026gt; 9.\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e head = [4,5,1,9], node = 1\n\u003cstrong\u003e输出:\u003c/strong\u003e [4,5,9]\n\u003cstrong\u003e解释: \u003c/strong\u003e给定你链表中值为\u0026nbsp;1\u0026nbsp;的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 5 -\u0026gt; 9.\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e链表至少包含两个节点。\u003c/li\u003e\n\t\u003cli\u003e链表中所有节点的值都是唯一的。\u003c/li\u003e\n\t\u003cli\u003e给定的节点为非末尾节点并且一定是链表中的一个有效节点。\u003c/li\u003e\n\t\u003cli\u003e不要从你的函数中返回任何结果。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"1729222":{"ID":"1729222","StatusDisplay":"Accepted","Lang":"python","Runtime":"89 ms","Memory":"N/A","URL":"/submissions/detail/1729222/","Code":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteNode(self, node):\r\n        \"\"\"\r\n        :type node: ListNode\r\n        :rtype: void Do not return anything, modify node in-place instead.\r\n        \"\"\"\r\n        node.val = node.next.val\r\n        node.next = node.next.next","Timestamp":"1474248039"},"2291119":{"ID":"2291119","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/2291119/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        if not node.next:\n            return\n        \n        node.val = node.next.val\n        node.next = node.next.next\n        \n        ","Timestamp":"1526364763"},"2291260":{"ID":"2291260","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/2291260/","Code":"#\n# [237] Delete Node in a Linked List\n#\n# https://leetcode-cn.com/problems/delete-node-in-a-linked-list/description/\n#\n# algorithms\n# Easy (36.55%)\n# Total Accepted:    1.9K\n# Total Submissions: 5.2K\n# Testcase Example:  '[0,1]\\nnode at index 0 (node.val = 0)'\n#\n# 请编写一个函数，使其可以删除某个链表中给定的（非末尾的）节点，您将只被给予要求被删除的节点。\n# \n# 比如：假设该链表为 1 -\u003e 2 -\u003e 3 -\u003e 4  ，给定您的为该链表中值为 3 的第三个节点，那么在调用了您的函数之后，该链表则应变成 1 -\u003e 2\n# -\u003e 4 。\n# \n#\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        if not node.next:\n            return\n        \n        node.val = node.next.val\n        node.next = node.next.next\n","Timestamp":"1526365098"},"2291265":{"ID":"2291265","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/2291265/","Code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        if not node.next:\n            return\n        \n        node.val = node.next.val\n        node.next = node.next.next\n        \n        ","Timestamp":"1526365112"}}},{"questionId":"944","questionFrontendId":"908","Title":"Smallest Range I","TitleSlug":"smallest-range-i","Content":"\u003cp\u003eGiven an array \u003ccode\u003eA\u003c/code\u003e of integers, for each integer \u003ccode\u003eA[i]\u003c/code\u003e we may choose any \u003ccode\u003ex\u003c/code\u003e with \u003ccode\u003e-K \u0026lt;= x \u0026lt;= K\u003c/code\u003e, and add \u003ccode\u003ex\u003c/code\u003e to \u003ccode\u003eA[i]\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eAfter this process, we have some array \u003ccode\u003eB\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the smallest possible difference between the maximum value of \u003ccode\u003eB\u003c/code\u003e\u0026nbsp;and the minimum value of \u003ccode\u003eB\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-1-1\"\u003e[1]\u003c/span\u003e, K = \u003cspan id=\"example-input-1-2\"\u003e0\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e0\r\n\u003cstrong\u003eExplanation\u003c/strong\u003e: B = [1]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-2-1\"\u003e[0,10]\u003c/span\u003e, K = \u003cspan id=\"example-input-2-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e6\r\n\u003c/span\u003e\u003cspan id=\"example-output-1\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: B = [2,8]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-3-1\"\u003e[1,3,6]\u003c/span\u003e, K = \u003cspan id=\"example-input-3-2\"\u003e3\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003e0\r\n\u003c/span\u003e\u003cspan id=\"example-output-1\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: B = [3,3,3] or B = [4,4,4]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"最小差值 I","TranslatedContent":"\u003cp\u003e给定一个整数数组 \u003ccode\u003eA\u003c/code\u003e，对于每个整数 \u003ccode\u003eA[i]\u003c/code\u003e，我们可以选择任意\u0026nbsp;\u003ccode\u003ex\u003c/code\u003e 满足\u0026nbsp;\u003ccode\u003e-K \u0026lt;= x \u0026lt;= K\u003c/code\u003e，并将\u0026nbsp;\u003ccode\u003ex\u003c/code\u003e\u0026nbsp;加到\u0026nbsp;\u003ccode\u003eA[i]\u003c/code\u003e\u0026nbsp;中。\u003c/p\u003e\n\n\u003cp\u003e在此过程之后，我们得到一些数组\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e返回 \u003ccode\u003eB\u003c/code\u003e\u0026nbsp;的最大值和 \u003ccode\u003eB\u003c/code\u003e\u0026nbsp;的最小值之间可能存在的最小差值。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [1], K = 0\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003cstrong\u003e解释：\u003c/strong\u003eB = [1]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [0,10], K = 2\n\u003cstrong\u003e输出：\u003c/strong\u003e6\n\u003cstrong\u003e解释：\u003c/strong\u003eB = [2,8]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = [1,3,6], K = 3\n\u003cstrong\u003e输出：\u003c/strong\u003e0\n\u003cstrong\u003e解释：\u003c/strong\u003eB = [3,3,3] 或 B = [4,4,4]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= A.length \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A[i] \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= K \u0026lt;= 10000\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"15006917":{"ID":"15006917","StatusDisplay":"Accepted","Lang":"python","Runtime":"24 ms","Memory":"11.5 MB","URL":"/submissions/detail/15006917/","Code":"class Solution:\n    def smallestRangeI(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        M = 0\n        m = 9999999999999999999\n        for x in A:\n            if x \u003e M:\n                M = x\n            if x \u003c m:\n                m = x\n        if M - K \u003c m + K:\n            return 0\n        else:\n            return M-m-2*K\n        \n","Timestamp":"1552927709"},"7972683":{"ID":"7972683","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7972683/","Code":"class Solution:\n    def smallestRangeI(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        M = 0\n        m = 9999999999999999999\n        for x in A:\n            if x \u003e M:\n                M = x\n            if x \u003c m:\n                m = x\n        if M - K \u003c m + K:\n            return 0\n        else:\n            return M-m-2*K\n        ","Timestamp":"1538973884"}}},{"questionId":"14","questionFrontendId":"14","Title":"Longest Common Prefix","TitleSlug":"longest-common-prefix","Content":"\u003cp\u003eWrite a function to find the longest common prefix string amongst an array of strings.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf there is no common prefix, return an empty string \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[\u0026quot;flower\u0026quot;,\u0026quot;flow\u0026quot;,\u0026quot;flight\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;fl\u0026quot;\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e[\u0026quot;dog\u0026quot;,\u0026quot;racecar\u0026quot;,\u0026quot;car\u0026quot;]\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\r\n\u003cstrong\u003eExplanation:\u003c/strong\u003e There is no common prefix among the input strings.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eAll given inputs are in lowercase letters \u003ccode\u003ea-z\u003c/code\u003e.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"最长公共前缀","TranslatedContent":"\u003cp\u003e编写一个函数来查找字符串数组中的最长公共前缀。\u003c/p\u003e\n\n\u003cp\u003e如果不存在公共前缀，返回空字符串\u0026nbsp;\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e[\u0026quot;flower\u0026quot;,\u0026quot;flow\u0026quot;,\u0026quot;flight\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;fl\u0026quot;\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003e[\u0026quot;dog\u0026quot;,\u0026quot;racecar\u0026quot;,\u0026quot;car\u0026quot;]\n\u003cstrong\u003e输出:\u003c/strong\u003e \u0026quot;\u0026quot;\n\u003cstrong\u003e解释:\u003c/strong\u003e 输入不存在公共前缀。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e所有输入只包含小写字母\u0026nbsp;\u003ccode\u003ea-z\u003c/code\u003e\u0026nbsp;。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006665":{"ID":"15006665","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11 MB","URL":"/submissions/detail/15006665/","Code":"class Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        \n        length = len(strs)\n        \n        flag = True\n        res = \"\"\n        index = 0\n        while flag:\n            temp = \"\"\n            for x in range(length):\n                if len(strs[x]) \u003e index:\n                    if not temp:\n                        temp = strs[x][index]\n                    else:\n                        if temp != strs[x][index]:\n                            return res\n                else:\n                    return res\n            else:\n                res += temp\n            index += 1\n                    \n                \n        \n\n","Timestamp":"1552925209"},"2277510":{"ID":"2277510","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/2277510/","Code":"class Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        \n        length = len(strs)\n        \n        flag = True\n        res = \"\"\n        index = 0\n        while flag:\n            temp = \"\"\n            for x in range(length):\n                if len(strs[x]) \u003e index:\n                    if not temp:\n                        temp = strs[x][index]\n                    else:\n                        if temp != strs[x][index]:\n                            return res\n                else:\n                    return res\n            else:\n                res += temp\n            index += 1\n                    \n                \n        ","Timestamp":"1526313490"},"7572745":{"ID":"7572745","StatusDisplay":"Accepted","Lang":"python3","Runtime":"40 ms","Memory":"N/A","URL":"/submissions/detail/7572745/","Code":"class Solution:\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        \n        length = len(strs)\n        \n        flag = True\n        res = \"\"\n        index = 0\n        while flag:\n            temp = \"\"\n            for x in range(length):\n                if len(strs[x]) \u003e index:\n                    if not temp:\n                        temp = strs[x][index]\n                    else:\n                        if temp != strs[x][index]:\n                            return res\n                else:\n                    return res\n            else:\n                res += temp\n            index += 1\n                    \n                \n        \n","Timestamp":"1536218567"}}},{"questionId":"110","questionFrontendId":"110","Title":"Balanced Binary Tree","TitleSlug":"balanced-binary-tree","Content":"\u003cp\u003eGiven a binary tree, determine if it is height-balanced.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor this problem, a height-balanced binary tree is defined as:\u003c/p\u003e\r\n\r\n\u003cblockquote\u003e\r\n\u003cp\u003ea binary tree in which the depth of the two subtrees of \u003cem\u003eevery\u003c/em\u003e node never differ by more than 1.\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven the following tree \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\u003c/pre\u003e\r\n\r\n\u003cp\u003eReturn true.\u003cbr /\u003e\r\n\u003cbr /\u003e\r\n\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven the following tree \u003ccode\u003e[1,2,2,3,3,null,null,4,4]\u003c/code\u003e:\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n       1\r\n      / \\\r\n     2   2\r\n    / \\\r\n   3   3\r\n  / \\\r\n 4   4\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eReturn false.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"平衡二叉树","TranslatedContent":"\u003cp\u003e给定一个二叉树，判断它是否是高度平衡的二叉树。\u003c/p\u003e\n\n\u003cp\u003e本题中，一棵高度平衡二叉树定义为：\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e一个二叉树\u003cem\u003e每个节点\u0026nbsp;\u003c/em\u003e的左右两个子树的高度差的绝对值不超过1。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e给定二叉树 \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\u003c/pre\u003e\n\n\u003cp\u003e返回 \u003ccode\u003etrue\u003c/code\u003e 。\u003cbr\u003e\n\u003cbr\u003e\n\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e给定二叉树 \u003ccode\u003e[1,2,2,3,3,null,null,4,4]\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n\u003c/pre\u003e\n\n\u003cp\u003e返回\u0026nbsp;\u003ccode\u003efalse\u003c/code\u003e 。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"12624716":{"ID":"12624716","StatusDisplay":"Accepted","Lang":"python3","Runtime":"100 ms","Memory":"12.5 MB","URL":"/submissions/detail/12624716/","Code":"#\n# @lc app=leetcode.cn id=110 lang=python3\n#\n# [110] 平衡二叉树\n#\n# https://leetcode-cn.com/problems/balanced-binary-tree/description/\n#\n# algorithms\n# Easy (45.94%)\n# Total Accepted:    9.5K\n# Total Submissions: 20.8K\n# Testcase Example:  '[3,9,20,null,null,15,7]'\n#\n# 给定一个二叉树，判断它是否是高度平衡的二叉树。\n# \n# 本题中，一棵高度平衡二叉树定义为：\n# \n# \n# 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\n# \n# \n# 示例 1:\n# \n# 给定二叉树 [3,9,20,null,null,15,7]\n# \n# ⁠   3\n# ⁠  / \\\n# ⁠ 9  20\n# ⁠   /  \\\n# ⁠  15   7\n# \n# 返回 true 。\n# \n# 示例 2:\n# \n# 给定二叉树 [1,2,2,3,3,null,null,4,4]\n# \n# ⁠      1\n# ⁠     / \\\n# ⁠    2   2\n# ⁠   / \\\n# ⁠  3   3\n# ⁠ / \\\n# ⁠4   4\n# \n# \n# 返回 false 。\n# \n#\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(node):\n            if not node:\n                return 0\n            l = inner(node.left) + 1\n            r = inner(node.right) + 1\n            if abs(l - r) \u003e 1:\n                return 999\n            else:\n                return max(l, r)\n        if inner(root) \u003e= 999:\n            return False\n        return True\n        \n","Timestamp":"1549968494"},"15004191":{"ID":"15004191","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"18.9 MB","URL":"/submissions/detail/15004191/","Code":"#\n# @lc app=leetcode.cn id=110 lang=python3\n#\n# [110] 平衡二叉树\n#\n# https://leetcode-cn.com/problems/balanced-binary-tree/description/\n#\n# algorithms\n# Easy (45.94%)\n# Total Accepted:    9.5K\n# Total Submissions: 20.8K\n# Testcase Example:  '[3,9,20,null,null,15,7]'\n#\n# 给定一个二叉树，判断它是否是高度平衡的二叉树。\n# \n# 本题中，一棵高度平衡二叉树定义为：\n# \n# \n# 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\n# \n# \n# 示例 1:\n# \n# 给定二叉树 [3,9,20,null,null,15,7]\n# \n# ⁠   3\n# ⁠  / \\\n# ⁠ 9  20\n# ⁠   /  \\\n# ⁠  15   7\n# \n# 返回 true 。\n# \n# 示例 2:\n# \n# 给定二叉树 [1,2,2,3,3,null,null,4,4]\n# \n# ⁠      1\n# ⁠     / \\\n# ⁠    2   2\n# ⁠   / \\\n# ⁠  3   3\n# ⁠ / \\\n# ⁠4   4\n# \n# \n# 返回 false 。\n# \n#\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(node):\n            if not node:\n                return 0\n            l = inner(node.left) + 1\n            r = inner(node.right) + 1\n            if abs(l - r) \u003e 1:\n                return 999\n            else:\n                return max(l, r)\n        if inner(root) \u003e= 999:\n            return False\n        return True\n        \n\n","Timestamp":"1552924403"},"15006647":{"ID":"15006647","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"18.7 MB","URL":"/submissions/detail/15006647/","Code":"#\n# @lc app=leetcode.cn id=110 lang=python3\n#\n# [110] 平衡二叉树\n#\n# https://leetcode-cn.com/problems/balanced-binary-tree/description/\n#\n# algorithms\n# Easy (45.94%)\n# Total Accepted:    9.5K\n# Total Submissions: 20.8K\n# Testcase Example:  '[3,9,20,null,null,15,7]'\n#\n# 给定一个二叉树，判断它是否是高度平衡的二叉树。\n# \n# 本题中，一棵高度平衡二叉树定义为：\n# \n# \n# 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\n# \n# \n# 示例 1:\n# \n# 给定二叉树 [3,9,20,null,null,15,7]\n# \n# ⁠   3\n# ⁠  / \\\n# ⁠ 9  20\n# ⁠   /  \\\n# ⁠  15   7\n# \n# 返回 true 。\n# \n# 示例 2:\n# \n# 给定二叉树 [1,2,2,3,3,null,null,4,4]\n# \n# ⁠      1\n# ⁠     / \\\n# ⁠    2   2\n# ⁠   / \\\n# ⁠  3   3\n# ⁠ / \\\n# ⁠4   4\n# \n# \n# 返回 false 。\n# \n#\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        def inner(node):\n            if not node:\n                return 0\n            l = inner(node.left) + 1\n            r = inner(node.right) + 1\n            if abs(l - r) \u003e 1:\n                return 999\n            else:\n                return max(l, r)\n        if inner(root) \u003e= 999:\n            return False\n        return True\n        \n\n","Timestamp":"1552925041"}}},{"questionId":"28","questionFrontendId":"28","Title":"Implement strStr()","TitleSlug":"implement-strstr","Content":"\u003cp\u003eImplement \u003ca href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\"\u003estrStr()\u003c/a\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the index of the first occurrence of needle in haystack, or \u003cstrong\u003e-1\u003c/strong\u003e if needle is not part of haystack.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e haystack = \u0026quot;hello\u0026quot;, needle = \u0026quot;ll\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e 2\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e haystack = \u0026quot;aaaaa\u0026quot;, needle = \u0026quot;bba\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e -1\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eClarification:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eWhat should we return when \u003ccode\u003eneedle\u003c/code\u003e is an empty string? This is a great question to ask during an interview.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor the purpose of this problem, we will return 0 when \u003ccode\u003eneedle\u003c/code\u003e is an empty string. This is consistent to C\u0026#39;s\u0026nbsp;\u003ca href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\"\u003estrstr()\u003c/a\u003e and Java\u0026#39;s\u0026nbsp;\u003ca href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\"\u003eindexOf()\u003c/a\u003e.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"实现strStr()","TranslatedContent":"\u003cp\u003e实现\u0026nbsp;\u003ca href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\"\u003estrStr()\u003c/a\u003e\u0026nbsp;函数。\u003c/p\u003e\n\n\u003cp\u003e给定一个\u0026nbsp;haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回\u0026nbsp; \u003cstrong\u003e-1\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e haystack = \u0026quot;hello\u0026quot;, needle = \u0026quot;ll\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e 2\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e haystack = \u0026quot;aaaaa\u0026quot;, needle = \u0026quot;bba\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e -1\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e当\u0026nbsp;\u003ccode\u003eneedle\u003c/code\u003e\u0026nbsp;是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\u003c/p\u003e\n\n\u003cp\u003e对于本题而言，当\u0026nbsp;\u003ccode\u003eneedle\u003c/code\u003e\u0026nbsp;是空字符串时我们应当返回 0 。这与C语言的\u0026nbsp;\u003ca href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\"\u003estrstr()\u003c/a\u003e\u0026nbsp;以及 Java的\u0026nbsp;\u003ca href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\"\u003eindexOf()\u003c/a\u003e\u0026nbsp;定义相符。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006732":{"ID":"15006732","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"11 MB","URL":"/submissions/detail/15006732/","Code":"class Solution:\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        if not needle:\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        return -1\n        \n\n","Timestamp":"1552925709"},"2276432":{"ID":"2276432","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/2276432/","Code":"class Solution:\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        if not needle:\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        return -1\n        ","Timestamp":"1526311790"},"7572818":{"ID":"7572818","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"N/A","URL":"/submissions/detail/7572818/","Code":"class Solution:\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        if not needle:\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        return -1\n        \n","Timestamp":"1536218726"}}},{"questionId":"969","questionFrontendId":"933","Title":"Number of Recent Calls","TitleSlug":"number-of-recent-calls","Content":"\u003cp\u003eWrite a class \u003ccode\u003eRecentCounter\u003c/code\u003e to count recent requests.\u003c/p\u003e\r\n\r\n\u003cp\u003eIt has only one method:\u0026nbsp;\u003ccode\u003eping(int t)\u003c/code\u003e, where t represents some time in milliseconds.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn the number of \u003ccode\u003eping\u003c/code\u003es that have been made from 3000 milliseconds ago until now.\u003c/p\u003e\r\n\r\n\u003cp\u003eAny ping with time in \u003ccode\u003e[t - 3000, t]\u003c/code\u003e will count, including the current ping.\u003c/p\u003e\r\n\r\n\u003cp\u003eIt is guaranteed that every call to \u003ccode\u003eping\u003c/code\u003e uses a strictly larger value of\u0026nbsp;\u003ccode\u003et\u003c/code\u003e than before.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003einputs = \u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;RecentCounter\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;]\u003c/span\u003e, inputs = \u003cspan id=\"example-input-1-2\"\u003e[[],[1],[100],[3001],[3002]]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[null,1,2,3,3]\u003c/span\u003e\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eEach test case will have at most \u003ccode\u003e10000\u003c/code\u003e calls to \u003ccode\u003eping\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach test case will call\u0026nbsp;\u003ccode\u003eping\u003c/code\u003e with strictly increasing values of \u003ccode\u003et\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach call to ping will have \u003ccode\u003e1 \u0026lt;= t \u0026lt;= 10^9\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003c/div\u003e","Difficulty":"Easy","TranslatedTitle":"最近的请求次数","TranslatedContent":"\u003cp\u003e写一个\u0026nbsp;\u003ccode\u003eRecentCounter\u003c/code\u003e\u0026nbsp;类来计算最近的请求。\u003c/p\u003e\n\n\u003cp\u003e它只有一个方法：\u003ccode\u003eping(int t)\u003c/code\u003e，其中\u0026nbsp;\u003ccode\u003et\u003c/code\u003e\u0026nbsp;代表以毫秒为单位的某个时间。\u003c/p\u003e\n\n\u003cp\u003e返回从 3000 毫秒前到现在的\u0026nbsp;\u003ccode\u003eping\u003c/code\u003e\u0026nbsp;数。\u003c/p\u003e\n\n\u003cp\u003e任何处于\u0026nbsp;\u003ccode\u003e[t - 3000, t]\u003c/code\u003e\u0026nbsp;时间范围之内的 \u003ccode\u003eping\u003c/code\u003e\u0026nbsp;都将会被计算在内，包括当前（指 \u003ccode\u003et\u003c/code\u003e\u0026nbsp;时刻）的 \u003ccode\u003eping\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e保证每次对 \u003ccode\u003eping\u003c/code\u003e 的调用都使用比之前更大的 \u003ccode\u003et\u003c/code\u003e 值。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003einputs = [\u0026quot;RecentCounter\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;,\u0026quot;ping\u0026quot;], inputs = [[],[1],[100],[3001],[3002]]\n\u003cstrong\u003e输出：\u003c/strong\u003e[null,1,2,3,3]\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e每个测试用例最多调用\u0026nbsp;\u003ccode\u003e10000\u003c/code\u003e\u0026nbsp;次\u0026nbsp;\u003ccode\u003eping\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每个测试用例会使用严格递增的 \u003ccode\u003et\u003c/code\u003e 值来调用\u0026nbsp;\u003ccode\u003eping\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e每次调用 \u003ccode\u003eping\u003c/code\u003e\u0026nbsp;都有\u0026nbsp;\u003ccode\u003e1 \u0026lt;= t \u0026lt;= 10^9\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"10981389":{"ID":"10981389","StatusDisplay":"Accepted","Lang":"python3","Runtime":"304 ms","Memory":"15.6 MB","URL":"/submissions/detail/10981389/","Code":"class RecentCounter:\n\n    def __init__(self):\n        self.pings = []\n\n    def ping(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        self.pings.append(t)\n        for i in range(len(self.pings)):\n            if self.pings[i] \u003e= t-3000:\n                break\n        \n        for x in range(i-1, -1, -1):\n            self.pings.pop(x)\n            \n        return len(self.pings)\n        \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)","Timestamp":"1545971131"},"10981693":{"ID":"10981693","StatusDisplay":"Accepted","Lang":"python3","Runtime":"384 ms","Memory":"15.6 MB","URL":"/submissions/detail/10981693/","Code":"class RecentCounter:\n\n    def __init__(self):\n        self.pings = []\n\n    def ping(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        while self.pings and self.pings[0] \u003c t - 3000:\n            self.pings.pop(0)\n        self.pings.append(t)\n        return len(self.pings)\n        \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)","Timestamp":"1545971469"},"10981709":{"ID":"10981709","StatusDisplay":"Accepted","Lang":"python3","Runtime":"248 ms","Memory":"15.6 MB","URL":"/submissions/detail/10981709/","Code":"class RecentCounter:\n\n    def __init__(self):\n        self.pings = []\n\n    def ping(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        while self.pings and self.pings[0] \u003c t - 3000:\n            self.pings.pop(0)\n        self.pings.append(t)\n        return len(self.pings)\n        \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)","Timestamp":"1545971489"},"15006924":{"ID":"15006924","StatusDisplay":"Accepted","Lang":"python","Runtime":"208 ms","Memory":"15.5 MB","URL":"/submissions/detail/15006924/","Code":"class RecentCounter:\n\n    def __init__(self):\n        self.pings = []\n\n    def ping(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        while self.pings and self.pings[0] \u003c t - 3000:\n            self.pings.pop(0)\n        self.pings.append(t)\n        return len(self.pings)\n        \n\n\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()\n# param_1 = obj.ping(t)\n","Timestamp":"1552927759"}}},{"questionId":"990","questionFrontendId":"953","Title":"Verifying an Alien Dictionary","TitleSlug":"verifying-an-alien-dictionary","Content":"\u003cp\u003eIn an alien language, surprisingly they also use english lowercase letters, but possibly\u0026nbsp;in a different \u003ccode\u003eorder\u003c/code\u003e. The\u0026nbsp;\u003ccode\u003eorder\u003c/code\u003e of the alphabet\u0026nbsp;is some permutation\u0026nbsp;of lowercase letters.\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven a sequence of \u003ccode\u003ewords\u003c/code\u003e\u0026nbsp;written in the alien language,\u0026nbsp;and the \u003ccode\u003eorder\u003c/code\u003e of the alphabet,\u0026nbsp;return \u003ccode\u003etrue\u003c/code\u003e if and only if the given \u003ccode\u003ewords\u003c/code\u003e\u0026nbsp;are sorted lexicographicaly in this alien language.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ewords = \u003cspan id=\"example-input-1-1\"\u003e[\u0026quot;hello\u0026quot;,\u0026quot;leetcode\u0026quot;]\u003c/span\u003e, order = \u003cspan id=\"example-input-1-2\"\u003e\u0026quot;hlabcdefgijkmnopqrstuvwxyz\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003etrue\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003eAs \u0026#39;h\u0026#39; comes before \u0026#39;l\u0026#39; in this language, then the sequence is sorted.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ewords = \u003cspan id=\"example-input-2-1\"\u003e[\u0026quot;word\u0026quot;,\u0026quot;world\u0026quot;,\u0026quot;row\u0026quot;]\u003c/span\u003e, order = \u003cspan id=\"example-input-2-2\"\u003e\u0026quot;worldabcefghijkmnpqstuvxyz\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003efalse\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003eAs \u0026#39;d\u0026#39; comes after \u0026#39;l\u0026#39; in this language, then words[0] \u0026gt; words[1], hence the sequence is unsorted.\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003ewords = \u003cspan id=\"example-input-3-1\"\u003e[\u0026quot;apple\u0026quot;,\u0026quot;app\u0026quot;]\u003c/span\u003e, order = \u003cspan id=\"example-input-3-2\"\u003e\u0026quot;abcdefghijklmnopqrstuvwxyz\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-3\"\u003efalse\r\n\u003c/span\u003e\u003cstrong\u003eExplanation: \u003c/strong\u003eThe first three characters \u0026quot;app\u0026quot; match, and the second string is shorter (in size.) According to lexicographical rules \u0026quot;apple\u0026quot; \u0026gt; \u0026quot;app\u0026quot;, because \u0026#39;l\u0026#39; \u0026gt; \u0026#39;\u0026empty;\u0026#39;, where \u0026#39;\u0026empty;\u0026#39; is defined as the blank character which is less than any other character (\u003ca href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\"\u003eMore info\u003c/a\u003e).\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eorder.length == 26\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003eAll characters in \u003ccode\u003ewords[i]\u003c/code\u003e and \u003ccode\u003eorder\u003c/code\u003e are english lowercase letters.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"验证外星语词典","TranslatedContent":"\u003cp\u003e某种外星语也使用英文小写字母，但可能顺序 \u003ccode\u003eorder\u003c/code\u003e 不同。字母表的顺序（\u003ccode\u003eorder\u003c/code\u003e）是一些小写字母的排列。\u003c/p\u003e\n\n\u003cp\u003e给定一组用外星语书写的单词 \u003ccode\u003ewords\u003c/code\u003e，以及其字母表的顺序 \u003ccode\u003eorder\u003c/code\u003e，只有当给定的单词在这种外星语中按字典序排列时，返回 \u003ccode\u003etrue\u003c/code\u003e；否则，返回 \u003ccode\u003efalse\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ewords = [\u0026quot;hello\u0026quot;,\u0026quot;leetcode\u0026quot;], order = \u0026quot;hlabcdefgijkmnopqrstuvwxyz\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003etrue\n\u003cstrong\u003e解释：\u003c/strong\u003e在该语言的字母表中，\u0026#39;h\u0026#39; 位于 \u0026#39;l\u0026#39; 之前，所以单词序列是按字典序排列的。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ewords = [\u0026quot;word\u0026quot;,\u0026quot;world\u0026quot;,\u0026quot;row\u0026quot;], order = \u0026quot;worldabcefghijkmnpqstuvxyz\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\u003c/strong\u003e在该语言的字母表中，\u0026#39;d\u0026#39; 位于 \u0026#39;l\u0026#39; 之后，那么 words[0] \u0026gt; words[1]，因此单词序列不是按字典序排列的。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 3：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003ewords = [\u0026quot;apple\u0026quot;,\u0026quot;app\u0026quot;], order = \u0026quot;abcdefghijklmnopqrstuvwxyz\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003efalse\n\u003cstrong\u003e解释：\u003c/strong\u003e当前三个字符 \u0026quot;app\u0026quot; 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 \u0026quot;apple\u0026quot; \u0026gt; \u0026quot;app\u0026quot;，因为 \u0026#39;l\u0026#39; \u0026gt; \u0026#39;\u0026empty;\u0026#39;，其中 \u0026#39;\u0026empty;\u0026#39; 是空白字符，定义为比任何其他字符都小（\u003ca href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\" target=\"_blank\"\u003e更多信息\u003c/a\u003e）。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words.length \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e1 \u0026lt;= words[i].length \u0026lt;= 20\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eorder.length == 26\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e在\u0026nbsp;\u003ccode\u003ewords[i]\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eorder\u003c/code\u003e\u0026nbsp;中的所有字符都是英文小写字母。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"10940849":{"ID":"10940849","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/10940849/","Code":"class Solution:\n    def isAlienSorted(self, words, order):\n        \"\"\"\n        :type words: List[str]\n        :type order: str\n        :rtype: bool\n        \"\"\"\n        table = {}\n        ourtable = \"abcdefghijklmnopqrstuvwxyz\"\n        for i, x in enumerate(order):\n            table[x] = ourtable[i]\n        def toOurWord(word):\n            word = list(word)\n            for i in range(len(word)):\n                word[i] = table[word[i]]\n            return ''.join(word)\n        temp = toOurWord(words[0])\n        for i in range(len(words)-1):\n            c = toOurWord(words[i+1])\n            if c \u003c temp:\n                return False\n            temp = c\n        return True","Timestamp":"1545900561"},"15006933":{"ID":"15006933","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006933/","Code":"class Solution:\n    def isAlienSorted(self, words, order):\n        \"\"\"\n        :type words: List[str]\n        :type order: str\n        :rtype: bool\n        \"\"\"\n        table = {}\n        ourtable = \"abcdefghijklmnopqrstuvwxyz\"\n        for i, x in enumerate(order):\n            table[x] = ourtable[i]\n        def toOurWord(word):\n            word = list(word)\n            for i in range(len(word)):\n                word[i] = table[word[i]]\n            return ''.join(word)\n        temp = toOurWord(words[0])\n        for i in range(len(words)-1):\n            c = toOurWord(words[i+1])\n            if c \u003c temp:\n                return False\n            temp = c\n        return True\n","Timestamp":"1552927847"}}},{"questionId":"347","questionFrontendId":"347","Title":"Top K Frequent Elements","TitleSlug":"top-k-frequent-elements","Content":"\u003cp\u003eGiven a non-empty array of integers, return the \u003cb\u003e\u003ci\u003ek\u003c/i\u003e\u003c/b\u003e most frequent elements.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums = \u003cspan id=\"example-input-1-1\"\u003e[1,1,1,2,2,3]\u003c/span\u003e, k = \u003cspan id=\"example-input-1-2\"\u003e2\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[1,2]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums = \u003cspan id=\"example-input-2-1\"\u003e[1]\u003c/span\u003e, k = \u003cspan id=\"example-input-2-2\"\u003e1\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[1]\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote: \u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eYou may assume \u003ci\u003ek\u003c/i\u003e is always valid, 1 \u0026le; \u003ci\u003ek\u003c/i\u003e \u0026le; number of unique elements.\u003c/li\u003e\r\n\t\u003cli\u003eYour algorithm\u0026#39;s time complexity \u003cb\u003emust be\u003c/b\u003e better than O(\u003ci\u003en\u003c/i\u003e log \u003ci\u003en\u003c/i\u003e), where \u003ci\u003en\u003c/i\u003e is the array\u0026#39;s size.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"前K个高频元素","TranslatedContent":"\u003cp\u003e给定一个非空的整数数组，返回其中出现频率前\u0026nbsp;\u003cstrong\u003e\u003cem\u003ek\u0026nbsp;\u003c/em\u003e\u003c/strong\u003e高的元素。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums = [1,1,1,2,2,3], k = 2\n\u003cstrong\u003e输出: \u003c/strong\u003e[1,2]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums = [1], k = 1\n\u003cstrong\u003e输出: \u003c/strong\u003e[1]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e你可以假设给定的\u0026nbsp;\u003cem\u003ek\u0026nbsp;\u003c/em\u003e总是合理的，且 1 \u0026le; k \u0026le; 数组中不相同的元素的个数。\u003c/li\u003e\n\t\u003cli\u003e你的算法的时间复杂度\u003cstrong\u003e必须\u003c/strong\u003e优于 O(\u003cem\u003en\u003c/em\u003e log \u003cem\u003en\u003c/em\u003e) ,\u0026nbsp;\u003cem\u003en\u0026nbsp;\u003c/em\u003e是数组的大小。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006748":{"ID":"15006748","StatusDisplay":"Accepted","Lang":"python","Runtime":"44 ms","Memory":"12.9 MB","URL":"/submissions/detail/15006748/","Code":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        num_dict=collections.Counter(nums)\n        return sorted(num_dict,key=num_dict.get,reverse=True)[:k]\n\n\n            \n        \n\n","Timestamp":"1552925844"},"1729346":{"ID":"1729346","StatusDisplay":"Accepted","Lang":"python","Runtime":"122 ms","Memory":"N/A","URL":"/submissions/detail/1729346/","Code":"class Solution(object):\r\n    def topKFrequent(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        num_dict=collections.Counter(nums)\r\n        return sorted(num_dict,key=num_dict.get,reverse=True)[:k]\r\n\r\n\r\n            \r\n        ","Timestamp":"1474428917"},"1729438":{"ID":"1729438","StatusDisplay":"Accepted","Lang":"python","Runtime":"99 ms","Memory":"N/A","URL":"/submissions/detail/1729438/","Code":"class Solution(object):\r\n    def topKFrequent(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        return sorted(collections.Counter(nums),key=collections.Counter(nums).get,reverse=True)[:k]\r\n\r\n\r\n            \r\n        ","Timestamp":"1474428289"},"7572837":{"ID":"7572837","StatusDisplay":"Accepted","Lang":"python","Runtime":"48 ms","Memory":"N/A","URL":"/submissions/detail/7572837/","Code":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        num_dict=collections.Counter(nums)\n        return sorted(num_dict,key=num_dict.get,reverse=True)[:k]\n\n\n            \n        \n","Timestamp":"1536218763"}}},{"questionId":"724","questionFrontendId":"724","Title":"Find Pivot Index","TitleSlug":"find-pivot-index","Content":"\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e, write a method that returns the \u0026quot;pivot\u0026quot; index of this array.\u003c/p\u003e\r\n\r\n\u003cp\u003eWe define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.\u003c/p\u003e\r\n\r\n\u003cp\u003eIf no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\nnums = [1, 7, 3, 6, 5, 6]\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e \r\nnums = [1, 2, 3]\r\n\u003cb\u003eOutput:\u003c/b\u003e -1\r\n\u003cb\u003eExplanation:\u003c/b\u003e \r\nThere is no index that satisfies the conditions in the problem statement.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eThe length of \u003ccode\u003enums\u003c/code\u003e will be in the range \u003ccode\u003e[0, 10000]\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach element \u003ccode\u003enums[i]\u003c/code\u003e will be an integer in the range \u003ccode\u003e[-1000, 1000]\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"寻找数组的中心索引","TranslatedContent":"\u003cp\u003e给定一个整数类型的数组\u0026nbsp;\u003ccode\u003enums\u003c/code\u003e，请编写一个能够返回数组\u003cstrong\u003e\u0026ldquo;中心索引\u0026rdquo;\u003c/strong\u003e的方法。\u003c/p\u003e\n\n\u003cp\u003e我们是这样定义数组\u003cstrong\u003e中心索引\u003c/strong\u003e的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。\u003c/p\u003e\n\n\u003cp\u003e如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nnums = [1, 7, 3, 6, 5, 6]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解释:\u003c/strong\u003e \n索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。\n同时, 3 也是第一个符合要求的中心索引。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e \nnums = [1, 2, 3]\n\u003cstrong\u003e输出:\u003c/strong\u003e -1\n\u003cstrong\u003e解释:\u003c/strong\u003e \n数组中不存在满足此条件的中心索引。\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003enums\u003c/code\u003e 的长度范围为\u0026nbsp;\u003ccode\u003e[0, 10000]\u003c/code\u003e。\u003c/li\u003e\n\t\u003cli\u003e任何一个\u0026nbsp;\u003ccode\u003enums[i]\u003c/code\u003e 将会是一个范围在\u0026nbsp;\u003ccode\u003e[-1000, 1000]\u003c/code\u003e的整数。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006854":{"ID":"15006854","StatusDisplay":"Accepted","Lang":"python","Runtime":"56 ms","Memory":"11.4 MB","URL":"/submissions/detail/15006854/","Code":"class Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ls = 0\n        rs = sum(nums[1:])\n\n        for i, x in enumerate(nums):\n            if ls == rs:\n                return i\n            ls += x\n            if i \u003c len(nums) - 1:\n                rs -= nums[i+1]\n        return -1\n\n\n\n","Timestamp":"1552927210"},"15798337":{"ID":"15798337","StatusDisplay":"Accepted","Lang":"python","Runtime":"340 ms","Memory":"12.5 MB","URL":"/submissions/detail/15798337/","Code":"class Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ls = 0\n        rs = sum(nums[1:])\n\n        for i, x in enumerate(nums):\n            if ls == rs:\n                return i\n            ls += x\n            if i \u003c len(nums) - 1:\n                rs -= nums[i+1]\n        return -1\n\n\n\n","Timestamp":"1553793996"},"1729221":{"ID":"1729221","StatusDisplay":"Accepted","Lang":"python3","Runtime":"136 ms","Memory":"N/A","URL":"/submissions/detail/1729221/","Code":"class Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ls = 0\n        rs = sum(nums[1:])\n\n        for i, x in enumerate(nums):\n            if ls == rs:\n                return i\n            ls += x\n            if i \u003c len(nums) - 1:\n                rs -= nums[i+1]\n        return -1\n\n","Timestamp":"1519811500"},"7572995":{"ID":"7572995","StatusDisplay":"Accepted","Lang":"python3","Runtime":"124 ms","Memory":"N/A","URL":"/submissions/detail/7572995/","Code":"class Solution:\n    def pivotIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ls = 0\n        rs = sum(nums[1:])\n\n        for i, x in enumerate(nums):\n            if ls == rs:\n                return i\n            ls += x\n            if i \u003c len(nums) - 1:\n                rs -= nums[i+1]\n        return -1\n\n\n","Timestamp":"1536219094"}}},{"questionId":"674","questionFrontendId":"674","Title":"Longest Continuous Increasing Subsequence","TitleSlug":"longest-continuous-increasing-subsequence","Content":"\u003cp\u003e\r\nGiven an unsorted array of integers, find the length of longest \u003ccode\u003econtinuous\u003c/code\u003e increasing subsequence (subarray).\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [1,3,5,4,7]\r\n\u003cb\u003eOutput:\u003c/b\u003e 3\r\n\u003cb\u003eExplanation:\u003c/b\u003e The longest continuous increasing subsequence is [1,3,5], its length is 3. \r\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003cbr /\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e [2,2,2,2,2]\r\n\u003cb\u003eOutput:\u003c/b\u003e 1\r\n\u003cb\u003eExplanation:\u003c/b\u003e The longest continuous increasing subsequence is [2], its length is 1. \r\n\u003c/pre\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\r\nLength of the array will not exceed 10,000.\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"最长连续递增序列","TranslatedContent":"\u003cp\u003e给定一个未经排序的整数数组，找到最长且\u003cstrong\u003e连续\u003c/strong\u003e的的递增序列。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [1,3,5,4,7]\n\u003cstrong\u003e输出:\u003c/strong\u003e 3\n\u003cstrong\u003e解释:\u003c/strong\u003e 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 \n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e [2,2,2,2,2]\n\u003cstrong\u003e输出:\u003c/strong\u003e 1\n\u003cstrong\u003e解释:\u003c/strong\u003e 最长连续递增序列是 [2], 长度为1。\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e数组长度不会超过10000。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15006839":{"ID":"15006839","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11.4 MB","URL":"/submissions/detail/15006839/","Code":"class Solution:\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        l = len(nums)\n        res = 0\n        tmp = nums[0] - 1\n        count = 0\n        for x in range(l):\n            if nums[x] \u003e tmp:\n                count += 1\n                if count \u003e res:\n                    res = count\n            else:\n                count = 1\n            tmp = nums[x]\n        return res\n            \n\n\n","Timestamp":"1552927068"},"1729454":{"ID":"1729454","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/1729454/","Code":"class Solution:\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        l = len(nums)\n        res = 0\n        tmp = nums[0] - 1\n        count = 0\n        for x in range(l):\n            if nums[x] \u003e tmp:\n                count += 1\n                if count \u003e res:\n                    res = count\n            else:\n                count = 1\n            tmp = nums[x]\n        return res\n            \n","Timestamp":"1519812993"},"7572979":{"ID":"7572979","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7572979/","Code":"class Solution:\n    def findLengthOfLCIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        l = len(nums)\n        res = 0\n        tmp = nums[0] - 1\n        count = 0\n        for x in range(l):\n            if nums[x] \u003e tmp:\n                count += 1\n                if count \u003e res:\n                    res = count\n            else:\n                count = 1\n            tmp = nums[x]\n        return res\n            \n\n","Timestamp":"1536219059"}}},{"questionId":"904","questionFrontendId":"872","Title":"Leaf-Similar Trees","TitleSlug":"leaf-similar-trees","Content":"\u003cp\u003eConsider all the leaves of a binary tree.\u0026nbsp; From\u0026nbsp;left to right order, the values of those\u0026nbsp;leaves form a \u003cem\u003eleaf value sequence.\u003c/em\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"width: 300px; height: 240px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eFor example, in the given tree above, the leaf value sequence is \u003ccode\u003e(6, 7, 4, 9, 8)\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003eTwo binary trees are considered \u003cem\u003eleaf-similar\u003c/em\u003e\u0026nbsp;if their leaf value sequence is the same.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn \u003ccode\u003etrue\u003c/code\u003e if and only if the two given trees with head nodes \u003ccode\u003eroot1\u003c/code\u003e and \u003ccode\u003eroot2\u003c/code\u003e are leaf-similar.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eBoth of the given trees will have between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e100\u003c/code\u003e nodes.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"叶子相似的树","TranslatedContent":"\u003cp\u003e请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个\u0026nbsp;\u003cem\u003e叶值序列\u003c/em\u003e 。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 240px; width: 300px;\"\u003e\u003c/p\u003e\n\n\u003cp\u003e举个例子，如上图所示，给定一颗叶值序列为\u0026nbsp;\u003ccode\u003e(6, 7, 4, 9, 8)\u003c/code\u003e\u0026nbsp;的树。\u003c/p\u003e\n\n\u003cp\u003e如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是\u0026nbsp;\u003cem\u003e叶相似\u0026nbsp;\u003c/em\u003e的。\u003c/p\u003e\n\n\u003cp\u003e如果给定的两个头结点分别为\u0026nbsp;\u003ccode\u003eroot1\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eroot2\u003c/code\u003e\u0026nbsp;的树是叶相似的，则返回\u0026nbsp;\u003ccode\u003etrue\u003c/code\u003e；否则返回 \u003ccode\u003efalse\u003c/code\u003e 。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e给定的两颗树可能会有\u0026nbsp;\u003ccode\u003e1\u003c/code\u003e\u0026nbsp;到\u0026nbsp;\u003ccode\u003e100\u003c/code\u003e\u0026nbsp;个结点。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006900":{"ID":"15006900","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"11 MB","URL":"/submissions/detail/15006900/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def leafSimilar(self, root1, root2):\n        \"\"\"\n        :type root1: TreeNode\n        :type root2: TreeNode\n        :rtype: bool\n        \"\"\"\n        def get_leaf_list(node):\n            if not node:\n                return []\n            if not node.left and not node.right:\n                return [node.val]\n            return get_leaf_list(node.left) + get_leaf_list(node.right)\n        return get_leaf_list(root1) == get_leaf_list(root2)\n","Timestamp":"1552927598"},"7987610":{"ID":"7987610","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/7987610/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def leafSimilar(self, root1, root2):\n        \"\"\"\n        :type root1: TreeNode\n        :type root2: TreeNode\n        :rtype: bool\n        \"\"\"\n        def get_leaf_list(node):\n            if not node:\n                return []\n            if not node.left and not node.right:\n                return [node.val]\n            return get_leaf_list(node.left) + get_leaf_list(node.right)\n        return get_leaf_list(root1) == get_leaf_list(root2)","Timestamp":"1538989221"},"7987730":{"ID":"7987730","StatusDisplay":"Accepted","Lang":"python3","Runtime":"52 ms","Memory":"N/A","URL":"/submissions/detail/7987730/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def leafSimilar(self, root1, root2):\n        \"\"\"\n        :type root1: TreeNode\n        :type root2: TreeNode\n        :rtype: bool\n        \"\"\"\n        def get_leaf_list(node):\n            if not node:\n                return []\n            if not node.left and not node.right:\n                return [node.val]\n            return get_leaf_list(node.left) + get_leaf_list(node.right)\n        return get_leaf_list(root1) == get_leaf_list(root2)","Timestamp":"1538989290"}}},{"questionId":"181","questionFrontendId":"181","Title":"Employees Earning More Than Their Managers","TitleSlug":"employees-earning-more-than-their-managers","Content":"\u003cp\u003eThe \u003ccode\u003eEmployee\u003c/code\u003e table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----+-------+--------+-----------+\r\n| Id | Name  | Salary | ManagerId |\r\n+----+-------+--------+-----------+\r\n| 1  | Joe   | 70000  | 3         |\r\n| 2  | Henry | 80000  | 4         |\r\n| 3  | Sam   | 60000  | NULL      |\r\n| 4  | Max   | 90000  | NULL      |\r\n+----+-------+--------+-----------+\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003eGiven the \u003ccode\u003eEmployee\u003c/code\u003e table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n+----------+\r\n| Employee |\r\n+----------+\r\n| Joe      |\r\n+----------+\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"超过经理收入的员工","TranslatedContent":"\u003cp\u003e\u003ccode\u003eEmployee\u003c/code\u003e\u0026nbsp;表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。\u003c/p\u003e\n\n\u003cpre\u003e+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n\u003c/pre\u003e\n\n\u003cp\u003e给定\u0026nbsp;\u003ccode\u003eEmployee\u003c/code\u003e\u0026nbsp;表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。\u003c/p\u003e\n\n\u003cpre\u003e+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"17546874":{"ID":"17546874","StatusDisplay":"Accepted","Lang":"mysql","Runtime":"593 ms","Memory":"N/A","URL":"/submissions/detail/17546874/","Code":"# Write your MySQL query statement below\nselect e.name as Employee\nfrom employee as e\nleft join employee as m on e.ManagerId = m.Id\nwhere e.Salary \u003e m.Salary","Timestamp":"1555998953"}}},{"questionId":"859","questionFrontendId":"641","Title":"Design Circular Deque","TitleSlug":"design-circular-deque","Content":"\u003cp\u003eDesign your implementation of the circular double-ended queue (deque).\u003c/p\u003e\r\n\r\n\u003cp\u003eYour implementation should support following operations:\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003e\u003ccode\u003eMyCircularDeque(k)\u003c/code\u003e: Constructor, set the size of the deque to be k.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003einsertFront()\u003c/code\u003e: Adds an item at the front of Deque. Return true if the operation is successful.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003einsertLast()\u003c/code\u003e: Adds an item at the rear of Deque. Return true if the operation is successful.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003edeleteFront()\u003c/code\u003e: Deletes an item from the front of Deque. Return true if the operation is successful.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003edeleteLast()\u003c/code\u003e: Deletes an item from the rear of Deque. Return true if the operation is successful.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003egetFront()\u003c/code\u003e: Gets the front item from the Deque. If the deque is empty, return -1.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003egetRear()\u003c/code\u003e: Gets the last item from Deque. If the deque is empty, return -1.\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eisEmpty()\u003c/code\u003e: Checks whether Deque is empty or not.\u0026nbsp;\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eisFull()\u003c/code\u003e: Checks whether Deque is full or not.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 2\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eAll values will be in the range of [0, 1000].\u003c/li\u003e\r\n\t\u003cli\u003eThe number of operations will be in the range of\u0026nbsp;[1, 1000].\u003c/li\u003e\r\n\t\u003cli\u003ePlease do not use the built-in Deque library.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"设计循环双端队列","TranslatedContent":"\u003cp\u003e设计实现双端队列。\u003cbr\u003e\n你的实现需要支持以下操作：\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eMyCircularDeque(k)：构造函数,双端队列的大小为k。\u003c/li\u003e\n\t\u003cli\u003einsertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。\u003c/li\u003e\n\t\u003cli\u003einsertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。\u003c/li\u003e\n\t\u003cli\u003edeleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。\u003c/li\u003e\n\t\u003cli\u003edeleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。\u003c/li\u003e\n\t\u003cli\u003egetFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。\u003c/li\u003e\n\t\u003cli\u003egetRear()：获得双端队列的最后一个元素。\u0026nbsp;如果双端队列为空，返回 -1。\u003c/li\u003e\n\t\u003cli\u003eisEmpty()：检查双端队列是否为空。\u003c/li\u003e\n\t\u003cli\u003eisFull()：检查双端队列是否满了。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003eMyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3\ncircularDeque.insertLast(1);\t\t\t        // 返回 true\ncircularDeque.insertLast(2);\t\t\t        // 返回 true\ncircularDeque.insertFront(3);\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 已经满了，返回 false\ncircularDeque.getRear();  \t\t\t\t// 返回 2\ncircularDeque.isFull();\t\t\t\t        // 返回 true\ncircularDeque.deleteLast();\t\t\t        // 返回 true\ncircularDeque.insertFront(4);\t\t\t        // 返回 true\ncircularDeque.getFront();\t\t\t\t// 返回 4\n\u0026nbsp;\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e所有值的范围为 [1, 1000]\u003c/li\u003e\n\t\u003cli\u003e操作次数的范围为 [1, 1000]\u003c/li\u003e\n\t\u003cli\u003e请不要使用内置的双端队列库。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"17623615":{"ID":"17623615","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"13.5 MB","URL":"/submissions/detail/17623615/","Code":"class MyCircularDeque:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the deque to be k.\n        \"\"\"\n        self.max = k\n        self.k = []\n        \n\n    def insertFront(self, value: int) -\u003e bool:\n        \"\"\"\n        Adds an item at the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        if self.isFull():\n            return False\n        self.k = [value] + self.k \n        return True\n        \n\n    def insertLast(self, value: int) -\u003e bool:\n        \"\"\"\n        Adds an item at the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        if self.isFull():\n            return False\n        self.k = self.k + [value] \n        return True\n        \n\n    def deleteFront(self) -\u003e bool:\n        \"\"\"\n        Deletes an item from the front of Deque. Return true if the operation is successful.\n        \"\"\"\n        if self.isEmpty():\n            return False\n        self.k.pop(0)\n        return True\n\n    def deleteLast(self) -\u003e bool:\n        \"\"\"\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\n        \"\"\"\n        if self.isEmpty():\n            return False\n        self.k.pop(-1)\n        return True\n\n    def getFront(self) -\u003e int:\n        \"\"\"\n        Get the front item from the deque.\n        \"\"\"\n        if self.isEmpty():\n            return -1\n        return self.k[0]\n        \n\n    def getRear(self) -\u003e int:\n        \"\"\"\n        Get the last item from the deque.\n        \"\"\"\n        if self.isEmpty():\n            return -1\n        return self.k[-1]\n        \n\n    def isEmpty(self) -\u003e bool:\n        \"\"\"\n        Checks whether the circular deque is empty or not.\n        \"\"\"\n        if self.k:\n            return False\n        return True\n        \n\n    def isFull(self) -\u003e bool:\n        \"\"\"\n        Checks whether the circular deque is full or not.\n        \"\"\"\n        return len(self.k) == self.max\n\n\n# Your MyCircularDeque object will be instantiated and called as such:\n# obj = MyCircularDeque(k)\n# param_1 = obj.insertFront(value)\n# param_2 = obj.insertLast(value)\n# param_3 = obj.deleteFront()\n# param_4 = obj.deleteLast()\n# param_5 = obj.getFront()\n# param_6 = obj.getRear()\n# param_7 = obj.isEmpty()\n# param_8 = obj.isFull()","Timestamp":"1556092087"}}},{"questionId":"1092","questionFrontendId":"1026","Title":"Maximum Difference Between Node and Ancestor","TitleSlug":"maximum-difference-between-node-and-ancestor","Content":"\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, find the maximum value \u003ccode\u003eV\u003c/code\u003e for which there exists \u003cstrong\u003edifferent\u003c/strong\u003e nodes \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e where \u003ccode\u003eV = |A.val - B.val|\u003c/code\u003e\u0026nbsp;and \u003ccode\u003eA\u003c/code\u003e is an ancestor of \u003ccode\u003eB\u003c/code\u003e.\u003c/p\u003e\r\n\r\n\u003cp\u003e(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cimg alt=\"\" src=\"http://i68.tinypic.com/2whqcep.jpg\" style=\"height: 230px; width: 300px;\" /\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003e\u003cspan id=\"example-input-1-1\"\u003e[8,3,10,1,6,null,14,null,null,4,7,13]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e7\u003c/span\u003e\r\n\u003cstrong\u003eExplanation: \u003c/strong\u003e\r\nWe have various ancestor-node differences, some of which are given below :\r\n|8 - 3| = 5\r\n|3 - 7| = 4\r\n|8 - 1| = 7\r\n|10 - 13| = 3\r\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003eThe number of nodes in the tree is between \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e5000\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eEach node will have value between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e100000\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"节点与其祖先之间的最大差值","TranslatedContent":"\u003cp\u003e给定二叉树的根节点\u0026nbsp;\u003ccode\u003eroot\u003c/code\u003e，找出存在于不同节点\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;之间的最大值 \u003ccode\u003eV\u003c/code\u003e，其中\u0026nbsp;\u003ccode\u003eV = |A.val - B.val|\u003c/code\u003e，且\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;是\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;的祖先。\u003c/p\u003e\n\n\u003cp\u003e（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/2whqcep.jpg\" style=\"height: 230px; width: 300px;\"\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003e[8,3,10,1,6,null,14,null,null,4,7,13]\n\u003cstrong\u003e输出：\u003c/strong\u003e7\n\u003cstrong\u003e解释： \u003c/strong\u003e\n我们有大量的节点与其祖先的差值，其中一些如下：\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\n在所有可能的差值中，最大值 7 由 |8 - 1| = 7 得出。\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e树中的节点数在\u0026nbsp;\u003ccode\u003e2\u003c/code\u003e\u0026nbsp;到\u0026nbsp;\u003ccode\u003e5000\u003c/code\u003e\u0026nbsp;之间。\u003c/li\u003e\n\t\u003cli\u003e每个节点的值介于\u0026nbsp;\u003ccode\u003e0\u003c/code\u003e\u0026nbsp;到\u0026nbsp;\u003ccode\u003e100000\u003c/code\u003e\u0026nbsp;之间。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"16917998":{"ID":"16917998","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"20.3 MB","URL":"/submissions/detail/16917998/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxAncestorDiff(self, root: TreeNode) -\u003e int:\n        res = [0]\n        def inner(node, M,m):\n            if not node:\n                r = abs(M-m)\n                if r \u003eres[0]:\n                    res[0] = r\n                return\n            if node.val \u003e M:\n                M = node.val\n            if node.val \u003c m:\n                m = node.val\n            inner(node.left, M, m)\n            inner(node.right, M, m)\n            \n        inner(root, -1,100001)\n        return res[0]\n        ","Timestamp":"1555212715"}}},{"questionId":"538","questionFrontendId":"538","Title":"Convert BST to Greater Tree","TitleSlug":"convert-bst-to-greater-tree","Content":"\u003cp\u003eGiven a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\u003c/p\u003e\r\n\r\n\u003cp\u003e\r\n\u003cb\u003eExample:\u003c/b\u003e\r\n\u003cpre\u003e\r\n\u003cb\u003eInput:\u003c/b\u003e The root of a Binary Search Tree like this:\r\n              5\r\n            /   \\\r\n           2     13\r\n\r\n\u003cb\u003eOutput:\u003c/b\u003e The root of a Greater Tree like this:\r\n             18\r\n            /   \\\r\n          20     13\r\n\u003c/pre\u003e\r\n\u003c/p\u003e","Difficulty":"Easy","TranslatedTitle":"把二叉搜索树转换为累加树","TranslatedContent":"\u003cp\u003e给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e例如：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\n\u003cstrong\u003e输入:\u003c/strong\u003e 二叉搜索树:\n              5\n            /   \\\n           2     13\n\n\u003cstrong\u003e输出:\u003c/strong\u003e 转换为累加树:\n             18\n            /   \\\n          20     13\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"16670270":{"ID":"16670270","StatusDisplay":"Accepted","Lang":"python3","Runtime":"92 ms","Memory":"15.7 MB","URL":"/submissions/detail/16670270/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def convertBST(self, root: TreeNode) -\u003e TreeNode:\n        s = [0]\n        def inner(node):\n            if not node:\n                return\n            inner(node.right)\n            node.val += s[0]\n            s[0] = node.val\n            inner(node.left)\n            \n        \n        inner(root)\n        return root\n        ","Timestamp":"1553000479"}}},{"questionId":"109","questionFrontendId":"109","Title":"Convert Sorted List to Binary Search Tree","TitleSlug":"convert-sorted-list-to-binary-search-tree","Content":"\u003cp\u003eGiven a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\u003c/p\u003e\r\n\r\n\u003cp\u003eFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of \u003cem\u003eevery\u003c/em\u003e node never differ by more than 1.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nGiven the sorted linked list: [-10,-3,0,5,9],\r\n\r\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n\u003c/pre\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"有序链表转换二叉搜索树","TranslatedContent":"\u003cp\u003e给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\u003c/p\u003e\n\n\u003cp\u003e本题中，一个高度平衡二叉树是指一个二叉树\u003cem\u003e每个节点\u0026nbsp;\u003c/em\u003e的左右两个子树的高度差的绝对值不超过 1。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15004134":{"ID":"15004134","StatusDisplay":"Accepted","Lang":"python","Runtime":"204 ms","Memory":"17.5 MB","URL":"/submissions/detail/15004134/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        a, b, c= head, head, None\n        while b.next:\n            c = a\n            a = a.next\n            if b.next.next:\n                b = b.next.next\n            else:\n                b = b.next\n                break\n        if c:\n            c.next = None\n        node = TreeNode(a.val)\n        node.right = self.sortedListToBST(a.next)\n        node.left = self.sortedListToBST(head)\n        return node\n                \n            \n            \n        \n","Timestamp":"1552924353"},"15006645":{"ID":"15006645","StatusDisplay":"Accepted","Lang":"python","Runtime":"124 ms","Memory":"17.5 MB","URL":"/submissions/detail/15006645/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        a, b, c= head, head, None\n        while b.next:\n            c = a\n            a = a.next\n            if b.next.next:\n                b = b.next.next\n            else:\n                b = b.next\n                break\n        if c:\n            c.next = None\n        node = TreeNode(a.val)\n        node.right = self.sortedListToBST(a.next)\n        node.left = self.sortedListToBST(head)\n        return node\n                \n            \n            \n        \n","Timestamp":"1552925013"},"8446868":{"ID":"8446868","StatusDisplay":"Accepted","Lang":"python3","Runtime":"176 ms","Memory":"N/A","URL":"/submissions/detail/8446868/","Code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        a, b, c= head, head, None\n        while b.next:\n            c = a\n            a = a.next\n            if b.next.next:\n                b = b.next.next\n            else:\n                b = b.next\n                break\n        if c:\n            c.next = None\n        node = TreeNode(a.val)\n        node.right = self.sortedListToBST(a.next)\n        node.left = self.sortedListToBST(head)\n        return node\n                \n            \n            \n        ","Timestamp":"1539933500"}}},{"questionId":"208","questionFrontendId":"208","Title":"Implement Trie (Prefix Tree)","TitleSlug":"implement-trie-prefix-tree","Content":"\u003cp\u003eImplement a trie with \u003ccode\u003einsert\u003c/code\u003e, \u003ccode\u003esearch\u003c/code\u003e, and \u003ccode\u003estartsWith\u003c/code\u003e methods.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\nTrie trie = new Trie();\r\n\r\ntrie.insert(\u0026quot;apple\u0026quot;);\r\ntrie.search(\u0026quot;apple\u0026quot;);   // returns true\r\ntrie.search(\u0026quot;app\u0026quot;);     // returns false\r\ntrie.startsWith(\u0026quot;app\u0026quot;); // returns true\r\ntrie.insert(\u0026quot;app\u0026quot;);   \r\ntrie.search(\u0026quot;app\u0026quot;);     // returns true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eYou may assume that all inputs are consist of lowercase letters \u003ccode\u003ea-z\u003c/code\u003e.\u003c/li\u003e\r\n\t\u003cli\u003eAll inputs are guaranteed to be non-empty strings.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Medium","TranslatedTitle":"实现 Trie (前缀树)","TranslatedContent":"\u003cp\u003e实现一个 Trie (前缀树)，包含\u0026nbsp;\u003ccode\u003einsert\u003c/code\u003e,\u0026nbsp;\u003ccode\u003esearch\u003c/code\u003e, 和\u0026nbsp;\u003ccode\u003estartsWith\u003c/code\u003e\u0026nbsp;这三个操作。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003eTrie trie = new Trie();\n\ntrie.insert(\u0026quot;apple\u0026quot;);\ntrie.search(\u0026quot;apple\u0026quot;);   // 返回 true\ntrie.search(\u0026quot;app\u0026quot;);     // 返回 false\ntrie.startsWith(\u0026quot;app\u0026quot;); // 返回 true\ntrie.insert(\u0026quot;app\u0026quot;);   \ntrie.search(\u0026quot;app\u0026quot;);     // 返回 true\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e你可以假设所有的输入都是由小写字母\u0026nbsp;\u003ccode\u003ea-z\u003c/code\u003e\u0026nbsp;构成的。\u003c/li\u003e\n\t\u003cli\u003e保证所有输入均为非空字符串。\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15849668":{"ID":"15849668","StatusDisplay":"Accepted","Lang":"python3","Runtime":"224 ms","Memory":"21.7 MB","URL":"/submissions/detail/15849668/","Code":"class Trie:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.startset = set()\n        self.words = set()\n        \n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        self.words.add(word)\n        for x in range(len(word)+1):\n            self.startset.add(word[:x])\n        \n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return word in self.words\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        return prefix in self.startset\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","Timestamp":"1553860792"}}},{"questionId":"104","questionFrontendId":"104","Title":"Maximum Depth of Binary Tree","TitleSlug":"maximum-depth-of-binary-tree","Content":"\u003cp\u003eGiven a binary tree, find its maximum depth.\u003c/p\u003e\r\n\r\n\u003cp\u003eThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;A leaf is a node with no children.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cp\u003eGiven binary tree \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e,\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\u003c/pre\u003e\r\n\r\n\u003cp\u003ereturn its depth = 3.\u003c/p\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"二叉树的最大深度","TranslatedContent":"\u003cp\u003e给定一个二叉树，找出其最大深度。\u003c/p\u003e\n\n\u003cp\u003e二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明:\u003c/strong\u003e\u0026nbsp;叶子节点是指没有子节点的节点。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例：\u003c/strong\u003e\u003cbr\u003e\n给定二叉树 \u003ccode\u003e[3,9,20,null,null,15,7]\u003c/code\u003e，\u003c/p\u003e\n\n\u003cpre\u003e    3\n   / \\\n  9  20\n    /  \\\n   15   7\u003c/pre\u003e\n\n\u003cp\u003e返回它的最大深度\u0026nbsp;3 。\u003c/p\u003e\n","Status":"ac","Tags":[],"Submits":{"15004178":{"ID":"15004178","StatusDisplay":"Accepted","Lang":"python","Runtime":"40 ms","Memory":"13.8 MB","URL":"/submissions/detail/15004178/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        return 1+ max(self.maxDepth(root.left),self.maxDepth(root.right))\n        \n\n","Timestamp":"1552924393"},"15006638":{"ID":"15006638","StatusDisplay":"Accepted","Lang":"python","Runtime":"32 ms","Memory":"13.8 MB","URL":"/submissions/detail/15006638/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        return 1+ max(self.maxDepth(root.left),self.maxDepth(root.right))\n        \n\n","Timestamp":"1552924939"},"1729359":{"ID":"1729359","StatusDisplay":"Accepted","Lang":"java","Runtime":"1 ms","Memory":"N/A","URL":"/submissions/detail/1729359/","Code":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if(root==null){\r\n            return 0;\r\n        }\r\n        int left = maxDepth(root.left);\r\n        int right = maxDepth(root.right);\r\n\r\n        return Math.max(left, right) + 1;\r\n    }\r\n}","Timestamp":"1467729820"},"1729417":{"ID":"1729417","StatusDisplay":"Accepted","Lang":"java","Runtime":"1 ms","Memory":"N/A","URL":"/submissions/detail/1729417/","Code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int maxDepth(TreeNode root) {\n        if(root==null){\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n\n        return Math.max(left, right) + 1;\n    }\n}\n","Timestamp":"1519618627"},"4965437":{"ID":"4965437","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/4965437/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        return 1+ max(self.maxDepth(root.left),self.maxDepth(root.right))\n        ","Timestamp":"1533125791"},"7572722":{"ID":"7572722","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"N/A","URL":"/submissions/detail/7572722/","Code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        \n        return 1+ max(self.maxDepth(root.left),self.maxDepth(root.right))\n        \n","Timestamp":"1536218516"}}},{"questionId":"920","questionFrontendId":"884","Title":"Uncommon Words from Two Sentences","TitleSlug":"uncommon-words-from-two-sentences","Content":"\u003cp\u003eWe are given two sentences \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e.\u0026nbsp; (A \u003cem\u003esentence\u003c/em\u003e\u0026nbsp;is a string of space separated words.\u0026nbsp; Each \u003cem\u003eword\u003c/em\u003e consists only of lowercase letters.)\u003c/p\u003e\r\n\r\n\u003cp\u003eA word is \u003cem\u003euncommon\u003c/em\u003e\u0026nbsp;if it appears exactly once in one of the sentences, and does not appear in the other sentence.\u003c/p\u003e\r\n\r\n\u003cp\u003eReturn a list of all uncommon words.\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003eYou may return the list in any order.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\u003c/ol\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-1-1\"\u003e\u0026quot;this apple is sweet\u0026quot;\u003c/span\u003e, B = \u003cspan id=\"example-input-1-2\"\u003e\u0026quot;this apple is sour\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[\u0026quot;sweet\u0026quot;,\u0026quot;sour\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003eA = \u003cspan id=\"example-input-2-1\"\u003e\u0026quot;apple apple\u0026quot;\u003c/span\u003e, B = \u003cspan id=\"example-input-2-2\"\u003e\u0026quot;banana\u0026quot;\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[\u0026quot;banana\u0026quot;]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003col\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= B.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\r\n\t\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e both contain only spaces and lowercase letters.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两句话中的不常见单词","TranslatedContent":"\u003cp\u003e给定两个句子\u0026nbsp;\u003ccode\u003eA\u003c/code\u003e\u0026nbsp;和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;。\u0026nbsp;（\u003cem\u003e句子\u003c/em\u003e是一串由空格分隔的单词。每个\u003cem\u003e单词\u003c/em\u003e仅由小写字母组成。）\u003c/p\u003e\n\n\u003cp\u003e如果一个单词在其中一个句子中只出现一次，在另一个句子中却没有出现，那么这个单词就是\u003cem\u003e不常见的\u003c/em\u003e。\u003c/p\u003e\n\n\u003cp\u003e返回所有不常用单词的列表。\u003c/p\u003e\n\n\u003cp\u003e您可以按任何顺序返回列表。\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003col\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = \u0026quot;this apple is sweet\u0026quot;, B = \u0026quot;this apple is sour\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;sweet\u0026quot;,\u0026quot;sour\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例\u0026nbsp;2：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入：\u003c/strong\u003eA = \u0026quot;apple apple\u0026quot;, B = \u0026quot;banana\u0026quot;\n\u003cstrong\u003e输出：\u003c/strong\u003e[\u0026quot;banana\u0026quot;]\n\u003c/pre\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= A.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003e0 \u0026lt;= B.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e 和\u0026nbsp;\u003ccode\u003eB\u003c/code\u003e\u0026nbsp;都只包含空格和小写字母。\u003c/li\u003e\n\u003c/ol\u003e\n","Status":"ac","Tags":[],"Submits":{"11568729":{"ID":"11568729","StatusDisplay":"Accepted","Lang":"python3","Runtime":"44 ms","Memory":"6.5 MB","URL":"/submissions/detail/11568729/","Code":"class Solution:\n    def uncommonFromSentences(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: List[str]\n        \"\"\"\n        da = {}\n        for a in A.split():\n            da.setdefault(a,0)\n            da[a] += 1\n        \n        for b in B.split():\n            da.setdefault(b, 0)\n            da[b] += 1\n        return [x for x,v in da.items() if v == 1]\n            ","Timestamp":"1547305373"},"15006908":{"ID":"15006908","StatusDisplay":"Accepted","Lang":"python","Runtime":"16 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006908/","Code":"class Solution:\n    def uncommonFromSentences(self, A, B):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: List[str]\n        \"\"\"\n        da = {}\n        for a in A.split():\n            da.setdefault(a,0)\n            da[a] += 1\n        \n        for b in B.split():\n            da.setdefault(b, 0)\n            da[b] += 1\n        return [x for x,v in da.items() if v == 1]\n            \n","Timestamp":"1552927653"}}},{"questionId":"383","questionFrontendId":"383","Title":"Ransom Note","TitleSlug":"ransom-note","Content":"\u003cp\u003e\r\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \r\nnote can be constructed from the magazines ; otherwise, it will return false. \r\n\u003c/p\u003e\r\n\u003cp\u003e\r\nEach letter in the magazine string can only be used once in your ransom note.\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003cbr /\u003e\r\nYou may assume that both strings contain only lowercase letters.\r\n\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\ncanConstruct(\"a\", \"b\") -\u003e false\r\ncanConstruct(\"aa\", \"ab\") -\u003e false\r\ncanConstruct(\"aa\", \"aab\") -\u003e true\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"赎金信","TranslatedContent":"\u003cp\u003e给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。\u003c/p\u003e\n\n\u003cp\u003e(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e你可以假设两个字符串均只含有小写字母。\u003c/p\u003e\n\n\u003cpre\u003e\ncanConstruct(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;) -\u0026gt; false\ncanConstruct(\u0026quot;aa\u0026quot;, \u0026quot;ab\u0026quot;) -\u0026gt; false\ncanConstruct(\u0026quot;aa\u0026quot;, \u0026quot;aab\u0026quot;) -\u0026gt; true\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"15006761":{"ID":"15006761","StatusDisplay":"Accepted","Lang":"python","Runtime":"108 ms","Memory":"10.9 MB","URL":"/submissions/detail/15006761/","Code":"class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)\n\n","Timestamp":"1552925944"},"1729414":{"ID":"1729414","StatusDisplay":"Accepted","Lang":"python","Runtime":"195 ms","Memory":"N/A","URL":"/submissions/detail/1729414/","Code":"class Solution(object):\r\n    def canConstruct(self, ransomNote, magazine):\r\n        \"\"\"\r\n        :type ransomNote: str\r\n        :type magazine: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)","Timestamp":"1474426839"},"7572859":{"ID":"7572859","StatusDisplay":"Accepted","Lang":"python","Runtime":"148 ms","Memory":"N/A","URL":"/submissions/detail/7572859/","Code":"class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        return not collections.Counter(ransomNote) - collections.Counter(magazine)\n","Timestamp":"1536218803"}}},{"questionId":"350","questionFrontendId":"350","Title":"Intersection of Two Arrays II","TitleSlug":"intersection-of-two-arrays-ii","Content":"\u003cp\u003eGiven two arrays, write a function to compute their intersection.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums1 = \u003cspan id=\"example-input-1-1\"\u003e[1,2,2,1]\u003c/span\u003e, nums2 = \u003cspan id=\"example-input-1-2\"\u003e[2,2]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-1\"\u003e[2,2]\u003c/span\u003e\r\n\u003c/pre\u003e\r\n\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput: \u003c/strong\u003enums1 = \u003cspan id=\"example-input-2-1\"\u003e[4,9,5]\u003c/span\u003e, nums2 = \u003cspan id=\"example-input-2-2\"\u003e[9,4,9,8,4]\u003c/span\u003e\r\n\u003cstrong\u003eOutput: \u003c/strong\u003e\u003cspan id=\"example-output-2\"\u003e[4,9]\u003c/span\u003e\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eEach element in the result should appear as many times as it shows in both arrays.\u003c/li\u003e\r\n\t\u003cli\u003eThe result can be in any order.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003e\u003cb\u003eFollow up:\u003c/b\u003e\u003c/p\u003e\r\n\r\n\u003cul\u003e\r\n\t\u003cli\u003eWhat if the given array is already sorted? How would you optimize your algorithm?\u003c/li\u003e\r\n\t\u003cli\u003eWhat if \u003ci\u003enums1\u003c/i\u003e\u0026#39;s size is small compared to \u003ci\u003enums2\u003c/i\u003e\u0026#39;s size? Which algorithm is better?\u003c/li\u003e\r\n\t\u003cli\u003eWhat if elements of \u003ci\u003enums2\u003c/i\u003e are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"两个数组的交集 II","TranslatedContent":"\u003cp\u003e给定两个数组，编写一个函数来计算它们的交集。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums1 = [1,2,2,1], nums2 = [2,2]\n\u003cstrong\u003e输出: \u003c/strong\u003e[2,2]\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入: \u003c/strong\u003enums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u003cstrong\u003e输出: \u003c/strong\u003e[4,9]\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。\u003c/li\u003e\n\t\u003cli\u003e我们可以不考虑输出结果的顺序。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cstrong\u003e进阶:\u003c/strong\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e如果给定的数组已经排好序呢？你将如何优化你的算法？\u003c/li\u003e\n\t\u003cli\u003e如果\u0026nbsp;\u003cem\u003enums1\u0026nbsp;\u003c/em\u003e的大小比\u0026nbsp;\u003cem\u003enums2\u0026nbsp;\u003c/em\u003e小很多，哪种方法更优？\u003c/li\u003e\n\t\u003cli\u003e如果\u0026nbsp;\u003cem\u003enums2\u0026nbsp;\u003c/em\u003e的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\u003c/li\u003e\n\u003c/ul\u003e\n","Status":"ac","Tags":[],"Submits":{"15006753":{"ID":"15006753","StatusDisplay":"Accepted","Lang":"python","Runtime":"20 ms","Memory":"10.7 MB","URL":"/submissions/detail/15006753/","Code":"class Solution:\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums1 or not nums2:\n            return []\n        \n        data = {}\n        for x in nums1:\n            data.setdefault(x,0)\n            data[x] += 1\n        \n        res = []\n        for x in nums2:\n            if x in data and data[x]\u003e0:\n                data[x]-=1\n                res.append(x)\n                \n        return res\n\n","Timestamp":"1552925881"},"1958360":{"ID":"1958360","StatusDisplay":"Accepted","Lang":"python3","Runtime":"56 ms","Memory":"N/A","URL":"/submissions/detail/1958360/","Code":"class Solution:\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums1 or not nums2:\n            return []\n        \n        data = {}\n        for x in nums1:\n            data.setdefault(x,0)\n            data[x] += 1\n        \n        res = []\n        for x in nums2:\n            if x in data and data[x]\u003e0:\n                data[x]-=1\n                res.append(x)\n                \n        return res","Timestamp":"1525411272"},"7572844":{"ID":"7572844","StatusDisplay":"Accepted","Lang":"python3","Runtime":"60 ms","Memory":"N/A","URL":"/submissions/detail/7572844/","Code":"class Solution:\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums1 or not nums2:\n            return []\n        \n        data = {}\n        for x in nums1:\n            data.setdefault(x,0)\n            data[x] += 1\n        \n        res = []\n        for x in nums2:\n            if x in data and data[x]\u003e0:\n                data[x]-=1\n                res.append(x)\n                \n        return res\n","Timestamp":"1536218773"}}},{"questionId":"125","questionFrontendId":"125","Title":"Valid Palindrome","TitleSlug":"valid-palindrome","Content":"\u003cp\u003eGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u0026nbsp;For the purpose of this problem, we define empty string as valid palindrome.\u003c/p\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;A man, a plan, a canal: Panama\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e true\r\n\u003c/pre\u003e\r\n\r\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\r\n\r\n\u003cpre\u003e\r\n\u003cstrong\u003eInput:\u003c/strong\u003e \u0026quot;race a car\u0026quot;\r\n\u003cstrong\u003eOutput:\u003c/strong\u003e false\r\n\u003c/pre\u003e\r\n","Difficulty":"Easy","TranslatedTitle":"验证回文串","TranslatedContent":"\u003cp\u003e给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e说明：\u003c/strong\u003e本题中，我们将空字符串定义为有效的回文串。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 1:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;A man, a plan, a canal: Panama\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e true\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e示例 2:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e输入:\u003c/strong\u003e \u0026quot;race a car\u0026quot;\n\u003cstrong\u003e输出:\u003c/strong\u003e false\n\u003c/pre\u003e\n","Status":"ac","Tags":[],"Submits":{"11344952":{"ID":"11344952","StatusDisplay":"Accepted","Lang":"python3","Runtime":"96 ms","Memory":"6.7 MB","URL":"/submissions/detail/11344952/","Code":"class Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        a = 0\n        b = len(s) - 1\n        def isV(v):\n            if 97 \u003c= ord(v) \u003c= 122:\n                return True\n            if 65 \u003c= ord(v) \u003c= 90:\n                return True\n            if 48 \u003c= ord(v) \u003c= 57:\n                return True\n        while a \u003c b:\n            if not isV(s[a]):\n                a += 1\n                continue\n            if not isV(s[b]):\n                b -= 1\n                continue\n            if s[a].lower() == s[b].lower():\n                a += 1\n                b -= 1\n            else:\n                return False\n        return True","Timestamp":"1546855255"},"15006659":{"ID":"15006659","StatusDisplay":"Accepted","Lang":"python","Runtime":"68 ms","Memory":"11.2 MB","URL":"/submissions/detail/15006659/","Code":"class Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        a = 0\n        b = len(s) - 1\n        def isV(v):\n            if 97 \u003c= ord(v) \u003c= 122:\n                return True\n            if 65 \u003c= ord(v) \u003c= 90:\n                return True\n            if 48 \u003c= ord(v) \u003c= 57:\n                return True\n        while a \u003c b:\n            if not isV(s[a]):\n                a += 1\n                continue\n            if not isV(s[b]):\n                b -= 1\n                continue\n            if s[a].lower() == s[b].lower():\n                a += 1\n                b -= 1\n            else:\n                return False\n        return True\n","Timestamp":"1552925134"},"2274403":{"ID":"2274403","StatusDisplay":"Accepted","Lang":"python3","Runtime":"72 ms","Memory":"N/A","URL":"/submissions/detail/2274403/","Code":"class Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = [x for x in s.lower() if x in \"1234567890asdfghjklqwertyuiopzxcvbnm\"]\n        return s[::-1] == s\n        ","Timestamp":"1526309017"},"7572740":{"ID":"7572740","StatusDisplay":"Accepted","Lang":"python3","Runtime":"64 ms","Memory":"N/A","URL":"/submissions/detail/7572740/","Code":"class Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = [x for x in s.lower() if x in \"1234567890asdfghjklqwertyuiopzxcvbnm\"]\n        return s[::-1] == s\n        \n","Timestamp":"1536218545"}}}]}